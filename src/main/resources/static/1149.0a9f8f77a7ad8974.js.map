{"version":3,"mappings":"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","names":["i0","$event","ctx_r6","AccessManagerComponent","cvService","element","A","this","EventEmitter","FormGroup","privateAccess","set","access","getVocabularies","getDomainVocabulary","subscribe","accessOptions","response","ACCESS_GROUP","list","u","createAccessFromGroup","crosscheckAccesses","arguments","group","forEach","accessOption","value","FormControl","accessFormGroup","tooltipMessage","length","i","controls","setValue","display","replace","event","checked","push","indexToRemove","indexOf","splice","accessOut","emit","Event","bubbles","cancelable","nativeElement","dispatchEvent","v","selectors","ctx","ctx_r8","ctx_r11","AmountFormComponent","Validators","privateSubstanceAmount","amount","typeControl","type","valueChanges","c","averageControl","average","match","lowControl","low","highControl","high","lowLimitControl","lowLimit","highLimitControl","highLimit","unitsControl","units","nonNumericValueControl","nonNumericValue","substanceAmount","setTimeout","m","amountTypeList","AMOUNT_TYPE","amountUnitList","AMOUNT_UNIT","vocab","property","some","r","AuditInfoComponent","f","SubstanceFormMoietiesComponent","substanceFormStructureService","a","menuLabelUpdate","hiddenStateUpdate","subscription","substanceMoieties","moieties","x","unsubscribe","SubstanceFormBase","SubstanceFormMoietiesModule","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","SubstanceImageModule"],"sources":["./src/app/core/substance-form/access-manager/access-manager.component.html","./src/app/core/substance-form/access-manager/access-manager.component.ts","./src/app/core/substance-form/amount-form/amount-form.component.html","./src/app/core/substance-form/amount-form/amount-form.component.ts","./src/app/core/substance-form/audit-info/audit-info.component.html","./src/app/core/substance-form/audit-info/audit-info.component.ts","./src/app/core/substance-form/moieties/substance-form-moieties.component.html","./src/app/core/substance-form/moieties/substance-form-moieties.component.ts","./src/app/core/substance-form/moieties/substance-form-moieties.module.ts"],"sourcesContent":["<div class=\"menu-container\">\r\n  <button\r\n    mat-button\r\n    [matMenuTriggerFor]=\"accessMenu\"\r\n    [matTooltip]=\"tooltipMessage\"\r\n    (menuOpened)=\"menuOpened()\"\r\n    (menuClosed)=\"menuClosed()\">\r\n    <mat-icon svgIcon=\"lock\" *ngIf=\"access.length\"></mat-icon>\r\n    <mat-icon svgIcon=\"lock_open\" *ngIf=\"!access.length\"></mat-icon>\r\n    <span>{{label? label: \"Access\"}}</span>\r\n  </button>\r\n  <mat-menu #accessMenu=\"matMenu\" xPosition=\"before\">\r\n    <form [formGroup]=\"accessFormGroup\">\r\n      <div mat-menu-item *ngFor=\"let accessOption of accessOptions\" (click)=\"$event.stopPropagation()\">\r\n        <mat-checkbox (change)=\"updateAccess($event, accessOption)\" [formControlName]=\"accessOption.value\">\r\n          {{accessOption.display}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </form>\r\n  </mat-menu>\r\n</div>","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'app-access-manager',\n  templateUrl: './access-manager.component.html',\n  styleUrls: ['./access-manager.component.scss']\n})\nexport class AccessManagerComponent implements OnInit, AfterViewInit {\n  accessOptions: Array<VocabularyTerm>;\n  privateAccess: Array<string> = [];\n  @Output() accessOut = new EventEmitter<Array<string>>();\n  tooltipMessage: string;\n  @Input() label?: string;\n  accessFormGroup = new FormGroup({});\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {}\n\n  @Input()\n  set access(access: Array<string>) {\n    if (access != null) {\n      this.privateAccess = access;\n      this.getVocabularies();\n    } else {\n      this.privateAccess = [];\n      this.getVocabularies();\n    }\n  }\n\n  get access(): Array<string> {\n    return this.privateAccess;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('ACCESS_GROUP').subscribe(response => {\n      const accessOptions = response['ACCESS_GROUP'].list;\n      this.createAccessFromGroup(accessOptions);\n      this.accessOptions = accessOptions;\n      this.crosscheckAccesses();\n    });\n  }\n\n  private createAccessFromGroup(accessOptions: Array<VocabularyTerm> = []): void {\n    const group: any = {};\n    accessOptions.forEach(accessOption => {\n      group[accessOption.value] = new FormControl();\n    });\n    this.accessFormGroup = new FormGroup(group);\n  }\n\n  private crosscheckAccesses() {\n    this.tooltipMessage = 'Access is set to: ';\n\n    if (this.privateAccess.length > 0) {\n      this.privateAccess.forEach(accessOption => {\n        for (let i = 0; i < this.accessOptions.length; i++) {\n          if (accessOption === this.accessOptions[i].value) {\n            this.accessFormGroup.controls[accessOption].setValue(true);\n            this.tooltipMessage += (this.accessOptions[i].display + ', ');\n            break;\n          }\n        }\n      });\n      this.tooltipMessage = this.tooltipMessage.replace(/(, )$/, '');\n    } else {\n      this.tooltipMessage += 'public';\n    }\n  }\n\n  updateAccess(event: MatCheckboxChange, accessOption: VocabularyTerm): void {\n\n    if (this.privateAccess.length === 0) {\n      this.tooltipMessage = this.tooltipMessage.replace('public', '');\n    }\n\n    if (event.checked) {\n      this.privateAccess.push(accessOption.value);\n\n      if (this.privateAccess.length > 1) {\n        this.tooltipMessage += ', ';\n      }\n\n      this.tooltipMessage += (accessOption.display);\n\n    } else {\n\n      const indexToRemove = this.privateAccess.indexOf(accessOption.value);\n\n      if (indexToRemove > -1) {\n        this.privateAccess.splice(indexToRemove, 1);\n      }\n\n      this.tooltipMessage = this.tooltipMessage.replace(accessOption.display, '')\n        .replace(': , ', ': ')\n        .replace(', ,', ',')\n        .replace(/,$/, '')\n        .replace(/(, )$/, '');\n\n      if (this.privateAccess.length === 0) {\n        this.tooltipMessage += 'public';\n      }\n    }\n\n    this.accessOut.emit(this.privateAccess);\n  }\n\n  menuOpened(): void {\n    const event: Event = new Event('focusin', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  menuClosed(): void {\n    const event: Event = new Event('focusout', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n}\n","<div class = \"access\">\r\n  <app-access-manager class=\"right\" (accessOut)=\"updateAccess($event)\" [access]=\"substanceAmount.access\">\r\n  </app-access-manager>\r\n</div>\r\n<form class=\"amount-form\" *ngIf=\"substanceAmount\">\r\n  <div class=\"form-row\">\r\n    <div class = \"other-container\">\r\n    <div>\r\n    <mat-form-field class=\"amount-type\">\r\n      <mat-label>Type *</mat-label>\r\n      <mat-select [formControl]=\"typeControl\">\r\n          <mat-option [value] = 'null' ><span class = 'deselect' >Clear selection</span></mat-option>\r\n        <mat-option *ngFor=\"let type of amountTypeList\" [value]=\"type.value\">\r\n          {{type.display}}\r\n        </mat-option>\r\n        <mat-option *ngIf = \"privateSubstanceAmount.type && !inCV(  amountTypeList, privateSubstanceAmount.type) && privateSubstanceAmount.type !== ''\"\r\n                    value = \"{{privateSubstanceAmount.type}}\">{{privateSubstanceAmount.type}} (not in CV)</mat-option>\r\n        <mat-option value = 'other' >Other (New Value)</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  <div *ngIf = \"privateSubstanceAmount.type === 'other'\" class = \"custom\">\r\n    <input matInput placeholder=\"Custom value\" (focusout) = \"updateType($event.target)\" name=\"custom\" />\r\n  </div>\r\n    </div>\r\n    <mat-form-field class=\"amount-average\">\r\n      <input type=\"number\" matInput placeholder=\"Average\" [formControl]=\"averageControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"low\">\r\n      <input type=\"number\" matInput placeholder=\"Low\" [formControl]=\"lowControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"high\">\r\n      <input type=\"number\" matInput placeholder=\"High\" [formControl]=\"highControl\" />\r\n    </mat-form-field>\r\n    </div>\r\n    <div class=\"form-row\">\r\n\r\n    <mat-form-field class=\"low-limit\">\r\n      <input type=\"number\" matInput placeholder=\"Low Limit\" [formControl]=\"lowLimitControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"high-limit\">\r\n      <input type=\"number\" matInput placeholder=\"High Limit\" [formControl]=\"highLimitControl\" />\r\n    </mat-form-field>\r\n    <div class = \"other-container\">\r\n    <div>\r\n      <mat-form-field class=\"amount-units\">\r\n        <mat-label>Units</mat-label>\r\n        <mat-select [formControl]=\"unitsControl\">\r\n            <mat-option [value] = 'null' ><span class = 'deselect' >Clear selection</span></mat-option>\r\n          <mat-option *ngFor=\"let unit of amountUnitList\" [value]=\"unit.value\">\r\n            {{unit.display}}\r\n          </mat-option>\r\n          <mat-option *ngIf = \"privateSubstanceAmount.units && !inCV(  amountUnitList, privateSubstanceAmount.units) && privateSubstanceAmount.units !== ''\"\r\n                      value = \"{{privateSubstanceAmount.units}}\">{{privateSubstanceAmount.units}} (not in CV)</mat-option>\r\n          <mat-option value = 'other' >Other (New Value)</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n    <div *ngIf = \"privateSubstanceAmount.units === 'other'\" class = \"custom\">\r\n      <input matInput placeholder=\"Custom value\" (focusout) = \"updateUnits($event.target)\" name=\"custom\" />\r\n    </div>\r\n    </div>\r\n    <mat-form-field class=\"non-numeric-value\">\r\n        <input matInput placeholder=\"Non-numeric Value\" [formControl]=\"nonNumericValueControl\" />\r\n      </mat-form-field>\r\n  </div>\r\n</form>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { SubstanceAmount } from '@gsrs-core/substance/substance.model';\r\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\r\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-amount-form',\r\n  templateUrl: './amount-form.component.html',\r\n  styleUrls: ['./amount-form.component.scss']\r\n})\r\nexport class AmountFormComponent implements OnInit {\r\n  private privateSubstanceAmount: SubstanceAmount;\r\n  amountTypeList: Array<VocabularyTerm> = [];\r\n  amountUnitList: Array<VocabularyTerm> = [];\r\n  typeControl = new FormControl('', Validators.required);\r\n  averageControl = new FormControl('');\r\n  lowControl = new FormControl('');\r\n  highControl = new FormControl('');\r\n  lowLimitControl = new FormControl('');\r\n  highLimitControl = new FormControl('');\r\n  unitsControl = new FormControl('');\r\n  nonNumericValueControl = new FormControl('');\r\n\r\n  constructor(\r\n    private cvService: ControlledVocabularyService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getVocabularies();\r\n  }\r\n\r\n  @Input()\r\n  set substanceAmount(amount: SubstanceAmount) {\r\n    if (amount != null) {\r\n      this.privateSubstanceAmount = amount;\r\n\r\n      this.typeControl.setValue(this.privateSubstanceAmount.type);\r\n      this.typeControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.type = value;\r\n      });\r\n      this.averageControl.setValue(this.privateSubstanceAmount.average);\r\n      this.averageControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.averageControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.averageControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.average = value;\r\n      });\r\n      this.lowControl.setValue(this.privateSubstanceAmount.low);\r\n      this.lowControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.lowControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.lowControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.low = value;\r\n      });\r\n      this.highControl.setValue(this.privateSubstanceAmount.high);\r\n      this.highControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.highControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.highControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.high = value;\r\n      });\r\n      this.lowLimitControl.setValue(this.privateSubstanceAmount.lowLimit);\r\n      this.lowLimitControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.lowLimitControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.lowLimitControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.lowLimit = value;\r\n      });\r\n      this.highLimitControl.setValue(this.privateSubstanceAmount.highLimit);\r\n      this.highLimitControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.highLimitControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.highLimitControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.highLimit = value;\r\n      });\r\n      this.unitsControl.setValue(this.privateSubstanceAmount.units);\r\n      this.unitsControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.units = value;\r\n      });\r\n      this.nonNumericValueControl.setValue(this.privateSubstanceAmount.nonNumericValue);\r\n      this.nonNumericValueControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.nonNumericValue = value;\r\n      });\r\n    }\r\n  }\r\n\r\n  get substanceAmount(): SubstanceAmount {\r\n    return this.privateSubstanceAmount;\r\n  }\r\n\r\n  updateAccess(access: Array<string>): void {\r\n    this.privateSubstanceAmount.access = access;\r\n    this.substanceAmount.access = access;\r\n  }\r\n\r\n  updateType(event: any) {\r\n    setTimeout(() => {\r\n      this.typeControl.setValue(event.value);\r\n    });\r\n    this.privateSubstanceAmount.type = event.value;\r\n  }\r\n\r\n  updateUnits(event: any) {\r\n    setTimeout(() => {\r\n      this.unitsControl.setValue(event.value);\r\n    });\r\n    this.privateSubstanceAmount.units = event.value;\r\n  }\r\n\r\n  getVocabularies(): void {\r\n    this.cvService.getDomainVocabulary('AMOUNT_TYPE', 'AMOUNT_UNIT').subscribe(response => {\r\n      this.amountTypeList = response['AMOUNT_TYPE'].list;\r\n      this.amountUnitList = response['AMOUNT_UNIT'].list;\r\n    });\r\n  }\r\n\r\n  inCV(vocab: Array<VocabularyTerm>, property: string) {\r\n    return vocab.some(r => property === r.value);\r\n  }\r\n\r\n}\r\n","<div class = 'audit-container' *ngIf = \"source\">\n  <div class = \"name\" *ngIf = 'source.createdBy'><b class = 'static'>Created By:</b> {{ source.createdBy}} </div>\n  <div class = \"date\" *ngIf = 'source.created'><b class = 'static'>on</b> {{ source.created | date:'medium'}}</div>\n  <div class = \"spacer\" *ngIf = 'source.created && source.lastEdited'> <b>-</b> </div>\n  <div class = \"name\" *ngIf = 'source.lastEditedBy'><b class = 'static'>Last Edited By</b>: {{ source.lastEditedBy}} </div>\n  <div class = \"date\" *ngIf = 'source.lastEdited'><b class = 'static'>on</b> {{ source.lastEdited | date:'medium'}}</div>\n</div>\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-audit-info',\n  templateUrl: './audit-info.component.html',\n  styleUrls: ['./audit-info.component.scss']\n})\nexport class AuditInfoComponent implements OnInit {\n  @Input() source: any;\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n}\n","<div class=\"moiety\" *ngFor=\"let moiety of moieties; last as isLast\">\n  <div class=\"flex-row\">\n      <div class=\"moiety-structure flex-colum\">\n        <div class=\"structure-title\">Moiety Structure</div>\n        <img appSubstanceImage [entityId]=\"moiety.id\" stereo = \"true\">\n      </div>\n      <div class=\"structure-form-container flex-column\">\n        <app-structure-form [structure]=\"moiety\" type=\"structure\" hideAccess=\"true\"></app-structure-form>\n      </div>\n  </div>\n  <div class=\"amount-form-container\">\n    <div class=\"count-amount-title\">Count Amount</div>\n    <div>\n      <app-amount-form [substanceAmount]=\"moiety.countAmount\"></app-amount-form>\n    </div>\n  </div>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { SafeUrl } from '@angular/platform-browser';\nimport { SubstanceFormBase } from '../base-classes/substance-form-base';\nimport { StructureService } from '../../structure/structure.service';\nimport { SubstanceMoiety } from '@gsrs-core/substance/substance.model';\nimport { SubstanceFormStructureService } from '../structure/substance-form-structure.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-substance-form-moieties',\n  templateUrl: './substance-form-moieties.component.html',\n  styleUrls: ['./substance-form-moieties.component.scss']\n})\nexport class SubstanceFormMoietiesComponent extends SubstanceFormBase implements OnInit, OnDestroy {\n  moieties: Array<SubstanceMoiety> = [];\n  subscription: Subscription;\n\n  constructor(\n    private substanceFormStructureService: SubstanceFormStructureService\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.menuLabelUpdate.emit('Moieties');\n    this.hiddenStateUpdate.emit(true);\n    this.subscription = this.substanceFormStructureService.substanceMoieties.subscribe(moieties => {\n      this.moieties = moieties;\n      if (moieties && moieties.length > 1) {\n        this.hiddenStateUpdate.emit(false);\n      } else {\n        this.hiddenStateUpdate.emit(true);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormMoietiesComponent } from './substance-form-moieties.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { SubstanceImageModule } from '@gsrs-core/substance/substance-image.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormMoietiesComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    SubstanceImageModule\n  ],\n  declarations: [\n    SubstanceFormMoietiesComponent\n  ]\n})\nexport class SubstanceFormMoietiesModule { }\n"],"sourceRoot":"webpack:///","file":"1149.0a9f8f77a7ad8974.js"}