{"version":3,"mappings":"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","names":["i0","ctx_r8","ctx_r11","AmountFormComponent","cvService","this","FormControl","Validators","getVocabularies","privateSubstanceAmount","set","amount","typeControl","setValue","type","valueChanges","subscribe","u","value","averageControl","average","length","match","lowControl","low","highControl","high","lowLimitControl","lowLimit","highLimitControl","highLimit","unitsControl","units","nonNumericValueControl","nonNumericValue","access","substanceAmount","event","setTimeout","getDomainVocabulary","d","amountTypeList","response","AMOUNT_TYPE","list","amountUnitList","AMOUNT_UNIT","vocab","property","some","r","g","selectors","ctx","ctx_r6","RelationshipFormComponent","utilsService","EventEmitter","viewFull","val","privateRelationship","relationship","relatedSubstanceUuid","relatedSubstance","refuuid","mediatorSubstanceUuid","mediatorSubstance","$$deletedCode","newUUID","deleteTimer","n","relationshipDeleted","emit","clearTimeout","substance","refPname","_name","name","uuid","substanceClass","approvalID","c","ctx_r14","ctx_r16","ctx_r18","SubstanceFormRelationshipsCardComponent","substanceFormRelationshipsService","scrollToService","gaService","v","canAddItemUpdate","menuLabelUpdate","analyticsEventCategory","relationshipsSubscription","substanceRelationships","l","relationships","filtered","searchSubscription","searchControl","filterList","subscriptions","push","page","pageChange","componentDestroyed","forEach","subscription","unsubscribe","expanded","addRelationship","addSubstanceRelationship","scrollToElement","deleteSubstanceRelationship","SubstanceCardBaseFilteredList","SubstanceFormRelationshipsModule","b","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceSelectorModule","MatTooltipModule"],"sources":["./src/app/core/substance-form/amount-form/amount-form.component.html","./src/app/core/substance-form/amount-form/amount-form.component.ts","./src/app/core/substance-form/relationships/relationship-form.component.html","./src/app/core/substance-form/relationships/relationship-form.component.ts","./src/app/core/substance-form/relationships/substance-form-relationships-card.component.html","./src/app/core/substance-form/relationships/substance-form-relationships-card.component.ts","./src/app/core/substance-form/relationships/substance-form-relationships.module.ts"],"sourcesContent":["<div class = \"access\">\r\n  <app-access-manager class=\"right\" (accessOut)=\"updateAccess($event)\" [access]=\"substanceAmount.access\">\r\n  </app-access-manager>\r\n</div>\r\n<form class=\"amount-form\" *ngIf=\"substanceAmount\">\r\n  <div class=\"form-row\">\r\n    <div class = \"other-container\">\r\n    <div>\r\n    <mat-form-field class=\"amount-type\">\r\n      <mat-label>Type *</mat-label>\r\n      <mat-select [formControl]=\"typeControl\">\r\n          <mat-option [value] = 'null' ><span class = 'deselect' >Clear selection</span></mat-option>\r\n        <mat-option *ngFor=\"let type of amountTypeList\" [value]=\"type.value\">\r\n          {{type.display}}\r\n        </mat-option>\r\n        <mat-option *ngIf = \"privateSubstanceAmount.type && !inCV(  amountTypeList, privateSubstanceAmount.type) && privateSubstanceAmount.type !== ''\"\r\n                    value = \"{{privateSubstanceAmount.type}}\">{{privateSubstanceAmount.type}} (not in CV)</mat-option>\r\n        <mat-option value = 'other' >Other (New Value)</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  <div *ngIf = \"privateSubstanceAmount.type === 'other'\" class = \"custom\">\r\n    <input matInput placeholder=\"Custom value\" (focusout) = \"updateType($event.target)\" name=\"custom\" />\r\n  </div>\r\n    </div>\r\n    <mat-form-field class=\"amount-average\">\r\n      <input type=\"number\" matInput placeholder=\"Average\" [formControl]=\"averageControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"low\">\r\n      <input type=\"number\" matInput placeholder=\"Low\" [formControl]=\"lowControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"high\">\r\n      <input type=\"number\" matInput placeholder=\"High\" [formControl]=\"highControl\" />\r\n    </mat-form-field>\r\n    </div>\r\n    <div class=\"form-row\">\r\n\r\n    <mat-form-field class=\"low-limit\">\r\n      <input type=\"number\" matInput placeholder=\"Low Limit\" [formControl]=\"lowLimitControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"high-limit\">\r\n      <input type=\"number\" matInput placeholder=\"High Limit\" [formControl]=\"highLimitControl\" />\r\n    </mat-form-field>\r\n    <div class = \"other-container\">\r\n    <div>\r\n      <mat-form-field class=\"amount-units\">\r\n        <mat-label>Units</mat-label>\r\n        <mat-select [formControl]=\"unitsControl\">\r\n            <mat-option [value] = 'null' ><span class = 'deselect' >Clear selection</span></mat-option>\r\n          <mat-option *ngFor=\"let unit of amountUnitList\" [value]=\"unit.value\">\r\n            {{unit.display}}\r\n          </mat-option>\r\n          <mat-option *ngIf = \"privateSubstanceAmount.units && !inCV(  amountUnitList, privateSubstanceAmount.units) && privateSubstanceAmount.units !== ''\"\r\n                      value = \"{{privateSubstanceAmount.units}}\">{{privateSubstanceAmount.units}} (not in CV)</mat-option>\r\n          <mat-option value = 'other' >Other (New Value)</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n    <div *ngIf = \"privateSubstanceAmount.units === 'other'\" class = \"custom\">\r\n      <input matInput placeholder=\"Custom value\" (focusout) = \"updateUnits($event.target)\" name=\"custom\" />\r\n    </div>\r\n    </div>\r\n    <mat-form-field class=\"non-numeric-value\">\r\n        <input matInput placeholder=\"Non-numeric Value\" [formControl]=\"nonNumericValueControl\" />\r\n      </mat-form-field>\r\n  </div>\r\n</form>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { SubstanceAmount } from '@gsrs-core/substance/substance.model';\r\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\r\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-amount-form',\r\n  templateUrl: './amount-form.component.html',\r\n  styleUrls: ['./amount-form.component.scss']\r\n})\r\nexport class AmountFormComponent implements OnInit {\r\n  private privateSubstanceAmount: SubstanceAmount;\r\n  amountTypeList: Array<VocabularyTerm> = [];\r\n  amountUnitList: Array<VocabularyTerm> = [];\r\n  typeControl = new FormControl('', Validators.required);\r\n  averageControl = new FormControl('');\r\n  lowControl = new FormControl('');\r\n  highControl = new FormControl('');\r\n  lowLimitControl = new FormControl('');\r\n  highLimitControl = new FormControl('');\r\n  unitsControl = new FormControl('');\r\n  nonNumericValueControl = new FormControl('');\r\n\r\n  constructor(\r\n    private cvService: ControlledVocabularyService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getVocabularies();\r\n  }\r\n\r\n  @Input()\r\n  set substanceAmount(amount: SubstanceAmount) {\r\n    if (amount != null) {\r\n      this.privateSubstanceAmount = amount;\r\n\r\n      this.typeControl.setValue(this.privateSubstanceAmount.type);\r\n      this.typeControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.type = value;\r\n      });\r\n      this.averageControl.setValue(this.privateSubstanceAmount.average);\r\n      this.averageControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.averageControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.averageControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.average = value;\r\n      });\r\n      this.lowControl.setValue(this.privateSubstanceAmount.low);\r\n      this.lowControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.lowControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.lowControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.low = value;\r\n      });\r\n      this.highControl.setValue(this.privateSubstanceAmount.high);\r\n      this.highControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.highControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.highControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.high = value;\r\n      });\r\n      this.lowLimitControl.setValue(this.privateSubstanceAmount.lowLimit);\r\n      this.lowLimitControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.lowLimitControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.lowLimitControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.lowLimit = value;\r\n      });\r\n      this.highLimitControl.setValue(this.privateSubstanceAmount.highLimit);\r\n      this.highLimitControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.highLimitControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.highLimitControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.highLimit = value;\r\n      });\r\n      this.unitsControl.setValue(this.privateSubstanceAmount.units);\r\n      this.unitsControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.units = value;\r\n      });\r\n      this.nonNumericValueControl.setValue(this.privateSubstanceAmount.nonNumericValue);\r\n      this.nonNumericValueControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.nonNumericValue = value;\r\n      });\r\n    }\r\n  }\r\n\r\n  get substanceAmount(): SubstanceAmount {\r\n    return this.privateSubstanceAmount;\r\n  }\r\n\r\n  updateAccess(access: Array<string>): void {\r\n    this.privateSubstanceAmount.access = access;\r\n    this.substanceAmount.access = access;\r\n  }\r\n\r\n  updateType(event: any) {\r\n    setTimeout(() => {\r\n      this.typeControl.setValue(event.value);\r\n    });\r\n    this.privateSubstanceAmount.type = event.value;\r\n  }\r\n\r\n  updateUnits(event: any) {\r\n    setTimeout(() => {\r\n      this.unitsControl.setValue(event.value);\r\n    });\r\n    this.privateSubstanceAmount.units = event.value;\r\n  }\r\n\r\n  getVocabularies(): void {\r\n    this.cvService.getDomainVocabulary('AMOUNT_TYPE', 'AMOUNT_UNIT').subscribe(response => {\r\n      this.amountTypeList = response['AMOUNT_TYPE'].list;\r\n      this.amountUnitList = response['AMOUNT_UNIT'].list;\r\n    });\r\n  }\r\n\r\n  inCV(vocab: Array<VocabularyTerm>, property: string) {\r\n    return vocab.some(r => property === r.value);\r\n  }\r\n\r\n}\r\n","<div class=\"relationship-form-container\">\n  <div *ngIf=\"relationship.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"flex-column delete-column\">\n      <div class=\"delete-container\">\n          <button mat-icon-button matTooltip=\"Delete relationship\" (click)=\"deleteRelationship()\">\n            <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n          </button>\n        </div>\n  </div>\n  <div class=\"flex-column related-substance\">\n    <app-substance-selector (selectionUpdated)=\"relatedSubstanceUpdated($event)\"\n      eventCategory=\"substanceRelationshipRelatedSub\" placeholder=\"Related Substance\" [hideImage] = \"!viewFull\" header=\"Related Substance\"\n      [subuuid]=\"relatedSubstanceUuid\">\n    </app-substance-selector>\n  </div>\n  <div class=\"flex-column form-content\">\n    <div class=\"form-row\">\n      \n      <app-cv-input class = \"type\" required = 'true' domain = \"RELATIONSHIP_TYPE\"  title = \"Type\" name = \"type\"\n                    [model] = \"relationship.type\" (valueChange)= \"relationship.type = $event\">\n      </app-cv-input>\n\n      <div>\n        <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"relationship.access\">\n        </app-access-manager>\n      </div>\n    </div>\n    <div class=\"form-row \"  *ngIf = \"viewFull\">\n      <app-cv-input class = \"qualification\" key = \"Relationship Qualification\"  title = \"Qualification\" name = \"Qualification\"\n                    [model] = \"relationship.qualification\" (valueChange)= \"relationship.qualification = $event\">\n      </app-cv-input>\n\n      <app-cv-input class = \"interaction-type\" key = \"Relationship Interaction Type\"  title = \"Interaction Type\" name = \"Interaction Type\"\n                    [model] = \"relationship.interactionType\" (valueChange)= \"relationship.interactionType = $event\">\n      </app-cv-input>\n\n    </div>\n    <div class=\"form-row\"  *ngIf = \"viewFull\">\n      <div class=\"comments\">\n        <div class=\"textarea-label\">Comments</div>\n        <textarea placeholder=\"Enter text here\" [(ngModel)]=\"relationship.comments\" name=\"comments\">\n        </textarea>\n      </div>\n    </div>\n  </div>\n  <div class=\"flex-column mediator-substance\" >\n      <app-substance-selector (selectionUpdated)=\"mediatorSubstanceUpdated($event)\"\n      eventCategory=\"substanceFormDefinitionType\" placeholder=\"Mediator Substance\" [hideImage] = \"!viewFull\" header=\"Mediator Substance\"\n      [subuuid]=\"mediatorSubstanceUuid\">\n    </app-substance-selector>\n    </div>\n     \n  <div class = \"chevron\" matTooltip = \"Expand / collapse rows\"><button mat-icon-button (click) = \"viewFull = !viewFull\" class = \"chevron-button\" >\n    <mat-icon *ngIf = \"viewFull\"svgIcon=\"chevron_up\" ></mat-icon>\n    <mat-icon *ngIf = \"!viewFull\"svgIcon=\"chevron_down\"></mat-icon>\n  </button>\n  </div>\n</div>\n<div *ngIf=\"!relationship.$$deletedCode && viewFull\">\n  <div class=\"amount-form-container\">\n    <div class=\"amount-title\">Amount</div>\n    <app-amount-form [substanceAmount]=\"relationship.amount\"></app-amount-form>\n  </div>\n  <div class=\"form-row\"  *ngIf = \"viewFull\">\n    <div class=\"references-container\">\n      <app-domain-references [referencesUuids]=\"relationship.references\" #references></app-domain-references>\n    </div>\n  </div>\n  <div class = \"form-row\">\n    <app-audit-info [source] = \"relationship\"></app-audit-info>\n  </div>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { SubstanceRelationship, SubstanceSummary, SubstanceRelated, MediatorSubstance } from '../../substance/substance.model';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, Validators } from '@angular/forms';\nimport { UtilsService } from '../../utils/utils.service';\n\n@Component({\n  selector: 'app-relationship-form',\n  templateUrl: './relationship-form.component.html',\n  styleUrls: ['./relationship-form.component.scss']\n})\nexport class RelationshipFormComponent implements OnInit {\n  private privateRelationship: SubstanceRelationship;\n  relatedSubstanceUuid: string;\n  mediatorSubstanceUuid: string;\n  @Output() relationshipDeleted = new EventEmitter<SubstanceRelationship>();\n  deleteTimer: any;\n  viewFull = true;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private utilsService: UtilsService\n  ) { }\n\n  ngOnInit() {\n\n  }\n\n  @Input()\n  set show(val: boolean) {\n    if (val != null) {\n     this.viewFull = val;\n    }\n  }\n\n  get show(): boolean {\n    return this.viewFull || null;\n  }\n  @Input()\n  set relationship(relationship: SubstanceRelationship) {\n    this.privateRelationship = relationship;\n    if (this.privateRelationship.amount == null) {\n      this.privateRelationship.amount = {};\n    }\n    this.relatedSubstanceUuid = this.privateRelationship.relatedSubstance && this.privateRelationship.relatedSubstance.refuuid || '';\n    this.mediatorSubstanceUuid = this.privateRelationship.mediatorSubstance && this.privateRelationship.mediatorSubstance.refuuid || '';\n  }\n\n  get relationship(): SubstanceRelationship {\n    return this.privateRelationship;\n  }\n\n\n  deleteRelationship(): void {\n    this.privateRelationship.$$deletedCode = this.utilsService.newUUID();\n    if ((!this.privateRelationship.relatedSubstance || !this.privateRelationship.relatedSubstance.refuuid)\n      && !this.privateRelationship.type\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.relationshipDeleted.emit(this.relationship);\n      }, 2000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateRelationship.$$deletedCode;\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.relationship.access = access;\n  }\n\n  relatedSubstanceUpdated(substance: SubstanceSummary): void {\n    if ( substance !== null) {\n      const relatedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.relationship.relatedSubstance = relatedSubstance;\n    } else {\n      this.relationship.relatedSubstance = {};\n    }\n  }\n\n  mediatorSubstanceUpdated(substance: SubstanceSummary): void {\n    if ( substance !== null) {\n    const relatedSubstance:  MediatorSubstance = {\n      refPname: substance._name,\n      refuuid: substance.uuid,\n      substanceClass: 'reference',\n      approvalID: substance.approvalID\n    };\n    this.relationship.mediatorSubstance = relatedSubstance;\n  } else {\n    this.relationship.mediatorSubstance = {};\n  }\n}\n}\n","<div class=\"flex-row\">\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\" *ngIf=\"relationships && relationships.length > pageSize\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n  <span class=\"middle-fill\"></span>\n  <button *ngIf=\"relationships && relationships.length > 0\" class = 'standardize' mat-button (click)=\"collapse()\">{{expanded? 'Collapse':'Expand'}} All</button>\n\n  <!-- <button mat-button (click)=\"addRelationship()\">\n    Add relationship <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<mat-paginator *ngIf=\"relationships && relationships.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n    (page)=\"pageChange($event, analyticsEventCategory)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>\n<div class=\"relationship\" *ngFor=\"let relationship of paged; last as isLast; index as index\" appScrollToTarget\n  [id]=\"'substance-relationship-' + index\">\n  <app-relationship-form [relationship]=\"relationship\" (relationshipDeleted)=\"deleteRelationship($event)\"  [show] = \"expanded\">\n  </app-relationship-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<mat-paginator *ngIf=\"relationships && relationships.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n  (page)=\"pageChange($event, analyticsEventCategory)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n\n\n\n<div *ngIf = \"relationships && relationships.length > 0\" style = \"display: flex;\">\n    <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"addRelationship()\">\n        Add relationship <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n  </div>","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { SubstanceRelationship } from '@gsrs-core/substance/substance.model';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport { Subscription } from 'rxjs';\nimport { SubstanceFormRelationshipsService } from './substance-form-relationships.service';\n\n@Component({\n  selector: 'app-substance-form-relationships-card',\n  templateUrl: './substance-form-relationships-card.component.html',\n  styleUrls: ['./substance-form-relationships-card.component.scss']\n})\nexport class SubstanceFormRelationshipsCardComponent extends SubstanceCardBaseFilteredList<SubstanceRelationship>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  relationships: Array<SubstanceRelationship>;\n  private subscriptions: Array<Subscription> = [];\n  expanded = true;\n\n  constructor(\n    private substanceFormRelationshipsService: SubstanceFormRelationshipsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Relationships');\n    this.analyticsEventCategory = 'substance form relationships';\n  }\n\n  ngAfterViewInit() {\n    const relationshipsSubscription = this.substanceFormRelationshipsService.substanceRelationships.subscribe(relationships => {\n      this.relationships = relationships;\n      this.filtered = relationships;\n      const searchSubscription = this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.relationships, this.analyticsEventCategory);\n      }, error => {\n      });\n      this.subscriptions.push(searchSubscription);\n      this.page = 0;\n      this.pageChange();\n    });\n    this.subscriptions.push(relationshipsSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  collapse() {\n    this.expanded = !this.expanded;\n  }\n\n  addItem(): void {\n    this.addRelationship();\n  }\n\n  addRelationship(): void {\n    this.substanceFormRelationshipsService.addSubstanceRelationship();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-relationship-0`, 'center');\n    });\n  }\n\n  deleteRelationship(relationship: SubstanceRelationship): void {\n    this.substanceFormRelationshipsService.deleteSubstanceRelationship(relationship);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormRelationshipsCardComponent } from './substance-form-relationships-card.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport { RelationshipFormComponent } from './relationship-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormRelationshipsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceSelectorModule,\n    MatTooltipModule\n  ],\n  declarations: [\n    SubstanceFormRelationshipsCardComponent,\n    RelationshipFormComponent\n  ]\n})\nexport class SubstanceFormRelationshipsModule { }\n"],"sourceRoot":"webpack:///","file":"1704.6030a59c0d5fcf9a.js"}