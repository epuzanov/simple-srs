{"version":3,"mappings":"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","names":["i0","$event","ctx_r6","AccessManagerComponent","cvService","element","A","this","EventEmitter","FormGroup","privateAccess","set","access","getVocabularies","getDomainVocabulary","subscribe","accessOptions","response","ACCESS_GROUP","list","r","createAccessFromGroup","crosscheckAccesses","arguments","group","forEach","accessOption","value","FormControl","accessFormGroup","tooltipMessage","length","i","controls","setValue","display","replace","event","checked","push","indexToRemove","indexOf","splice","accessOut","emit","Event","bubbles","cancelable","nativeElement","dispatchEvent","h","selectors","ctx","AuditInfoComponent","g","ctx_r8","ctx_r17","ctx_r21","ctx_r22","StructuralModificationFormComponent","dialog","utilsService","overlayContainerService","substanceFormService","overlayContainer","getContainerElement","updateDisplay","getSubstanceType","privateMod","mod","relatedSubstanceUuid","molecularFragment","refuuid","residueModified","tags","join","definition","n","substanceType","substanceClass","unsubscribe","modTypeList","STRUCTURAL_MODIFICATION_TYPE","modLocationList","LOCATION_TYPE","modExtentList","EXTENT_TYPE","$$deletedCode","newUUID","deleteTimer","setTimeout","modDeleted","clearTimeout","substance","refPname","_name","name","uuid","approvalID","dialogRef","open","SubunitSelectorDialogComponent","data","card","link","sites","width","panelClass","style","zIndex","dialogSubscription","afterClosed","newLinks","emitStructuralModificationsUpdate","subscriptions","extentAmount","AmountFormDialogComponent","subsAmount","newAmount","siteDisplay","siteString","amt","displayAmount","v","string","split","vocab","property","some","u","ctx_r5","SubstanceFormStructuralModificationsCardComponent","substanceFormStructuralModificationsService","scrollToService","gaService","M","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","structuralSubscription","substanceStructuralModifications","s","modifications","componentDestroyed","subscription","addStructuralModification","addSubstanceStructuralModification","scrollToElement","modification","deleteSubstanceStructuralModification","SubstanceCardBaseFilteredList","SubstanceFormStructuralModificationsModule","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatSelectModule","MatInputModule","SubstanceSelectorModule"],"sources":["./src/app/core/substance-form/access-manager/access-manager.component.html","./src/app/core/substance-form/access-manager/access-manager.component.ts","./src/app/core/substance-form/audit-info/audit-info.component.html","./src/app/core/substance-form/audit-info/audit-info.component.ts","./src/app/core/substance-form/structural-modifications/structural-modification-form.component.html","./src/app/core/substance-form/structural-modifications/structural-modification-form.component.ts","./src/app/core/substance-form/structural-modifications/substance-form-structural-modifications-card.component.html","./src/app/core/substance-form/structural-modifications/substance-form-structural-modifications-card.component.ts","./src/app/core/substance-form/structural-modifications/substance-form-structural-modifications.module.ts"],"sourcesContent":["<div class=\"menu-container\">\r\n  <button\r\n    mat-button\r\n    [matMenuTriggerFor]=\"accessMenu\"\r\n    [matTooltip]=\"tooltipMessage\"\r\n    (menuOpened)=\"menuOpened()\"\r\n    (menuClosed)=\"menuClosed()\">\r\n    <mat-icon svgIcon=\"lock\" *ngIf=\"access.length\"></mat-icon>\r\n    <mat-icon svgIcon=\"lock_open\" *ngIf=\"!access.length\"></mat-icon>\r\n    <span>{{label? label: \"Access\"}}</span>\r\n  </button>\r\n  <mat-menu #accessMenu=\"matMenu\" xPosition=\"before\">\r\n    <form [formGroup]=\"accessFormGroup\">\r\n      <div mat-menu-item *ngFor=\"let accessOption of accessOptions\" (click)=\"$event.stopPropagation()\">\r\n        <mat-checkbox (change)=\"updateAccess($event, accessOption)\" [formControlName]=\"accessOption.value\">\r\n          {{accessOption.display}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </form>\r\n  </mat-menu>\r\n</div>","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'app-access-manager',\n  templateUrl: './access-manager.component.html',\n  styleUrls: ['./access-manager.component.scss']\n})\nexport class AccessManagerComponent implements OnInit, AfterViewInit {\n  accessOptions: Array<VocabularyTerm>;\n  privateAccess: Array<string> = [];\n  @Output() accessOut = new EventEmitter<Array<string>>();\n  tooltipMessage: string;\n  @Input() label?: string;\n  accessFormGroup = new FormGroup({});\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {}\n\n  @Input()\n  set access(access: Array<string>) {\n    if (access != null) {\n      this.privateAccess = access;\n      this.getVocabularies();\n    } else {\n      this.privateAccess = [];\n      this.getVocabularies();\n    }\n  }\n\n  get access(): Array<string> {\n    return this.privateAccess;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('ACCESS_GROUP').subscribe(response => {\n      const accessOptions = response['ACCESS_GROUP'].list;\n      this.createAccessFromGroup(accessOptions);\n      this.accessOptions = accessOptions;\n      this.crosscheckAccesses();\n    });\n  }\n\n  private createAccessFromGroup(accessOptions: Array<VocabularyTerm> = []): void {\n    const group: any = {};\n    accessOptions.forEach(accessOption => {\n      group[accessOption.value] = new FormControl();\n    });\n    this.accessFormGroup = new FormGroup(group);\n  }\n\n  private crosscheckAccesses() {\n    this.tooltipMessage = 'Access is set to: ';\n\n    if (this.privateAccess.length > 0) {\n      this.privateAccess.forEach(accessOption => {\n        for (let i = 0; i < this.accessOptions.length; i++) {\n          if (accessOption === this.accessOptions[i].value) {\n            this.accessFormGroup.controls[accessOption].setValue(true);\n            this.tooltipMessage += (this.accessOptions[i].display + ', ');\n            break;\n          }\n        }\n      });\n      this.tooltipMessage = this.tooltipMessage.replace(/(, )$/, '');\n    } else {\n      this.tooltipMessage += 'public';\n    }\n  }\n\n  updateAccess(event: MatCheckboxChange, accessOption: VocabularyTerm): void {\n\n    if (this.privateAccess.length === 0) {\n      this.tooltipMessage = this.tooltipMessage.replace('public', '');\n    }\n\n    if (event.checked) {\n      this.privateAccess.push(accessOption.value);\n\n      if (this.privateAccess.length > 1) {\n        this.tooltipMessage += ', ';\n      }\n\n      this.tooltipMessage += (accessOption.display);\n\n    } else {\n\n      const indexToRemove = this.privateAccess.indexOf(accessOption.value);\n\n      if (indexToRemove > -1) {\n        this.privateAccess.splice(indexToRemove, 1);\n      }\n\n      this.tooltipMessage = this.tooltipMessage.replace(accessOption.display, '')\n        .replace(': , ', ': ')\n        .replace(', ,', ',')\n        .replace(/,$/, '')\n        .replace(/(, )$/, '');\n\n      if (this.privateAccess.length === 0) {\n        this.tooltipMessage += 'public';\n      }\n    }\n\n    this.accessOut.emit(this.privateAccess);\n  }\n\n  menuOpened(): void {\n    const event: Event = new Event('focusin', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  menuClosed(): void {\n    const event: Event = new Event('focusout', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n}\n","<div class = 'audit-container' *ngIf = \"source\">\n  <div class = \"name\" *ngIf = 'source.createdBy'><b class = 'static'>Created By:</b> {{ source.createdBy}} </div>\n  <div class = \"date\" *ngIf = 'source.created'><b class = 'static'>on</b> {{ source.created | date:'medium'}}</div>\n  <div class = \"spacer\" *ngIf = 'source.created && source.lastEdited'> <b>-</b> </div>\n  <div class = \"name\" *ngIf = 'source.lastEditedBy'><b class = 'static'>Last Edited By</b>: {{ source.lastEditedBy}} </div>\n  <div class = \"date\" *ngIf = 'source.lastEdited'><b class = 'static'>on</b> {{ source.lastEdited | date:'medium'}}</div>\n</div>\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-audit-info',\n  templateUrl: './audit-info.component.html',\n  styleUrls: ['./audit-info.component.scss']\n})\nexport class AuditInfoComponent implements OnInit {\n  @Input() source: any;\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n}\n","<div class=\"code-form-container\">\n  <div *ngIf=\"mod.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n    <div class=\"delete-container\">\n      <button mat-icon-button matTooltip=\"Delete code\" (click)=\"deleteMod()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n      <div class=\"flex-column related-substance\">\n        <div class = \"related-holder\">\n          <app-substance-selector (selectionUpdated)=\"relatedSubstanceUpdated($event)\"\n                                  eventCategory=\"substanceRelationshipRelatedSub\" placeholder=\"Molecular Fragment\" header=\"Molecular Fragment\"\n                                  [subuuid]=\"relatedSubstanceUuid\">\n          </app-substance-selector>\n        </div>\n      </div>\n      <div class=\"flex-column form-content\">\n\n        <div class=\"form-row\">\n        <app-cv-input key = \"Structural Modification Structural Modification Type\"  title = \"Modification Type\" [model] = \"mod.structuralModificationType\"\n                      (valueChange)= \"mod.structuralModificationType = $event\"></app-cv-input>\n          <div class = 'sites' *ngIf = \"mod.locationType !== 'RESIDUE_SPECIFIC'\">\n            <div class=\"label\">Sites</div>\n            {{siteDisplay}}\n            <button mat-icon-button matTooltip=\"Undo\" (click)=\"(openDialog())\">\n              <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n          </div>\n          <div class = 'residues'>\n            <mat-form-field class=\"group\" *ngIf = \"substanceType !== 'nucleicAcid' && substanceType !== 'protein'\">\n              <input matInput placeholder=\"Residue Modified\" [(ngModel)]=\"mod.residueModified\"  name=\"Residue Modified\" />\n            </mat-form-field>\n            <div class=\"group\" *ngIf = \"substanceType === 'nucleicAcid'\">\n                <div class = \"flex-row\">\n                <mat-form-field [ngClass] = \"privateMod === 'other'?'risen':''\" class = \"cv-field\">\n                    <mat-label>Residue Modified</mat-label>\n                    <mat-select [(ngModel)]=\"mod.residueModified\" name=\"residueModified\" (ngModelChange)=\"updateResidue($event)\" [disabled] = \"disable\">\n                      <mat-option [value] = 'null' *ngIf = \"mod.residueModified\" ><span class = 'deselect' >Clear selection</span></mat-option>\n                    <mat-option *ngFor=\"let term of nucleicAcidOptions\" [value]=\" term.value\">\n                      {{term.display}}\n                    </mat-option>\n                    <mat-option *ngIf = \"mod.residueModified && !inCV(  nucleicAcidOptions, mod.residueModified) && mod.residueModified !== ''\"\n                                value = \"{{mod.residueModified}}\">{{mod.residueModified}} (not in CV)</mat-option>\n                    <mat-option value = 'other' >Other (New Value)</mat-option>\n                  </mat-select>\n                  </mat-form-field>\n                  </div>\n                  <div *ngIf = \"mod.residueModified === 'other'\" class = \"custom\">\n                    <input matInput placeholder=\"Custom value\" (focusout) = \"updateOrigin($event.target)\" name=\"custom\" />\n                  </div>\n            </div>\n              <div class=\"multi\" *ngIf = \"substanceType === 'protein'\">\n                  <app-tag-selector placeholder = \"Residue Modified\" class=\"tags\" (tagsUpdate)=\"update($event)\" disableCV = \"true\"\n                   [tags]=\"pipeToArray(mod.residueModified)\" cvDomain=\"AMINO_ACID_RESIDUE\"></app-tag-selector>\n                </div>\n          </div>\n        </div>\n\n   <div class=\"form-row\">\n  <app-cv-input domain = \"EXTENT_TYPE\" title = \"Extent\" (valueChange)= \"mod.extent = $event\" [model] = \"mod.extent\"></app-cv-input>\n  <app-cv-input domain = \"LOCATION_TYPE\" title = \"Location\" (valueChange)= \"mod.locationType = $event\" [model] = \"mod.locationType\"></app-cv-input>\n     <div class = \"group-access\">\n       <div class = 'form-row'>\n         <mat-form-field class=\"group\">\n           <input matInput placeholder=\"Group\" [(ngModel)]=\"mod.modificationGroup\" required name=\"group\" />\n         </mat-form-field>\n         <div class = \"access\">\n           <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"mod.access\">\n           </app-access-manager>\n         </div>\n       </div>\n     </div>\n\n   </div>\n\n\n   <div class=\"form-row\">\n     <div class = 'amount'>\n       <div class = \"label padded\">\n         Amount\n       </div>\n       <button mat-icon-button matTooltip=\"add\" (click)=\"(openAmountDialog())\">\n          <mat-icon svgIcon=\"edit\"></mat-icon>\n       </button>\n       <div *ngIf = \"mod.extentAmount\" class = \"amount-display\">\n         {{displayAmount(mod.extentAmount)}}\n       </div>\n\n     </div>\n\n   </div>\n   <div class = \"form-row\">\n    <app-audit-info [source] = \"mod\"></app-audit-info>\n  </div>\n   </div>\n\n</div>\n\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {StructuralModification, SubstanceCode, SubstanceRelated, SubstanceSummary} from '@gsrs-core/substance';\nimport {ControlledVocabularyService, VocabularyTerm} from '@gsrs-core/controlled-vocabulary';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {SubunitSelectorDialogComponent} from '@gsrs-core/substance-form/subunit-selector-dialog/subunit-selector-dialog.component';\nimport {Subscription} from 'rxjs';\nimport {MatDialog} from '@angular/material/dialog';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {AmountFormDialogComponent} from '@gsrs-core/substance-form/amount-form-dialog/amount-form-dialog.component';\n\n@Component({\n  selector: 'app-structural-modification-form',\n  templateUrl: './structural-modification-form.component.html',\n  styleUrls: ['./structural-modification-form.component.scss']\n})\nexport class StructuralModificationFormComponent implements OnInit, AfterViewInit {\n  private privateMod: StructuralModification;\n  @Output() modDeleted = new EventEmitter<StructuralModification>();\n  modExtentList: Array<VocabularyTerm> = [];\n  modLocationList: Array<VocabularyTerm> = [];\n  modTypeList: Array<VocabularyTerm> = [];\n  deleteTimer: any;\n  relatedSubstanceUuid: string;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n  substanceType: string;\n  nucleicAcidOptions: any = [\n    {value:'U', display:'U'},\n    {value:'T', display:'T'},\n    {value:'C', display:'C'},\n    {value:'G', display:'G'},\n    {value:'A', display:'A'}\n  ];\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.getVocabularies();\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n    this.updateDisplay();\n    this.getSubstanceType();\n  }\n\n  ngAfterViewInit(): void {\n\n  }\n\n  @Input()\n  set mod(mod: StructuralModification) {\n    this.privateMod = mod;\n    this.relatedSubstanceUuid = this.privateMod.molecularFragment && this.privateMod.molecularFragment.refuuid || '';\n  }\n\n  get mod(): StructuralModification {\n    return this.privateMod;\n  }\n\n  updateResidue(event) {\n    this.privateMod.residueModified = event;\n  }\n\n  updateOrigin(event): void {\n    if (event && event.value !== '') {\n      this.privateMod.residueModified = event.value;\n    }\n  }\n\n  update(tags: Array<string>): void {\n    this.privateMod.residueModified = tags.join(';');\n  }\n\n  getSubstanceType(): void {\n    const definitionSubscription = this.substanceFormService.definition.subscribe( definition => {\n      this.substanceType = definition.substanceClass;\n    });\n    definitionSubscription.unsubscribe();\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('STRUCTURAL_MODIFICATION_TYPE', 'LOCATION_TYPE', 'EXTENT_TYPE').subscribe(response => {\n      this.modTypeList = response['STRUCTURAL_MODIFICATION_TYPE'].list;\n      this.modLocationList = response['LOCATION_TYPE'].list;\n      this.modExtentList = response['EXTENT_TYPE'].list;\n    });\n  }\n\n  deleteMod(): void {\n    this.privateMod.$$deletedCode = this.utilsService.newUUID();\n      this.deleteTimer = setTimeout(() => {\n        this.modDeleted.emit(this.privateMod);\n      }, 2000);\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateMod.$$deletedCode;\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.mod.access = access;\n  }\n\n  relatedSubstanceUpdated(substance: SubstanceSummary): void {\n    if (substance !== null) {\n      const relatedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.mod.molecularFragment = relatedSubstance;\n      this.relatedSubstanceUuid = this.mod.molecularFragment.refuuid;\n    } else {\n      this.mod.molecularFragment = {};\n      this.relatedSubstanceUuid = '';\n    }\n  }\n\n\n\n  openDialog(): void {\n\n    const dialogRef = this.dialog.open(SubunitSelectorDialogComponent, {\n      data: {'card': 'other', 'link': this.mod.sites},\n      width: '1040px',\n      panelClass: 'subunit-dialog'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newLinks => {\n      this.overlayContainer.style.zIndex = null;\n      this.mod.sites = newLinks;\n      this.updateDisplay();\n      this.substanceFormService.emitStructuralModificationsUpdate();\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  openAmountDialog(): void {\n    if (!this.mod.extentAmount) {\n      this.mod.extentAmount = {};\n    }\n    const dialogRef = this.dialog.open(AmountFormDialogComponent, {\n      data: {'subsAmount': this.mod.extentAmount},\n      width: '1040px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newAmount => {\n      this.overlayContainer.style.zIndex = null;\n      this.mod.extentAmount = newAmount;\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  updateDisplay(): void {\n    this.siteDisplay = this.substanceFormService.siteString(this.mod.sites);\n  }\n\n  displayAmount(amt): string {\n    return this.utilsService.displayAmount(amt);\n  }\n\n  formatValue(v) {\n    if (v) {\n      if (typeof v === 'object') {\n        if (v.display) {\n          return v.display;\n        } else if (v.value) {\n          return v.value;\n        } else {\n          return null;\n        }\n      } else {\n        return v;\n      }\n    }\n    return null;\n  }\n\n  pipeToArray(string: string): Array<string> {\n    if (!string || string === '') {\n      return [];\n    } else {\n      return string.split(';');\n    }\n\n  }\n\n  inCV(vocab: Array<any>, property: string): boolean {\n    if (vocab) {\n      return vocab.some(r => property === r.value);\n    } else {\n      return true;\n    }\n\n  }\n}\n","<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addStructuralModification()\">\n    Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<div class = \"alternate-backgrounds\"  *ngFor=\"let mod of modifications; last as isLast; index as index\"  appScrollToTarget [id]=\"'substance-structural-modification-' + index\" >\n  <app-structural-modification-form [mod]=\"mod\" (modDeleted)=\"deleteStructuralModification($event)\"></app-structural-modification-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n\n\n<div class=\"flex-row\">\n    <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"addStructuralModification()\">\n      Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n    </button>\n\n</div>\n\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SubstanceCardBaseFilteredList, SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {PhysicalModification, StructuralModification} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\nimport { SubstanceFormStructuralModificationsService } from './substance-form-structural-modifications.service';\n\n@Component({\n  selector: 'app-substance-form-structural-modifications-card',\n  templateUrl: './substance-form-structural-modifications-card.component.html',\n  styleUrls: ['./substance-form-structural-modifications-card.component.scss']\n})\nexport class SubstanceFormStructuralModificationsCardComponent extends SubstanceCardBaseFilteredList<StructuralModification>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  modifications: Array<StructuralModification>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormStructuralModificationsService: SubstanceFormStructuralModificationsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form structural modifications';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Structural Modifications');\n  }\n\n  ngAfterViewInit() {\n    const structuralSubscription = this.substanceFormStructuralModificationsService\n      .substanceStructuralModifications\n      .subscribe(modifications => {\n\n      this.modifications = modifications;\n    });\n    this.subscriptions.push(structuralSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addStructuralModification();\n  }\n\n  addStructuralModification(): void {\n    this.substanceFormStructuralModificationsService.addSubstanceStructuralModification();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-structural-modification-0`, 'center');\n    });\n  }\n\n  deleteStructuralModification(modification: StructuralModification): void {\n    this.substanceFormStructuralModificationsService.deleteSubstanceStructuralModification(modification);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport {SubstanceFormStructuralModificationsCardComponent} from '@gsrs-core/substance-form/structural-modifications/substance-form-structural-modifications-card.component';\nimport { StructuralModificationFormComponent } from './structural-modification-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\nimport { MatSelectModule } from '@angular/material/select';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormStructuralModificationsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatSelectModule,\n    MatInputModule,\n    SubstanceSelectorModule\n  ],\n  declarations: [\n    SubstanceFormStructuralModificationsCardComponent,\n    StructuralModificationFormComponent\n  ]\n})\nexport class SubstanceFormStructuralModificationsModule { }\n"],"sourceRoot":"webpack:///","file":"4243.9faad3aa73a688c6.js"}