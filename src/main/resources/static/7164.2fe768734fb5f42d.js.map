{"version":3,"mappings":"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","names":["AmountFormDialogComponent","dialogRef","data","this","isNew","Object","keys","subsAmount","length","backup","JSON","parse","stringify","beforeClosed","subscribe","r","close","cancel","_","i0","MAT_DIALOG_DATA","selectors","ctx","ctx_r8","ctx_r11","AmountFormComponent","cvService","FormControl","Validators","getVocabularies","privateSubstanceAmount","set","amount","typeControl","setValue","type","valueChanges","i","value","averageControl","average","match","lowControl","low","highControl","high","lowLimitControl","lowLimit","highLimitControl","highLimit","unitsControl","units","nonNumericValueControl","nonNumericValue","access","substanceAmount","event","setTimeout","getDomainVocabulary","u","amountTypeList","response","AMOUNT_TYPE","list","amountUnitList","AMOUNT_UNIT","vocab","property","some","m"],"sources":["./src/app/core/substance-form/amount-form-dialog/amount-form-dialog.component.ts","./src/app/core/substance-form/amount-form-dialog/amount-form-dialog.component.html","./src/app/core/substance-form/amount-form/amount-form.component.html","./src/app/core/substance-form/amount-form/amount-form.component.ts"],"sourcesContent":["import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {SubstanceAmount} from '@gsrs-core/substance';\n\n@Component({\n  selector: 'app-amount-form-dialog',\n  templateUrl: './amount-form-dialog.component.html',\n  styleUrls: ['./amount-form-dialog.component.scss']\n})\nexport class AmountFormDialogComponent implements OnInit {\n  isNew: boolean;\n  subsAmount: SubstanceAmount;\n  backup: SubstanceAmount;\n\n  constructor(\n    public dialogRef: MatDialogRef<AmountFormDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.isNew = Object.keys(data.subsAmount).length < 2;\n  }\n\n  ngOnInit() {\n    this.subsAmount = this.data.subsAmount;\n    this.data = this.data.subsAmount;\n    this.backup = JSON.parse(JSON.stringify(this.data));\n    this.dialogRef.beforeClosed().subscribe(() => this.dialogRef.close(this.data));\n\n  }\n\n  save(): void {\n    this.dialogRef.close(this.data);\n  }\n\n  cancel(): void {\n    this.data.cancel = true;\n    this.data = this.backup;\n    this.dialogRef.close(this.data);\n  }\n\n}\n","<h1 mat-dialog-title>{{isNew ? 'Add' : 'Edit'}} Parameter</h1>\n<div mat-dialog-content>\n  <div>\n    <app-amount-form [substanceAmount]=\"subsAmount\" #amountForm>\n    </app-amount-form>\n    <div class=\"actions\">\n      <span class=\"middle-fill\"></span>\n      <button mat-button (click)=\"cancel()\">Cancel</button>\n      <button mat-button [disabled]=\"!amountForm\" (click)=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n</div>\n","<div class = \"access\">\r\n  <app-access-manager class=\"right\" (accessOut)=\"updateAccess($event)\" [access]=\"substanceAmount.access\">\r\n  </app-access-manager>\r\n</div>\r\n<form class=\"amount-form\" *ngIf=\"substanceAmount\">\r\n  <div class=\"form-row\">\r\n    <div class = \"other-container\">\r\n    <div>\r\n    <mat-form-field class=\"amount-type\">\r\n      <mat-label>Type *</mat-label>\r\n      <mat-select [formControl]=\"typeControl\">\r\n          <mat-option [value] = 'null' ><span class = 'deselect' >Clear selection</span></mat-option>\r\n        <mat-option *ngFor=\"let type of amountTypeList\" [value]=\"type.value\">\r\n          {{type.display}}\r\n        </mat-option>\r\n        <mat-option *ngIf = \"privateSubstanceAmount.type && !inCV(  amountTypeList, privateSubstanceAmount.type) && privateSubstanceAmount.type !== ''\"\r\n                    value = \"{{privateSubstanceAmount.type}}\">{{privateSubstanceAmount.type}} (not in CV)</mat-option>\r\n        <mat-option value = 'other' >Other (New Value)</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  <div *ngIf = \"privateSubstanceAmount.type === 'other'\" class = \"custom\">\r\n    <input matInput placeholder=\"Custom value\" (focusout) = \"updateType($event.target)\" name=\"custom\" />\r\n  </div>\r\n    </div>\r\n    <mat-form-field class=\"amount-average\">\r\n      <input type=\"number\" matInput placeholder=\"Average\" [formControl]=\"averageControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"low\">\r\n      <input type=\"number\" matInput placeholder=\"Low\" [formControl]=\"lowControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"high\">\r\n      <input type=\"number\" matInput placeholder=\"High\" [formControl]=\"highControl\" />\r\n    </mat-form-field>\r\n    </div>\r\n    <div class=\"form-row\">\r\n\r\n    <mat-form-field class=\"low-limit\">\r\n      <input type=\"number\" matInput placeholder=\"Low Limit\" [formControl]=\"lowLimitControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"high-limit\">\r\n      <input type=\"number\" matInput placeholder=\"High Limit\" [formControl]=\"highLimitControl\" />\r\n    </mat-form-field>\r\n    <div class = \"other-container\">\r\n    <div>\r\n      <mat-form-field class=\"amount-units\">\r\n        <mat-label>Units</mat-label>\r\n        <mat-select [formControl]=\"unitsControl\">\r\n            <mat-option [value] = 'null' ><span class = 'deselect' >Clear selection</span></mat-option>\r\n          <mat-option *ngFor=\"let unit of amountUnitList\" [value]=\"unit.value\">\r\n            {{unit.display}}\r\n          </mat-option>\r\n          <mat-option *ngIf = \"privateSubstanceAmount.units && !inCV(  amountUnitList, privateSubstanceAmount.units) && privateSubstanceAmount.units !== ''\"\r\n                      value = \"{{privateSubstanceAmount.units}}\">{{privateSubstanceAmount.units}} (not in CV)</mat-option>\r\n          <mat-option value = 'other' >Other (New Value)</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n    <div *ngIf = \"privateSubstanceAmount.units === 'other'\" class = \"custom\">\r\n      <input matInput placeholder=\"Custom value\" (focusout) = \"updateUnits($event.target)\" name=\"custom\" />\r\n    </div>\r\n    </div>\r\n    <mat-form-field class=\"non-numeric-value\">\r\n        <input matInput placeholder=\"Non-numeric Value\" [formControl]=\"nonNumericValueControl\" />\r\n      </mat-form-field>\r\n  </div>\r\n</form>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { SubstanceAmount } from '@gsrs-core/substance/substance.model';\r\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\r\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-amount-form',\r\n  templateUrl: './amount-form.component.html',\r\n  styleUrls: ['./amount-form.component.scss']\r\n})\r\nexport class AmountFormComponent implements OnInit {\r\n  private privateSubstanceAmount: SubstanceAmount;\r\n  amountTypeList: Array<VocabularyTerm> = [];\r\n  amountUnitList: Array<VocabularyTerm> = [];\r\n  typeControl = new FormControl('', Validators.required);\r\n  averageControl = new FormControl('');\r\n  lowControl = new FormControl('');\r\n  highControl = new FormControl('');\r\n  lowLimitControl = new FormControl('');\r\n  highLimitControl = new FormControl('');\r\n  unitsControl = new FormControl('');\r\n  nonNumericValueControl = new FormControl('');\r\n\r\n  constructor(\r\n    private cvService: ControlledVocabularyService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getVocabularies();\r\n  }\r\n\r\n  @Input()\r\n  set substanceAmount(amount: SubstanceAmount) {\r\n    if (amount != null) {\r\n      this.privateSubstanceAmount = amount;\r\n\r\n      this.typeControl.setValue(this.privateSubstanceAmount.type);\r\n      this.typeControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.type = value;\r\n      });\r\n      this.averageControl.setValue(this.privateSubstanceAmount.average);\r\n      this.averageControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.averageControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.averageControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.average = value;\r\n      });\r\n      this.lowControl.setValue(this.privateSubstanceAmount.low);\r\n      this.lowControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.lowControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.lowControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.low = value;\r\n      });\r\n      this.highControl.setValue(this.privateSubstanceAmount.high);\r\n      this.highControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.highControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.highControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.high = value;\r\n      });\r\n      this.lowLimitControl.setValue(this.privateSubstanceAmount.lowLimit);\r\n      this.lowLimitControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.lowLimitControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.lowLimitControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.lowLimit = value;\r\n      });\r\n      this.highLimitControl.setValue(this.privateSubstanceAmount.highLimit);\r\n      this.highLimitControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.highLimitControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.highLimitControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.highLimit = value;\r\n      });\r\n      this.unitsControl.setValue(this.privateSubstanceAmount.units);\r\n      this.unitsControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.units = value;\r\n      });\r\n      this.nonNumericValueControl.setValue(this.privateSubstanceAmount.nonNumericValue);\r\n      this.nonNumericValueControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.nonNumericValue = value;\r\n      });\r\n    }\r\n  }\r\n\r\n  get substanceAmount(): SubstanceAmount {\r\n    return this.privateSubstanceAmount;\r\n  }\r\n\r\n  updateAccess(access: Array<string>): void {\r\n    this.privateSubstanceAmount.access = access;\r\n    this.substanceAmount.access = access;\r\n  }\r\n\r\n  updateType(event: any) {\r\n    setTimeout(() => {\r\n      this.typeControl.setValue(event.value);\r\n    });\r\n    this.privateSubstanceAmount.type = event.value;\r\n  }\r\n\r\n  updateUnits(event: any) {\r\n    setTimeout(() => {\r\n      this.unitsControl.setValue(event.value);\r\n    });\r\n    this.privateSubstanceAmount.units = event.value;\r\n  }\r\n\r\n  getVocabularies(): void {\r\n    this.cvService.getDomainVocabulary('AMOUNT_TYPE', 'AMOUNT_UNIT').subscribe(response => {\r\n      this.amountTypeList = response['AMOUNT_TYPE'].list;\r\n      this.amountUnitList = response['AMOUNT_UNIT'].list;\r\n    });\r\n  }\r\n\r\n  inCV(vocab: Array<VocabularyTerm>, property: string) {\r\n    return vocab.some(r => property === r.value);\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///","file":"7164.2fe768734fb5f42d.js"}