{"version":3,"mappings":"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","names":["i0","$event","ctx_r6","AccessManagerComponent","cvService","element","C","this","EventEmitter","FormGroup","privateAccess","set","access","getVocabularies","getDomainVocabulary","subscribe","accessOptions","response","ACCESS_GROUP","list","i","createAccessFromGroup","crosscheckAccesses","arguments","group","forEach","accessOption","value","FormControl","accessFormGroup","tooltipMessage","length","controls","setValue","display","replace","event","checked","push","indexToRemove","indexOf","splice","accessOut","emit","Event","bubbles","cancelable","nativeElement","dispatchEvent","_","selectors","ctx","AuditInfoComponent","f","ctx_r3","MonomerFormComponent","dialog","utilsService","overlayContainerService","b","overlayContainer","getContainerElement","privateMonomer","monomer","relatedSubstanceUuid","monomerSubstance","refuuid","type","defining","$$deletedCode","newUUID","deleteTimer","setTimeout","t","monomerDeleted","clearTimeout","substance","refPname","_name","name","uuid","substanceClass","approvalID","amount","dialogRef","open","AmountFormDialogComponent","data","subsAmount","width","style","zIndex","dialogSubscription","afterClosed","newAmount","subscriptions","amt","displayAmount","v","p","ctx_r5","SubstanceFormMonomersCardComponent","substanceFormMonomersService","scrollToService","gaService","M","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","monomersSubscription","substanceMonomers","d","monomers","componentDestroyed","subscription","unsubscribe","addMonomer","addSubstanceMonomer","scrollToElement","deleteSubstanceMonomer","SubstanceCardBaseFilteredList","SubstanceFormMonomersModule","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceSelectorModule","MatCheckboxModule"],"sources":["./src/app/core/substance-form/access-manager/access-manager.component.html","./src/app/core/substance-form/access-manager/access-manager.component.ts","./src/app/core/substance-form/audit-info/audit-info.component.html","./src/app/core/substance-form/audit-info/audit-info.component.ts","./src/app/core/substance-form/monomers/monomer-form.component.html","./src/app/core/substance-form/monomers/monomer-form.component.ts","./src/app/core/substance-form/monomers/substance-form-monomers-card.component.html","./src/app/core/substance-form/monomers/substance-form-monomers-card.component.ts","./src/app/core/substance-form/monomers/substance-form-monomers.module.ts"],"sourcesContent":["<div class=\"menu-container\">\r\n  <button\r\n    mat-button\r\n    [matMenuTriggerFor]=\"accessMenu\"\r\n    [matTooltip]=\"tooltipMessage\"\r\n    (menuOpened)=\"menuOpened()\"\r\n    (menuClosed)=\"menuClosed()\">\r\n    <mat-icon svgIcon=\"lock\" *ngIf=\"access.length\"></mat-icon>\r\n    <mat-icon svgIcon=\"lock_open\" *ngIf=\"!access.length\"></mat-icon>\r\n    <span>{{label? label: \"Access\"}}</span>\r\n  </button>\r\n  <mat-menu #accessMenu=\"matMenu\" xPosition=\"before\">\r\n    <form [formGroup]=\"accessFormGroup\">\r\n      <div mat-menu-item *ngFor=\"let accessOption of accessOptions\" (click)=\"$event.stopPropagation()\">\r\n        <mat-checkbox (change)=\"updateAccess($event, accessOption)\" [formControlName]=\"accessOption.value\">\r\n          {{accessOption.display}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </form>\r\n  </mat-menu>\r\n</div>","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'app-access-manager',\n  templateUrl: './access-manager.component.html',\n  styleUrls: ['./access-manager.component.scss']\n})\nexport class AccessManagerComponent implements OnInit, AfterViewInit {\n  accessOptions: Array<VocabularyTerm>;\n  privateAccess: Array<string> = [];\n  @Output() accessOut = new EventEmitter<Array<string>>();\n  tooltipMessage: string;\n  @Input() label?: string;\n  accessFormGroup = new FormGroup({});\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {}\n\n  @Input()\n  set access(access: Array<string>) {\n    if (access != null) {\n      this.privateAccess = access;\n      this.getVocabularies();\n    } else {\n      this.privateAccess = [];\n      this.getVocabularies();\n    }\n  }\n\n  get access(): Array<string> {\n    return this.privateAccess;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('ACCESS_GROUP').subscribe(response => {\n      const accessOptions = response['ACCESS_GROUP'].list;\n      this.createAccessFromGroup(accessOptions);\n      this.accessOptions = accessOptions;\n      this.crosscheckAccesses();\n    });\n  }\n\n  private createAccessFromGroup(accessOptions: Array<VocabularyTerm> = []): void {\n    const group: any = {};\n    accessOptions.forEach(accessOption => {\n      group[accessOption.value] = new FormControl();\n    });\n    this.accessFormGroup = new FormGroup(group);\n  }\n\n  private crosscheckAccesses() {\n    this.tooltipMessage = 'Access is set to: ';\n\n    if (this.privateAccess.length > 0) {\n      this.privateAccess.forEach(accessOption => {\n        for (let i = 0; i < this.accessOptions.length; i++) {\n          if (accessOption === this.accessOptions[i].value) {\n            this.accessFormGroup.controls[accessOption].setValue(true);\n            this.tooltipMessage += (this.accessOptions[i].display + ', ');\n            break;\n          }\n        }\n      });\n      this.tooltipMessage = this.tooltipMessage.replace(/(, )$/, '');\n    } else {\n      this.tooltipMessage += 'public';\n    }\n  }\n\n  updateAccess(event: MatCheckboxChange, accessOption: VocabularyTerm): void {\n\n    if (this.privateAccess.length === 0) {\n      this.tooltipMessage = this.tooltipMessage.replace('public', '');\n    }\n\n    if (event.checked) {\n      this.privateAccess.push(accessOption.value);\n\n      if (this.privateAccess.length > 1) {\n        this.tooltipMessage += ', ';\n      }\n\n      this.tooltipMessage += (accessOption.display);\n\n    } else {\n\n      const indexToRemove = this.privateAccess.indexOf(accessOption.value);\n\n      if (indexToRemove > -1) {\n        this.privateAccess.splice(indexToRemove, 1);\n      }\n\n      this.tooltipMessage = this.tooltipMessage.replace(accessOption.display, '')\n        .replace(': , ', ': ')\n        .replace(', ,', ',')\n        .replace(/,$/, '')\n        .replace(/(, )$/, '');\n\n      if (this.privateAccess.length === 0) {\n        this.tooltipMessage += 'public';\n      }\n    }\n\n    this.accessOut.emit(this.privateAccess);\n  }\n\n  menuOpened(): void {\n    const event: Event = new Event('focusin', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  menuClosed(): void {\n    const event: Event = new Event('focusout', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n}\n","<div class = 'audit-container' *ngIf = \"source\">\n  <div class = \"name\" *ngIf = 'source.createdBy'><b class = 'static'>Created By:</b> {{ source.createdBy}} </div>\n  <div class = \"date\" *ngIf = 'source.created'><b class = 'static'>on</b> {{ source.created | date:'medium'}}</div>\n  <div class = \"spacer\" *ngIf = 'source.created && source.lastEdited'> <b>-</b> </div>\n  <div class = \"name\" *ngIf = 'source.lastEditedBy'><b class = 'static'>Last Edited By</b>: {{ source.lastEditedBy}} </div>\n  <div class = \"date\" *ngIf = 'source.lastEdited'><b class = 'static'>on</b> {{ source.lastEdited | date:'medium'}}</div>\n</div>\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-audit-info',\n  templateUrl: './audit-info.component.html',\n  styleUrls: ['./audit-info.component.scss']\n})\nexport class AuditInfoComponent implements OnInit {\n  @Input() source: any;\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n}\n","<div class=\"component-form-container form-row\">\n  <div *ngIf=\"monomer.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"delete-container\">\n    <button mat-icon-button matTooltip=\"Delete monomer\" (click)=\"deleteComponent()\">\n      <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n    </button>\n  </div>\n    <div class = \"related-substance\">\n      <div class=\"flex-column \">\n        <app-substance-selector (selectionUpdated)=\"componentUpdated($event)\"\n                                eventCategory=\"substanceRelationshipRelatedSub\" placeholder= \"Monomer Substance\" header=\"Monomer Substance\"\n                                [subuuid]=\"relatedSubstanceUuid\" [name] = \"privateMonomer.monomerSubstance? privateMonomer.monomerSubstance.name : ''\">\n        </app-substance-selector>\n        <span *ngIf = \"this.privateMonomer.monomerSubstance && this.privateMonomer.monomerSubstance.uuid\n                && !this.privateMonomer.monomerSubstance.refuuid \">\n          Error retrieving monomer, missing reference uuid for {{this.privateMonomer.monomerSubstance.name}}\n        </span>\n      </div>\n    </div>\n\n    <div class =\"type\">\n      <app-cv-input  domain = \"MONOMER_TYPE\" title = \"Monomer Type\" [model] = \"monomer.type\" (valueChange)=\"updateType($event)\"></app-cv-input>\n    </div>\n\n  <div class = 'amount' >\n  <div class = \"label padded amount-label\">\n    Amount\n  <button mat-icon-button matTooltip=\"add\" (click)=\"(openAmountDialog())\">\n    <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button>\n  </div>\n  <div *ngIf = \"privateMonomer.amount\" class = \"amount-display\">\n    {{displayAmount(privateMonomer.amount)}}\n  </div>\n</div>\n  <div class=\"checkbox-container column-checkbox\">\n    <mat-checkbox [checked] = \"privateMonomer.defining\" (change)=\"definingChange($event)\">Defining</mat-checkbox>\n  </div>\n\n</div>\n<div class = \"form-row\">\n    <app-audit-info [source] = \"privateMonomer\"></app-audit-info>\n</div>\n","import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Monomer, SubstanceRelated, SubstanceSummary} from '@gsrs-core/substance';\nimport {ControlledVocabularyService, VocabularyTerm} from '@gsrs-core/controlled-vocabulary';\nimport {Subscription} from 'rxjs';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {AmountFormDialogComponent} from '@gsrs-core/substance-form/amount-form-dialog/amount-form-dialog.component';\n\n@Component({\n  selector: 'app-monomer-form',\n  templateUrl: './monomer-form.component.html',\n  styleUrls: ['./monomer-form.component.scss']\n})\nexport class MonomerFormComponent implements OnInit, AfterViewInit {\n  privateMonomer: Monomer;\n  @Output() monomerDeleted = new EventEmitter<Monomer>();\n  deleteTimer: any;\n  relatedSubstanceUuid: string;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer\n  ) { }\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  @Input()\n  set monomer(monomer: Monomer) {\n    this.privateMonomer = monomer;\n    if (this.privateMonomer.monomerSubstance) {\n      this.relatedSubstanceUuid = this.privateMonomer.monomerSubstance.refuuid;\n    } else {\n      this.relatedSubstanceUuid = '';\n    }\n\n  }\n\n  get monomer(): Monomer {\n    return this.privateMonomer;\n  }\n\n  updateType(event: any): void {\n    this.privateMonomer.type = event;\n  }\n\n  definingChange(event: any): void {\n    this.privateMonomer.defining = event.checked;\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n\n  deleteComponent(): void {\n    this.privateMonomer.$$deletedCode = this.utilsService.newUUID();\n    if (!this.privateMonomer || !this.monomer\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.monomerDeleted.emit(this.privateMonomer);\n      }, 1000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateMonomer.$$deletedCode;\n  }\n\n  componentUpdated(substance: SubstanceSummary): void {\n\n    if (substance !== null) {\n      const relatedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.privateMonomer.monomerSubstance = relatedSubstance;\n      this.relatedSubstanceUuid = this.privateMonomer.monomerSubstance.refuuid;\n    } else {\n      this.privateMonomer.monomerSubstance = null;\n      this.relatedSubstanceUuid = null;\n    }\n\n\n  }\n\n  openAmountDialog(): void {\n    if (!this.privateMonomer.amount) {\n      this.privateMonomer.amount = {};\n    }\n    const dialogRef = this.dialog.open(AmountFormDialogComponent, {\n      data: {'subsAmount': this.privateMonomer.amount},\n      width: '1040px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newAmount => {\n      this.overlayContainer.style.zIndex = null;\n      this.privateMonomer.amount = newAmount;\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  displayAmount(amt): string {\n    return this.utilsService.displayAmount(amt);\n  }\n\n  formatValue(v) {\n    if (v) {\n      if (typeof v === 'object') {\n        if (v.display) {\n          return v.display;\n        } else if (v.value) {\n          return v.value;\n        } else {\n          return null;\n        }\n      } else {\n        return v;\n      }\n    }\n    return null;\n  }\n\n}\n","<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addCode()\">\n    Add Monomer <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<div class=\"monomer\" *ngFor=\"let monomer of monomers; last as isLast; index as index\" appScrollToTarget\n  [id]=\"'substance-monomer-' + index\">\n  <app-monomer-form [monomer]=\"monomer\" (monomerDeleted)=\"deleteCode($event)\"></app-monomer-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n\n<div class=\"flex-row\">\n    <span class = \"middle-fill\"></span>\n       <button mat-button (click)=\"addMonomer()\">\n        Add Monomer <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n  </div>\n","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { Monomer } from '@gsrs-core/substance/substance.model';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport { Subscription } from 'rxjs';\nimport { SubstanceFormMonomersService } from './substance-form-monomers.service';\n\n@Component({\n  selector: 'app-substance-form-monomers-card',\n  templateUrl: './substance-form-monomers-card.component.html',\n  styleUrls: ['./substance-form-monomers-card.component.scss']\n})\nexport class SubstanceFormMonomersCardComponent extends SubstanceCardBaseFilteredList<Monomer>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  monomers: Array<Monomer>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormMonomersService: SubstanceFormMonomersService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form monomers';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Monomers');\n  }\n\n  ngAfterViewInit() {\n    const monomersSubscription = this.substanceFormMonomersService.substanceMonomers.subscribe(monomers => {\n      this.monomers = monomers;\n    });\n    this.subscriptions.push(monomersSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addMonomer();\n  }\n\n  addMonomer(): void {\n    this.substanceFormMonomersService.addSubstanceMonomer();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-monomer-0`, 'center');\n    });\n  }\n\n  deleteMonomer(monomer: Monomer): void {\n    this.substanceFormMonomersService.deleteSubstanceMonomer(monomer);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormMonomersCardComponent } from './substance-form-monomers-card.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport { MonomerFormComponent } from './monomer-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormMonomersCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceSelectorModule,\n    MatCheckboxModule\n  ],\n  declarations: [\n    SubstanceFormMonomersCardComponent,\n    MonomerFormComponent\n  ]\n})\nexport class SubstanceFormMonomersModule { }\n"],"sourceRoot":"webpack:///","file":"8694.1f276a39dbdf63f1.js"}