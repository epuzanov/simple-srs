{"version":3,"mappings":"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","names":["i0","$event","ctx_r6","AccessManagerComponent","cvService","element","T","this","EventEmitter","FormGroup","privateAccess","set","access","getVocabularies","getDomainVocabulary","subscribe","accessOptions","response","ACCESS_GROUP","list","t","createAccessFromGroup","crosscheckAccesses","arguments","group","forEach","accessOption","value","FormControl","accessFormGroup","tooltipMessage","length","i","controls","setValue","display","replace","event","checked","push","indexToRemove","indexOf","splice","accessOut","emit","Event","bubbles","cancelable","nativeElement","dispatchEvent","O","selectors","ctx","ctx_r8","ctx_r11","AmountFormComponent","Validators","privateSubstanceAmount","amount","typeControl","type","valueChanges","p","averageControl","average","match","lowControl","low","highControl","high","lowLimitControl","lowLimit","highLimitControl","highLimit","unitsControl","units","nonNumericValueControl","nonNumericValue","substanceAmount","setTimeout","h","amountTypeList","AMOUNT_TYPE","amountUnitList","AMOUNT_UNIT","vocab","property","some","r","d","AuditInfoComponent","x","PhysicalParameterFormComponent","utilsService","privateParameter","parameter","parameterName","l","ctx_r2","ctx_r4","PhysicalParameterFormDialogComponent","dialogRef","subsParameter","isNew","Object","keys","close","MAT_DIALOG_DATA","ctx_r3","ctx_r35","ctx_r37","PhysicalModificationFormComponent","dialog","overlayContainerService","substanceFormService","privateMod","physicalModificationRole","invalid","present","parameters","param","overlayContainer","getContainerElement","mod","a","modRoleList","PHYSICAL_MODIFICATION_ROLE","$$deletedCode","newUUID","deleteTimer","modDeleted","emitOtherLinkUpdate","clearTimeout","open","data","width","style","zIndex","dialogSubscription","afterClosed","newParams","subscriptions","updateRequired","m","parameterCopyString","JSON","stringify","parse","newParameter","f","unshift","key","id","amt","displayAmount","ctx_r9","SubstanceFormPhysicalModificationsCardComponent","substanceFormPhysicalModificationsService","scrollToService","gaService","P","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","physicalSubscription","substancePhysicalModifications","modifications","componentDestroyed","subscription","unsubscribe","addStructuralModification","addSubstancePhysicalModification","scrollToElement","modification","deleteSubstancePhysicalModification","SubstanceCardBaseFilteredList","SubstanceFormPhysicalModificationsModule","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","MatListModule"],"sources":["./src/app/core/substance-form/access-manager/access-manager.component.html","./src/app/core/substance-form/access-manager/access-manager.component.ts","./src/app/core/substance-form/amount-form/amount-form.component.html","./src/app/core/substance-form/amount-form/amount-form.component.ts","./src/app/core/substance-form/audit-info/audit-info.component.html","./src/app/core/substance-form/audit-info/audit-info.component.ts","./src/app/core/substance-form/physical-parameter-form/physical-parameter-form.component.ts","./src/app/core/substance-form/physical-parameter-form/physical-parameter-form.component.html","./src/app/core/substance-form/physical-parameter-form-dialog/physical-parameter-form-dialog.component.html","./src/app/core/substance-form/physical-parameter-form-dialog/physical-parameter-form-dialog.component.ts","./src/app/core/substance-form/physical-modifications/physical-modification-form.component.html","./src/app/core/substance-form/physical-modifications/physical-modification-form.component.ts","./src/app/core/substance-form/physical-modifications/substance-form-physical-modifications-card.component.html","./src/app/core/substance-form/physical-modifications/substance-form-physical-modifications-card.component.ts","./src/app/core/substance-form/physical-modifications/substance-form-physical-modifications.module.ts"],"sourcesContent":["<div class=\"menu-container\">\r\n  <button\r\n    mat-button\r\n    [matMenuTriggerFor]=\"accessMenu\"\r\n    [matTooltip]=\"tooltipMessage\"\r\n    (menuOpened)=\"menuOpened()\"\r\n    (menuClosed)=\"menuClosed()\">\r\n    <mat-icon svgIcon=\"lock\" *ngIf=\"access.length\"></mat-icon>\r\n    <mat-icon svgIcon=\"lock_open\" *ngIf=\"!access.length\"></mat-icon>\r\n    <span>{{label? label: \"Access\"}}</span>\r\n  </button>\r\n  <mat-menu #accessMenu=\"matMenu\" xPosition=\"before\">\r\n    <form [formGroup]=\"accessFormGroup\">\r\n      <div mat-menu-item *ngFor=\"let accessOption of accessOptions\" (click)=\"$event.stopPropagation()\">\r\n        <mat-checkbox (change)=\"updateAccess($event, accessOption)\" [formControlName]=\"accessOption.value\">\r\n          {{accessOption.display}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </form>\r\n  </mat-menu>\r\n</div>","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'app-access-manager',\n  templateUrl: './access-manager.component.html',\n  styleUrls: ['./access-manager.component.scss']\n})\nexport class AccessManagerComponent implements OnInit, AfterViewInit {\n  accessOptions: Array<VocabularyTerm>;\n  privateAccess: Array<string> = [];\n  @Output() accessOut = new EventEmitter<Array<string>>();\n  tooltipMessage: string;\n  @Input() label?: string;\n  accessFormGroup = new FormGroup({});\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {}\n\n  @Input()\n  set access(access: Array<string>) {\n    if (access != null) {\n      this.privateAccess = access;\n      this.getVocabularies();\n    } else {\n      this.privateAccess = [];\n      this.getVocabularies();\n    }\n  }\n\n  get access(): Array<string> {\n    return this.privateAccess;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('ACCESS_GROUP').subscribe(response => {\n      const accessOptions = response['ACCESS_GROUP'].list;\n      this.createAccessFromGroup(accessOptions);\n      this.accessOptions = accessOptions;\n      this.crosscheckAccesses();\n    });\n  }\n\n  private createAccessFromGroup(accessOptions: Array<VocabularyTerm> = []): void {\n    const group: any = {};\n    accessOptions.forEach(accessOption => {\n      group[accessOption.value] = new FormControl();\n    });\n    this.accessFormGroup = new FormGroup(group);\n  }\n\n  private crosscheckAccesses() {\n    this.tooltipMessage = 'Access is set to: ';\n\n    if (this.privateAccess.length > 0) {\n      this.privateAccess.forEach(accessOption => {\n        for (let i = 0; i < this.accessOptions.length; i++) {\n          if (accessOption === this.accessOptions[i].value) {\n            this.accessFormGroup.controls[accessOption].setValue(true);\n            this.tooltipMessage += (this.accessOptions[i].display + ', ');\n            break;\n          }\n        }\n      });\n      this.tooltipMessage = this.tooltipMessage.replace(/(, )$/, '');\n    } else {\n      this.tooltipMessage += 'public';\n    }\n  }\n\n  updateAccess(event: MatCheckboxChange, accessOption: VocabularyTerm): void {\n\n    if (this.privateAccess.length === 0) {\n      this.tooltipMessage = this.tooltipMessage.replace('public', '');\n    }\n\n    if (event.checked) {\n      this.privateAccess.push(accessOption.value);\n\n      if (this.privateAccess.length > 1) {\n        this.tooltipMessage += ', ';\n      }\n\n      this.tooltipMessage += (accessOption.display);\n\n    } else {\n\n      const indexToRemove = this.privateAccess.indexOf(accessOption.value);\n\n      if (indexToRemove > -1) {\n        this.privateAccess.splice(indexToRemove, 1);\n      }\n\n      this.tooltipMessage = this.tooltipMessage.replace(accessOption.display, '')\n        .replace(': , ', ': ')\n        .replace(', ,', ',')\n        .replace(/,$/, '')\n        .replace(/(, )$/, '');\n\n      if (this.privateAccess.length === 0) {\n        this.tooltipMessage += 'public';\n      }\n    }\n\n    this.accessOut.emit(this.privateAccess);\n  }\n\n  menuOpened(): void {\n    const event: Event = new Event('focusin', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  menuClosed(): void {\n    const event: Event = new Event('focusout', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n}\n","<div class = \"access\">\r\n  <app-access-manager class=\"right\" (accessOut)=\"updateAccess($event)\" [access]=\"substanceAmount.access\">\r\n  </app-access-manager>\r\n</div>\r\n<form class=\"amount-form\" *ngIf=\"substanceAmount\">\r\n  <div class=\"form-row\">\r\n    <div class = \"other-container\">\r\n    <div>\r\n    <mat-form-field class=\"amount-type\">\r\n      <mat-label>Type *</mat-label>\r\n      <mat-select [formControl]=\"typeControl\">\r\n          <mat-option [value] = 'null' ><span class = 'deselect' >Clear selection</span></mat-option>\r\n        <mat-option *ngFor=\"let type of amountTypeList\" [value]=\"type.value\">\r\n          {{type.display}}\r\n        </mat-option>\r\n        <mat-option *ngIf = \"privateSubstanceAmount.type && !inCV(  amountTypeList, privateSubstanceAmount.type) && privateSubstanceAmount.type !== ''\"\r\n                    value = \"{{privateSubstanceAmount.type}}\">{{privateSubstanceAmount.type}} (not in CV)</mat-option>\r\n        <mat-option value = 'other' >Other (New Value)</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  <div *ngIf = \"privateSubstanceAmount.type === 'other'\" class = \"custom\">\r\n    <input matInput placeholder=\"Custom value\" (focusout) = \"updateType($event.target)\" name=\"custom\" />\r\n  </div>\r\n    </div>\r\n    <mat-form-field class=\"amount-average\">\r\n      <input type=\"number\" matInput placeholder=\"Average\" [formControl]=\"averageControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"low\">\r\n      <input type=\"number\" matInput placeholder=\"Low\" [formControl]=\"lowControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"high\">\r\n      <input type=\"number\" matInput placeholder=\"High\" [formControl]=\"highControl\" />\r\n    </mat-form-field>\r\n    </div>\r\n    <div class=\"form-row\">\r\n\r\n    <mat-form-field class=\"low-limit\">\r\n      <input type=\"number\" matInput placeholder=\"Low Limit\" [formControl]=\"lowLimitControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"high-limit\">\r\n      <input type=\"number\" matInput placeholder=\"High Limit\" [formControl]=\"highLimitControl\" />\r\n    </mat-form-field>\r\n    <div class = \"other-container\">\r\n    <div>\r\n      <mat-form-field class=\"amount-units\">\r\n        <mat-label>Units</mat-label>\r\n        <mat-select [formControl]=\"unitsControl\">\r\n            <mat-option [value] = 'null' ><span class = 'deselect' >Clear selection</span></mat-option>\r\n          <mat-option *ngFor=\"let unit of amountUnitList\" [value]=\"unit.value\">\r\n            {{unit.display}}\r\n          </mat-option>\r\n          <mat-option *ngIf = \"privateSubstanceAmount.units && !inCV(  amountUnitList, privateSubstanceAmount.units) && privateSubstanceAmount.units !== ''\"\r\n                      value = \"{{privateSubstanceAmount.units}}\">{{privateSubstanceAmount.units}} (not in CV)</mat-option>\r\n          <mat-option value = 'other' >Other (New Value)</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n    <div *ngIf = \"privateSubstanceAmount.units === 'other'\" class = \"custom\">\r\n      <input matInput placeholder=\"Custom value\" (focusout) = \"updateUnits($event.target)\" name=\"custom\" />\r\n    </div>\r\n    </div>\r\n    <mat-form-field class=\"non-numeric-value\">\r\n        <input matInput placeholder=\"Non-numeric Value\" [formControl]=\"nonNumericValueControl\" />\r\n      </mat-form-field>\r\n  </div>\r\n</form>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { SubstanceAmount } from '@gsrs-core/substance/substance.model';\r\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\r\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-amount-form',\r\n  templateUrl: './amount-form.component.html',\r\n  styleUrls: ['./amount-form.component.scss']\r\n})\r\nexport class AmountFormComponent implements OnInit {\r\n  private privateSubstanceAmount: SubstanceAmount;\r\n  amountTypeList: Array<VocabularyTerm> = [];\r\n  amountUnitList: Array<VocabularyTerm> = [];\r\n  typeControl = new FormControl('', Validators.required);\r\n  averageControl = new FormControl('');\r\n  lowControl = new FormControl('');\r\n  highControl = new FormControl('');\r\n  lowLimitControl = new FormControl('');\r\n  highLimitControl = new FormControl('');\r\n  unitsControl = new FormControl('');\r\n  nonNumericValueControl = new FormControl('');\r\n\r\n  constructor(\r\n    private cvService: ControlledVocabularyService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getVocabularies();\r\n  }\r\n\r\n  @Input()\r\n  set substanceAmount(amount: SubstanceAmount) {\r\n    if (amount != null) {\r\n      this.privateSubstanceAmount = amount;\r\n\r\n      this.typeControl.setValue(this.privateSubstanceAmount.type);\r\n      this.typeControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.type = value;\r\n      });\r\n      this.averageControl.setValue(this.privateSubstanceAmount.average);\r\n      this.averageControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.averageControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.averageControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.average = value;\r\n      });\r\n      this.lowControl.setValue(this.privateSubstanceAmount.low);\r\n      this.lowControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.lowControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.lowControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.low = value;\r\n      });\r\n      this.highControl.setValue(this.privateSubstanceAmount.high);\r\n      this.highControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.highControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.highControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.high = value;\r\n      });\r\n      this.lowLimitControl.setValue(this.privateSubstanceAmount.lowLimit);\r\n      this.lowLimitControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.lowLimitControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.lowLimitControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.lowLimit = value;\r\n      });\r\n      this.highLimitControl.setValue(this.privateSubstanceAmount.highLimit);\r\n      this.highLimitControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.highLimitControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.highLimitControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.highLimit = value;\r\n      });\r\n      this.unitsControl.setValue(this.privateSubstanceAmount.units);\r\n      this.unitsControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.units = value;\r\n      });\r\n      this.nonNumericValueControl.setValue(this.privateSubstanceAmount.nonNumericValue);\r\n      this.nonNumericValueControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.nonNumericValue = value;\r\n      });\r\n    }\r\n  }\r\n\r\n  get substanceAmount(): SubstanceAmount {\r\n    return this.privateSubstanceAmount;\r\n  }\r\n\r\n  updateAccess(access: Array<string>): void {\r\n    this.privateSubstanceAmount.access = access;\r\n    this.substanceAmount.access = access;\r\n  }\r\n\r\n  updateType(event: any) {\r\n    setTimeout(() => {\r\n      this.typeControl.setValue(event.value);\r\n    });\r\n    this.privateSubstanceAmount.type = event.value;\r\n  }\r\n\r\n  updateUnits(event: any) {\r\n    setTimeout(() => {\r\n      this.unitsControl.setValue(event.value);\r\n    });\r\n    this.privateSubstanceAmount.units = event.value;\r\n  }\r\n\r\n  getVocabularies(): void {\r\n    this.cvService.getDomainVocabulary('AMOUNT_TYPE', 'AMOUNT_UNIT').subscribe(response => {\r\n      this.amountTypeList = response['AMOUNT_TYPE'].list;\r\n      this.amountUnitList = response['AMOUNT_UNIT'].list;\r\n    });\r\n  }\r\n\r\n  inCV(vocab: Array<VocabularyTerm>, property: string) {\r\n    return vocab.some(r => property === r.value);\r\n  }\r\n\r\n}\r\n","<div class = 'audit-container' *ngIf = \"source\">\n  <div class = \"name\" *ngIf = 'source.createdBy'><b class = 'static'>Created By:</b> {{ source.createdBy}} </div>\n  <div class = \"date\" *ngIf = 'source.created'><b class = 'static'>on</b> {{ source.created | date:'medium'}}</div>\n  <div class = \"spacer\" *ngIf = 'source.created && source.lastEdited'> <b>-</b> </div>\n  <div class = \"name\" *ngIf = 'source.lastEditedBy'><b class = 'static'>Last Edited By</b>: {{ source.lastEditedBy}} </div>\n  <div class = \"date\" *ngIf = 'source.lastEdited'><b class = 'static'>on</b> {{ source.lastEdited | date:'medium'}}</div>\n</div>\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-audit-info',\n  templateUrl: './audit-info.component.html',\n  styleUrls: ['./audit-info.component.scss']\n})\nexport class AuditInfoComponent implements OnInit {\n  @Input() source: any;\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {PhysicalModificationParameter, SubstanceAmount, SubstanceParameter} from '@gsrs-core/substance';\nimport {UtilsService} from '@gsrs-core/utils';\n\n@Component({\n  selector: 'app-physical-parameter-form',\n  templateUrl: './physical-parameter-form.component.html',\n  styleUrls: ['./physical-parameter-form.component.scss']\n})\nexport class PhysicalParameterFormComponent implements OnInit {\n  private privateParameter: PhysicalModificationParameter;\n  constructor(\n    private utilsService: UtilsService) { }\n\n  ngOnInit() {\n  }\n\n  @Input()\n  set parameter(parameter: PhysicalModificationParameter) {\n    this.privateParameter = parameter;\n    if ( !this.privateParameter.amount) {\n      this.privateParameter.amount = {};\n    }\n  }\n\n  get parameter(): PhysicalModificationParameter {\n    return this.privateParameter;\n  }\n\n  get isValid(): boolean {\n    return (this.privateParameter.parameterName != null && this.privateParameter.parameterName !== '');\n  }\n}\n","<div class=\"parameter-form-container\">\n  <div class=\"form-row\">\n    <mat-form-field class=\"name\">\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"parameter.parameterName\" required name=\"name\" />\n    </mat-form-field>\n  </div>\n  <div class=\"amount-form-container\">\n    <div class=\"amount-title\">Amount</div>\n    <app-amount-form [substanceAmount]=\"parameter.amount\"></app-amount-form>\n  </div>\n</div>\n","<h1 mat-dialog-title>{{isNew ? 'Add' : 'Edit'}} Parameter</h1>\n<div mat-dialog-content>\n  <div *ngIf=\"subsParameter\">\n    <app-physical-parameter-form [parameter]=\"subsParameter\" #parameterForm>\n    </app-physical-parameter-form>\n    <div class=\"actions\">\n      <span class=\"middle-fill\"></span>\n      <button mat-button (click)=\"cancel()\">Cancel</button>\n      <button mat-button [disabled]=\"!parameterForm || !parameterForm.isValid\" (click)=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n</div>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {PhysicalModificationParameter, SubstanceParameter} from '@gsrs-core/substance';\n\n@Component({\n  selector: 'app-physical-parameter-form-dialog',\n  templateUrl: './physical-parameter-form-dialog.component.html',\n  styleUrls: ['./physical-parameter-form-dialog.component.scss']\n})\nexport class PhysicalParameterFormDialogComponent implements OnInit {\n  isNew: boolean;\n\n  constructor(\n    public dialogRef: MatDialogRef<PhysicalParameterFormDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public subsParameter: PhysicalModificationParameter\n  ) {\n    this.isNew = Object.keys(subsParameter).length < 1;\n  }\n\n  ngOnInit() {\n  }\n\n  save(): void {\n    this.dialogRef.close(this.subsParameter);\n  }\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n\n}\n","<div class=\"physical-form-container\">\n  <div *ngIf=\"mod.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"delete-container\">\n      <button mat-icon-button matTooltip=\"Delete name\" (click)=\"deleteMod()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n    <app-cv-input domain = \"PHYSICAL_MODIFICATION_ROLE\" class = \"type\" title = \"Modification Role\" (valueChange) = \"updateRole($event)\" [model] = \"mod.physicalModificationRole\"></app-cv-input>\n    <div class = 'amount'>\n      <div class = \"label amt-label\">\n        Parameters\n      </div>\n      <button mat-icon-button matTooltip=\"add / edit parameters\" (click)=\"(openPropertyParameter())\">\n        <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n      <div class = 'param-display'>\n          <mat-list >\n              <div  mat-list-item *ngFor=\"let parameter of mod.parameters; index as index\" >\n                 <button mat-icon-button (click) = \"deleteParameter(index)\"  class = \"parameter-delete-icon\">\n                   <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n                  </button>\n  \n              <span>{{parameter.parameterName}}</span>\n              <span *ngIf=\"parameter.amount != null\">\n                <span>\n                  &nbsp;\n                  {{parameter.amount.type}}\n                </span>\n                <span *ngIf=\"parameter.amount.average != null && parameter.amount.average != ''\">\n                  &nbsp;-\n                  &nbsp;\n                  {{parameter.amount.average}}\n                  &nbsp;\n                  {{parameter.amount.units}}\n                </span>\n                <span *ngIf=\"(parameter.amount.low != null && parameter.amount.low != '')\n                    || (parameter.amount.high != null && parameter.amount.high != '')\">\n                  <span *ngIf=\"parameter.amount.average == null || parameter.amount.average == ''\">\n                    &nbsp;\n                    -\n                  </span>\n                  &nbsp;\n                  [\n                  <span *ngIf=\"parameter.amount.high == null || parameter.amount.high == ''\">\n                    >\n                  </span>\n                  <span *ngIf=\"parameter.amount.low == null || parameter.amount.low == ''\">\n                    <\n                  </span>\n                  <span *ngIf=\"parameter.amount.low != null && parameter.amount.low != ''\">\n                    {{parameter.amount.low}}\n                  </span>\n                  <span *ngIf=\"parameter.amount.low != null && parameter.amount.low != ''\n                      && parameter.amount.high != null && parameter.amount.high != ''\">\n                    &nbsp;to&nbsp;\n                  </span>\n                  <span *ngIf=\"parameter.amount.high != null && parameter.amount.high != ''\">\n                    {{parameter.amount.high}}\n                  </span>\n                  ]\n                  <span *ngIf=\"parameter.amount.average == null || parameter.amount.average == ''\">\n                    &nbsp;\n                    {{parameter.amount.units}}\n                    &nbsp;\n                    (average)\n                  </span>\n                </span>\n                <span *ngIf=\"parameter.amount.average != null && parameter.amount.average != ''\">\n                  &nbsp;\n                  (average)\n                </span>\n                <span *ngIf=\"(parameter.amount.lowLimit != null && parameter.amount.lowLimit != '')\n                        || (parameter.amount.highLimit != null && parameter.amount.highLimit != '')\">\n                  &nbsp;-\n                  &nbsp;\n                  [\n                  <span *ngIf=\"parameter.amount.highLimit == null || parameter.amount.highLimit == ''\">\n                    >\n                  </span>\n                  <span *ngIf=\"parameter.amount.lowLimit == null || parameter.amount.lowLimit == ''\">\n                    <\n                  </span>\n                  <span *ngIf=\"parameter.amount.lowLimit != null && parameter.amount.lowLimit != ''\">\n                    {{parameter.amount.lowLimit}}\n                  </span>\n                  <span *ngIf=\"parameter.amount.lowLimit != null && parameter.amount.lowLimit != ''\n                          && parameter.amount.highLimit != null && parameter.amount.highLimit != ''\">\n                    &nbsp;to&nbsp;\n                  </span>\n                  <span *ngIf=\"parameter.amount.highLimit != null && parameter.amount.highLimit != ''\">\n                    {{parameter.amount.highLimit}}\n                  </span>\n                  ]\n                  &nbsp;(limits)\n                </span>\n                <span *ngIf=\"parameter.amount.nonNumericValue\">\n                  &nbsp;-&nbsp;\n                  {{parameter.amount.nonNumericValue}}\n                </span>\n              </span>\n              <button mat-icon-button (click)=\"openPropertyParameter(parameter)\"   class = \"parameter-icon\">\n                  <mat-icon svgIcon=\"edit\"></mat-icon>\n              </button>\n          </div>\n          </mat-list>\n      </div>\n\n    </div>\n    <div>\n      <mat-form-field class=\"group\">\n        <input matInput placeholder=\"Group\" [(ngModel)]=\"mod.modificationGroup\" required name=\"group\" />\n      </mat-form-field>\n    </div>\n    <div class = \"access\">\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"mod.access\">\n      </app-access-manager>\n    </div>\n\n\n  </div>\n  <div class = \"form-row\">\n    <app-audit-info [source] = \"mod\"></app-audit-info>\n  </div>\n  <div class = \"form-row invalid-note\" *ngIf = \"invalid\">\n    <div>*physical modifications require a modification role or parameter\n  </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output, HostListener} from '@angular/core';\nimport {PhysicalModification, SubstanceAmount, SubstanceRelated, SubstanceSummary} from '@gsrs-core/substance';\nimport {ControlledVocabularyService, VocabularyTerm} from '@gsrs-core/controlled-vocabulary';\nimport {Subscription} from 'rxjs';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {AmountFormDialogComponent} from '@gsrs-core/substance-form/amount-form-dialog/amount-form-dialog.component';\nimport {PhysicalParameterFormDialogComponent} from '@gsrs-core/substance-form/physical-parameter-form-dialog/physical-parameter-form-dialog.component';\n\n@Component({\n  selector: 'app-physical-modification-form',\n  templateUrl: './physical-modification-form.component.html',\n  styleUrls: ['./physical-modification-form.component.scss']\n})\nexport class PhysicalModificationFormComponent implements OnInit {\n  private privateMod: PhysicalModification;\n  @Output() modDeleted = new EventEmitter<PhysicalModification>();\n  modTypeList: Array<VocabularyTerm> = [];\n  modRoleList: Array<VocabularyTerm> = [];\n  modProcessList: Array<VocabularyTerm> = [];\n  deleteTimer: any;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n  invalid = false;\n\n  @HostListener('focusout') onFocusout() {\n    if (!this.privateMod.physicalModificationRole) {\n      let present = false;\n      if (this.privateMod.parameters){\n      this.privateMod.parameters.forEach (param => {\n        if (param.amount.type) {\n          present = true;\n        }\n      });\n      if (!present) {\n        this.invalid = true;\n      } else {\n        this.invalid = false;\n      }\n    } else {\n      this.invalid = true;\n    }\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  @HostListener('focusin') onFocusin() {\n    if (!this.privateMod.physicalModificationRole) {\n      let present = false;\n      if (this.privateMod.parameters) {\n      this.privateMod.parameters.forEach (param => {\n        if (param.amount.type) {\n          present = true;\n        }\n      });\n      if (!present) {\n        this.invalid = true;\n      } else {\n        this.invalid = false;\n      }\n    } else {\n      this.invalid = true;\n    }\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n  ngOnInit() {\n    this.getVocabularies();\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  @Input()\n  set mod(mod: PhysicalModification) {\n    this.privateMod = mod;\n\n  }\n\n  get mod(): PhysicalModification {\n    return this.privateMod;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('PHYSICAL_MODIFICATION_ROLE').subscribe(response => {\n      this.modRoleList = response['PHYSICAL_MODIFICATION_ROLE'].list;\n    });\n  }\n\n  deleteMod(): void {\n    this.privateMod.$$deletedCode = this.utilsService.newUUID();\n    if (!this.privateMod\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.modDeleted.emit(this.mod);\n        this.substanceFormService.emitOtherLinkUpdate();\n      }, 1000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateMod.$$deletedCode;\n  }\n\n  updateRequired(): void {\n    if (!this.privateMod.physicalModificationRole) {\n      let present = false;\n      if (this.privateMod.parameters){\n      this.privateMod.parameters.forEach (param => {\n        if (param.amount.type) {\n          present = true;\n        }\n      });\n      if (!present) {\n        this.invalid = true;\n      } else {\n        this.invalid = false;\n      }\n    } else {\n      this.invalid = true;\n    }\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.mod.access = access;\n  }\n\n  openParameterDialog(): void {\n    if (!this.mod.parameters) {\n      this.mod.parameters = [];\n    }\n    const dialogRef = this.dialog.open(PhysicalParameterFormDialogComponent, {\n      data: this.mod.parameters,\n      width: '1080px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newParams => {\n      this.overlayContainer.style.zIndex = null;\n      if (newParams) {\n        this.mod.parameters = newParams;\n      }\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  updateRole(event: any) {\n    this.mod.physicalModificationRole = event;\n    this.updateRequired();\n  }\n\n  openPropertyParameter(parameter?: any): void {\n\n    let isNew: boolean;\n    if (parameter == null) {\n      isNew = true;\n      parameter = { amount: {} };\n    }\n    const parameterCopyString = JSON.stringify(parameter);\n\n\n    const dialogRef = this.dialog.open(PhysicalParameterFormDialogComponent, {\n      data: JSON.parse(parameterCopyString),\n      width: '1200px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    dialogRef.afterClosed().subscribe(newParameter => {\n      this.overlayContainer.style.zIndex = null;\n      if (newParameter != null) {\n        if (this.mod.parameters == null) {\n          this.mod.parameters = [];\n        }\n        if (isNew) {\n          this.mod.parameters.unshift(newParameter);\n        } else {\n          Object.keys(newParameter).forEach(key => {\n            parameter[key] = newParameter[key];\n          });\n        }\n        this.updateRequired();\n      }\n    });\n  }\n\n  deleteParameter(id: number): void {\n    this.mod.parameters.splice(id, 1);\n  }\n\n  displayAmount(amt: SubstanceAmount): string {\n      return this.utilsService.displayAmount(amt);\n  }\n\n\n}\n","<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addStructuralModification()\">\n    Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n  <div  class = \"alternate-backgrounds\" *ngFor=\"let mod of modifications; last as isLast; index as index\"  appScrollToTarget [id]=\"'substance-physical-modification-' + index\" >\n    <app-physical-modification-form [mod]=\"mod\" (modDeleted)=\"deletePhysicalModification($event)\" ></app-physical-modification-form>\n    <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n  </div>\n\n  <div class=\"flex-row\" *ngIf = \"modifications && modifications.length > 0\">\n      <span class = \"middle-fill\"></span>\n         <button mat-button (click)=\"addStructuralModification()\" *ngIf = \"modifications && modifications.length > 0\">\n          Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n        </button>\n</div>","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SubstanceCardBaseFilteredList, SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {PhysicalModification} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\nimport { SubstanceFormPhysicalModificationsService } from './substance-form-physical-modifications.service';\n\n@Component({\n  selector: 'app-substance-form-physical-modifications-card',\n  templateUrl: './substance-form-physical-modifications-card.component.html',\n  styleUrls: ['./substance-form-physical-modifications-card.component.scss']\n})\nexport class SubstanceFormPhysicalModificationsCardComponent extends SubstanceCardBaseFilteredList<PhysicalModification>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  modifications: Array<PhysicalModification>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormPhysicalModificationsService: SubstanceFormPhysicalModificationsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form agent modifications';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Physical Modifications');\n  }\n\n  ngAfterViewInit() {\n    const physicalSubscription = this.substanceFormPhysicalModificationsService.substancePhysicalModifications.subscribe(modifications => {\n      this.modifications = modifications;\n    });\n    this.subscriptions.push(physicalSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addStructuralModification();\n  }\n\n  addStructuralModification(): void {\n    this.substanceFormPhysicalModificationsService.addSubstancePhysicalModification();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-physical-modification-0`, 'center');\n    });\n  }\n\n  deletePhysicalModification(modification: PhysicalModification): void {\n    this.substanceFormPhysicalModificationsService.deleteSubstancePhysicalModification(modification);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport {SubstanceFormPhysicalModificationsCardComponent} from '@gsrs-core/substance-form/physical-modifications/substance-form-physical-modifications-card.component';\nimport { PhysicalModificationFormComponent } from './physical-modification-form.component';\nimport { MatListModule } from '@angular/material/list';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormPhysicalModificationsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    MatListModule\n  ],\n  declarations: [\n    SubstanceFormPhysicalModificationsCardComponent,\n    PhysicalModificationFormComponent\n  ]\n})\nexport class SubstanceFormPhysicalModificationsModule { }\n"],"sourceRoot":"webpack:///","file":"221.657926faf05fc624.js"}