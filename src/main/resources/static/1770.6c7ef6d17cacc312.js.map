{"version":3,"mappings":"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","names":["i0","$event","ctx_r6","AccessManagerComponent","cvService","element","N","this","EventEmitter","FormGroup","privateAccess","set","access","getVocabularies","getDomainVocabulary","subscribe","accessOptions","response","ACCESS_GROUP","list","a","createAccessFromGroup","crosscheckAccesses","arguments","group","forEach","accessOption","value","FormControl","accessFormGroup","tooltipMessage","length","i","controls","setValue","display","replace","event","checked","push","indexToRemove","indexOf","splice","accessOut","emit","Event","bubbles","cancelable","nativeElement","dispatchEvent","u","selectors","ctx","AuditInfoComponent","M","ctx_r5","ctx_r15","ctx_r20","ctx_r24","ctx_r30","ctx_r33","ApplyReferenceComponent","substanceFormReferencesService","domainKeys","subscriptions","subscription","unsubscribe","open","domainsWithReferences","pipe","take","t","setChecked","uuid","privateSubReferenceUuid","applyReference","definition","domain","key","domains","emitReferencesUpdate","references","domainKey","_","removeReference","obj","path","defaultValue","String","prototype","split","call","filter","Boolean","reduce","c","Object","hasOwnProperty","y","ctx_r17","PreviousReferencesComponent","substanceService","authService","user","getUser","getSubstanceReferences","O","refCount","total","getPreviousReferences","count","content","lastEditedBy","docType","citation","oldReferences","loading","ref","selectedReference","h","PreviousReferencesDialogComponent","dialogRef","close","x","ctx_r3","ctx_r13","ctx_r18","ctx_r29","ReferenceFormComponent","utilsService","dialog","overlayContainerService","substanceFormService","overlayContainer","getContainerElement","reference","tags","$$deletedCode","newUUID","uploadedFile","deleteTimer","setTimeout","o","referenceDeleted","clearTimeout","file","error","uploadFile","R","data","width","style","zIndex","dialogSubscription","afterClosed","fillReference","showPrev","deprecated","publicDomain","url","id","bypassUpdateCheck","window","ctx_r2","ctx_r7","RefernceFormDialogComponent","beforeClosed","lastEdited","created","createdBy","_self","P","MAT_DIALOG_DATA"],"sources":["./src/app/core/substance-form/access-manager/access-manager.component.html","./src/app/core/substance-form/access-manager/access-manager.component.ts","./src/app/core/substance-form/audit-info/audit-info.component.html","./src/app/core/substance-form/audit-info/audit-info.component.ts","./src/app/core/substance-form/references/apply-reference/apply-reference.component.html","./src/app/core/substance-form/references/apply-reference/apply-reference.component.ts","./src/app/core/substance-form/references/previous-references/previous-references.component.html","./src/app/core/substance-form/references/previous-references/previous-references.component.ts","./src/app/core/substance-form/references/previous-references/previous-references-dialog/previous-references-dialog.component.ts","./src/app/core/substance-form/references/previous-references/previous-references-dialog/previous-references-dialog.component.html","./src/app/core/substance-form/references/reference-form.component.html","./src/app/core/substance-form/references/reference-form.component.ts","./src/app/core/substance-form/references/references-dialogs/refernce-form-dialog.component.html","./src/app/core/substance-form/references/references-dialogs/refernce-form-dialog.component.ts"],"sourcesContent":["<div class=\"menu-container\">\r\n  <button\r\n    mat-button\r\n    [matMenuTriggerFor]=\"accessMenu\"\r\n    [matTooltip]=\"tooltipMessage\"\r\n    (menuOpened)=\"menuOpened()\"\r\n    (menuClosed)=\"menuClosed()\">\r\n    <mat-icon svgIcon=\"lock\" *ngIf=\"access.length\"></mat-icon>\r\n    <mat-icon svgIcon=\"lock_open\" *ngIf=\"!access.length\"></mat-icon>\r\n    <span>{{label? label: \"Access\"}}</span>\r\n  </button>\r\n  <mat-menu #accessMenu=\"matMenu\" xPosition=\"before\">\r\n    <form [formGroup]=\"accessFormGroup\">\r\n      <div mat-menu-item *ngFor=\"let accessOption of accessOptions\" (click)=\"$event.stopPropagation()\">\r\n        <mat-checkbox (change)=\"updateAccess($event, accessOption)\" [formControlName]=\"accessOption.value\">\r\n          {{accessOption.display}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </form>\r\n  </mat-menu>\r\n</div>","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'app-access-manager',\n  templateUrl: './access-manager.component.html',\n  styleUrls: ['./access-manager.component.scss']\n})\nexport class AccessManagerComponent implements OnInit, AfterViewInit {\n  accessOptions: Array<VocabularyTerm>;\n  privateAccess: Array<string> = [];\n  @Output() accessOut = new EventEmitter<Array<string>>();\n  tooltipMessage: string;\n  @Input() label?: string;\n  accessFormGroup = new FormGroup({});\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {}\n\n  @Input()\n  set access(access: Array<string>) {\n    if (access != null) {\n      this.privateAccess = access;\n      this.getVocabularies();\n    } else {\n      this.privateAccess = [];\n      this.getVocabularies();\n    }\n  }\n\n  get access(): Array<string> {\n    return this.privateAccess;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('ACCESS_GROUP').subscribe(response => {\n      const accessOptions = response['ACCESS_GROUP'].list;\n      this.createAccessFromGroup(accessOptions);\n      this.accessOptions = accessOptions;\n      this.crosscheckAccesses();\n    });\n  }\n\n  private createAccessFromGroup(accessOptions: Array<VocabularyTerm> = []): void {\n    const group: any = {};\n    accessOptions.forEach(accessOption => {\n      group[accessOption.value] = new FormControl();\n    });\n    this.accessFormGroup = new FormGroup(group);\n  }\n\n  private crosscheckAccesses() {\n    this.tooltipMessage = 'Access is set to: ';\n\n    if (this.privateAccess.length > 0) {\n      this.privateAccess.forEach(accessOption => {\n        for (let i = 0; i < this.accessOptions.length; i++) {\n          if (accessOption === this.accessOptions[i].value) {\n            this.accessFormGroup.controls[accessOption].setValue(true);\n            this.tooltipMessage += (this.accessOptions[i].display + ', ');\n            break;\n          }\n        }\n      });\n      this.tooltipMessage = this.tooltipMessage.replace(/(, )$/, '');\n    } else {\n      this.tooltipMessage += 'public';\n    }\n  }\n\n  updateAccess(event: MatCheckboxChange, accessOption: VocabularyTerm): void {\n\n    if (this.privateAccess.length === 0) {\n      this.tooltipMessage = this.tooltipMessage.replace('public', '');\n    }\n\n    if (event.checked) {\n      this.privateAccess.push(accessOption.value);\n\n      if (this.privateAccess.length > 1) {\n        this.tooltipMessage += ', ';\n      }\n\n      this.tooltipMessage += (accessOption.display);\n\n    } else {\n\n      const indexToRemove = this.privateAccess.indexOf(accessOption.value);\n\n      if (indexToRemove > -1) {\n        this.privateAccess.splice(indexToRemove, 1);\n      }\n\n      this.tooltipMessage = this.tooltipMessage.replace(accessOption.display, '')\n        .replace(': , ', ': ')\n        .replace(', ,', ',')\n        .replace(/,$/, '')\n        .replace(/(, )$/, '');\n\n      if (this.privateAccess.length === 0) {\n        this.tooltipMessage += 'public';\n      }\n    }\n\n    this.accessOut.emit(this.privateAccess);\n  }\n\n  menuOpened(): void {\n    const event: Event = new Event('focusin', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  menuClosed(): void {\n    const event: Event = new Event('focusout', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n}\n","<div class = 'audit-container' *ngIf = \"source\">\n  <div class = \"name\" *ngIf = 'source.createdBy'><b class = 'static'>Created By:</b> {{ source.createdBy}} </div>\n  <div class = \"date\" *ngIf = 'source.created'><b class = 'static'>on</b> {{ source.created | date:'medium'}}</div>\n  <div class = \"spacer\" *ngIf = 'source.created && source.lastEdited'> <b>-</b> </div>\n  <div class = \"name\" *ngIf = 'source.lastEditedBy'><b class = 'static'>Last Edited By</b>: {{ source.lastEditedBy}} </div>\n  <div class = \"date\" *ngIf = 'source.lastEdited'><b class = 'static'>on</b> {{ source.lastEdited | date:'medium'}}</div>\n</div>\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-audit-info',\n  templateUrl: './audit-info.component.html',\n  styleUrls: ['./audit-info.component.scss']\n})\nexport class AuditInfoComponent implements OnInit {\n  @Input() source: any;\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n}\n","<button mat-button [matMenuTriggerFor]=\"appliedOptionsMenu\" (menuOpened) = \"setOpen()\" (menuClosed) =\"close()\">\n  <span>Apply to</span>&nbsp;\n  <mat-icon svgIcon=\"menu\"></mat-icon>\n</button>\n<mat-menu class=\"applied-menu-container\" #appliedOptionsMenu=\"matMenu\" xPosition=\"before\" >\n  <button mat-menu-item (click)=\"applyToAll()\">\n    <span>All</span>\n  </button>\n  <button mat-menu-item (click)=\"applyToAllWithoutRef()\">\n    <span>All without references</span>\n  </button>\n  <div *ngIf=\"domainsWithReferences\">\n    <div *ngIf=\"domainsWithReferences.definition\" mat-menu-item (click)=\"$event.stopPropagation()\">\n      <mat-checkbox (change)=\"updateAppliedOtion($event, domainsWithReferences.definition.domain)\"\n        [checked]=\"domainsWithReferences.definition.domain.checked\">\n        {{domainsWithReferences.definition.subClass}}\n      </mat-checkbox>\n    </div>\n    <ng-container *ngFor=\"let domainKey of domainKeys\">\n      <div *ngIf=\"domainsWithReferences[domainKey] && domainsWithReferences[domainKey].domains && domainsWithReferences[domainKey].domains.length\">\n        <button mat-menu-item [matMenuTriggerFor]=\"optionsMenu\">\n          {{domainKey}}\n        </button>\n        <mat-menu #optionsMenu=\"matMenu\">\n          <button mat-menu-item (click)=\"applyToAllDomain(domainKey)\">\n            <span>All {{domainKey}}</span>\n          </button>\n          <button mat-menu-item (click)=\"applyToAllDomainWithoutRef(domainKey)\">\n            <span>All {{domainKey}} without references</span>\n          </button>\n          <div *ngFor=\"let domain of domainsWithReferences[domainKey].domains\" mat-menu-item (click)=\"$event.stopPropagation()\">\n            <mat-checkbox (change)=\"updateAppliedOtion($event, domain)\" *ngIf = 'domainKey !== \"relationships\" && domainKey !== \"constituents\"'\n            [checked]=\"domain.checked\">\n            {{(domain[domainsWithReferences[domainKey].displayKey].length>50)? (domain[domainsWithReferences[domainKey].displayKey] | slice:0:50)+'...':(domain[domainsWithReferences[domainKey].displayKey])}}\n            </mat-checkbox>\n            <mat-checkbox (change)=\"updateAppliedOtion($event, domain)\" *ngIf = 'domainKey === \"relationships\"'\n            [checked]=\"domain.checked\">\n            {{(domain.relatedSubstance.name.length>40)? (domain.relatedSubstance.name | slice:0:40)+'...':(domain.relatedSubstance.name)}}\n            </mat-checkbox>\n            <mat-checkbox (change)=\"updateAppliedOtion($event, domain)\" *ngIf = 'domainKey === \"constituents\"'\n            [checked]=\"domain.checked\">\n            {{(domain.substance.name.length > 40)? (domain.substance.name | slice:0:40)+'...':(domain.substance.name)}}\n            </mat-checkbox>\n          </div>\n        </mat-menu>\n      </div>\n    </ng-container>\n  </div>\n</mat-menu>","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { domainKeys } from '../domain-references/domain-keys.constant';\nimport { DomainsWithReferences } from '../domain-references/domain.references.model';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { Subscription } from 'rxjs';\nimport { SubstanceFormReferencesService } from '../substance-form-references.service';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-apply-reference',\n  templateUrl: './apply-reference.component.html',\n  styleUrls: ['./apply-reference.component.scss']\n})\nexport class ApplyReferenceComponent implements OnInit, OnDestroy {\n  domainKeys = domainKeys;\n  domainsWithReferences: DomainsWithReferences;\n  private privateSubReferenceUuid: string;\n  private subscriptions: Array< Subscription > = [];\n  open = false;\n\n  constructor(\n    private substanceFormReferencesService: SubstanceFormReferencesService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  setOpen() {\n    this.open = true;\n    const subscription = this.substanceFormReferencesService.domainsWithReferences.pipe(take(1)).subscribe(domainsWithReferences => {\n      this.domainsWithReferences = domainsWithReferences;\n      this.setChecked();\n    });\n    this.subscriptions.push(subscription);\n  }\n\n  @Input()\n  set subReferenceUuid(uuid: string) {\n    this.privateSubReferenceUuid = uuid;\n  }\n\n  applyToAll(): void {\n    this.applyReference(this.domainsWithReferences.definition.domain);\n    this.domainKeys.forEach(key => {\n      if (this.domainsWithReferences[key]) {\n        this.domainsWithReferences[key].domains.forEach(domain => {\n          this.applyReference(domain);\n        });\n      }\n    });\n    this.substanceFormReferencesService.emitReferencesUpdate();\n\n\n  }\n\n  applyToAllWithoutRef(): void {\n    if (this.domainsWithReferences.definition.domain.references == null\n      || this.domainsWithReferences.definition.domain.references.length === 0) {\n        this.applyReference(this.domainsWithReferences.definition.domain);\n    }\n\n    this.domainKeys.forEach(key => {\n      if (this.domainsWithReferences[key] && this.domainsWithReferences[key].domains && this.domainsWithReferences[key].domains.length) {\n        this.domainsWithReferences[key].domains.forEach(domain => {\n          if (!domain.references || domain.references.length === 0) {\n            this.applyReference(domain);\n          }\n        });\n      }\n    });\n    this.substanceFormReferencesService.emitReferencesUpdate();\n\n  }\n\n  applyToAllDomain(domainKey: string): void {\n\n    this.domainsWithReferences[domainKey].domains.forEach(domain => {\n      this.applyReference(domain);\n    });\n    this.substanceFormReferencesService.emitReferencesUpdate();\n  }\n\n  close() {\n    this.domainsWithReferences = null;\n    this.open = false;\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  setChecked() {\n    if(this.domainsWithReferences.definition && this.domainsWithReferences.definition.domain) {\n      this.domainsWithReferences.definition.domain.checked = this.domainsWithReferences.definition.domain.references &&\n      this.domainsWithReferences.definition.domain.references.indexOf(this.privateSubReferenceUuid) > -1;\n    }\n    this.domainKeys.forEach(domain => {\n      if (this.domainsWithReferences[domain]) {\n        if(this.domainsWithReferences[domain].domains) {\n          this.domainsWithReferences[domain].domains.forEach(element => {\n            element.checked = element.references && element.references.indexOf(this.privateSubReferenceUuid) > -1;\n          });\n        }\n      }\n    });\n\n    }\n\n  applyToAllDomainWithoutRef(domainKey: string): void {\n    if (this.domainsWithReferences[domainKey] && this.domainsWithReferences[domainKey].domains\n      && this.domainsWithReferences[domainKey].domains.length) {\n        this.domainsWithReferences[domainKey].domains.forEach(domain => {\n          if (!domain.references || domain.references.length === 0) {\n            this.applyReference(domain);\n          }\n        });\n    }\n    this.substanceFormReferencesService.emitReferencesUpdate();\n  }\n\n  updateAppliedOtion(event: MatCheckboxChange, domain: any): void {\n    if (event.checked) {\n      this.applyReference(domain);\n    } else {\n      this.removeReference(domain);\n    }\n    this.substanceFormReferencesService.emitReferencesUpdate();\n  }\n\n  applyReference(domain: any): void {\n    if (!domain.references) {\n      domain.references = [];\n    }\n    if (domain.references.indexOf(this.privateSubReferenceUuid) === -1) {\n      domain.references.push(this.privateSubReferenceUuid);\n    }\n  }\n\n  removeReference(domain: any): void {\n    if (domain.references && domain.references.length) {\n      const referenceUuidIndex = domain.references.indexOf(this.privateSubReferenceUuid);\n\n      if (referenceUuidIndex > -1) {\n        domain.references.splice(this.privateSubReferenceUuid, 1);\n      }\n    }\n  }\n\n  getDomainDisplay(obj: any, path: string, defaultValue: any = null): string {\n    return String.prototype.split.call(path, /[,[\\].]+?/)\n      .filter(Boolean)\n      .reduce((a: any, c: string) => (Object.hasOwnProperty.call(a, c) ? a[c] : defaultValue), obj);\n  }\n\n  isApplied(domain: any): boolean {\n    return domain && domain.references && domain.references.indexOf(this.privateSubReferenceUuid) > -1;\n  }\n\n}\n","<div class = 'spinner-container'>\n        <mat-progress-spinner  mode=\"indeterminate\" *ngIf=\"loading\" class = \"spinner\">\n        </mat-progress-spinner>\n      </div>\n      <div *ngIf =\"!loading\">\n\n    \n<div *ngIf = \"oldReferences.length > 0\">\n    <span class = \"explain\"> Select a recently submitted reference to populate the form</span>\n        <table mat-table [dataSource]=\"oldReferences\">\n            <ng-container matColumnDef=\"use\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Use </th>\n                <td mat-cell *matCellDef=\"let reference\"><a class = \"reuse-button\" (click) = \"selectReference(reference)\">select</a> </td>\n              </ng-container>\n  \n            <ng-container matColumnDef=\"citation\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header> Citation </th>\n              <td mat-cell *matCellDef=\"let reference\">\n                <a *ngIf = \"reference.url\" [href]=\"reference.url\" target = \"_blank\" >{{reference.citation}} </a>\n                <span *ngIf = \"!reference.url\"> {{reference.citation}} </span>\n              </td>\n            </ng-container>\n      \n            <ng-container matColumnDef=\"type\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header> Type </th>\n              <td mat-cell *matCellDef=\"let reference\"> {{reference.docType}} </td>\n            </ng-container>\n      \n            <ng-container matColumnDef=\"tags\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header> Tags </th>\n              <td mat-cell *matCellDef=\"let reference\">\n                <span *ngFor=\"let tag of reference.tags; last as isLast\">{{tag}}<span *ngIf=\"!isLast\">,&nbsp;</span></span>\n              </td>\n            </ng-container>\n      \n            <ng-container matColumnDef=\"dateAcessed\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header> Date Accessed </th>\n              <td mat-cell *matCellDef=\"let reference\"> {{reference.lastEdited | date : 'short'}} </td>\n            </ng-container>\n      \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row class = \"narrow-row\" *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>\n    </div>\n    <div *ngIf = \"oldReferences.length === 0\">\n        <i>No previous references found for this user</i>\n        </div>\n\n    </div>","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { SubstanceService } from '@gsrs-core/substance/substance.service';\nimport { AuthService } from '@gsrs-core/auth';\nimport { SubstanceReference } from '@gsrs-core/substance/substance.model';\n\n@Component({\n  selector: 'app-previous-references',\n  templateUrl: './previous-references.component.html',\n  styleUrls: ['./previous-references.component.scss']\n})\nexport class PreviousReferencesComponent implements OnInit {\n  user: string;\n  refCount: number;\n  loading = true;\noldReferences: Array<SubstanceReference> = [];\ndisplayedColumns: string[] = ['use', 'citation', 'type', 'tags', 'dateAcessed'];\n@Output() selectedReference = new EventEmitter<SubstanceReference>();\n  constructor(\n    private substanceService: SubstanceService,\n    private authService: AuthService) { }\n\n  ngOnInit() {\n    this.user =  this.authService.getUser();\n    this.substanceService.getSubstanceReferences(1, this.user).subscribe( response => {\n      if (response.total) {\n        this.refCount = response.total;\n      } else {\n        this.refCount = 0;\n      }\n      this.getPreviousReferences();\n    });\n  }\n\n  getPreviousReferences(): void {\n    let skip = this.refCount - 100;\n\n    if (this.refCount < 100) {\n      skip = 0;\n    }\n    this.substanceService.getSubstanceReferences(12, this.user).subscribe( response => {\n      if (response.count && response.content) {\n        for (let i = (response.content.length - 1); i >= 0; i--) {\n\n          if (this.user === response.content[i]['lastEditedBy']\n              && response.content[i]['docType']\n              && response.content[i]['citation']\n              && response.content[i]['docType'] !==  'VALIDATION_MESSAGE'\n              && response.content[i]['docType'] !==  'SYSTEM'\n              && response.content[i]['docType'] !==  'BATCH_IMPORT'\n              && response.content[i]['docType'] !==  'VALIDATION_MESSAGE' ) {\n            this.oldReferences.push(response.content[i]);\n            if (this.oldReferences.length >= 12) {\n              break;\n            }\n          }\n        }\n        this.loading = false;\n      } else {\n        this.loading = false;\n      }\n    });\n  }\n\n  selectReference(ref: SubstanceReference) {\n    this.selectedReference.emit(ref);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { SubstanceReference } from '@gsrs-core/substance/substance.model';\n\n@Component({\n  selector: 'app-previous-references-dialog',\n  templateUrl: './previous-references-dialog.component.html',\n  styleUrls: ['./previous-references-dialog.component.scss']\n})\nexport class PreviousReferencesDialogComponent implements OnInit {\n\n  constructor(    public dialogRef: MatDialogRef<PreviousReferencesDialogComponent>,\n  ) { }\n\n  ngOnInit() {\n  }\n  cancel(): void {\n    this.dialogRef.close();\n  }\n\n  fillReference(ref: SubstanceReference) {\n    this.dialogRef.close(ref);\n  }\n}\n","<div mat-dialog-title>\n        <h1>Select Previously Used Reference</h1>\n</div>\n<div mat-dialog-content>\n  <app-previous-references (selectedReference) = \"fillReference($event)\" ></app-previous-references>\n</div>\n<div mat-dialog-actions>\n        <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"cancel()\">Cancel</button>\n</div>","<div class=\"reference-form-container\">\n  <div *ngIf=\"reference.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"form-row\">\n    <app-cv-input required = 'true' class=\"source-type\" domain = 'DOCUMENT_TYPE'  title = \"Source Type\" [model] = \"reference.docType\"\n                  (valueChange)= \"reference.docType = $event\" name = \"docType\">\n    </app-cv-input>\n    <mat-form-field class=\"citation\">\n      <input matInput placeholder=\"Source Text/Citation\" [(ngModel)]=\"reference.citation\" required name=\"citation\" />\n    </mat-form-field>\n    <div class=\"checkbox-container\">\n      <mat-checkbox [(ngModel)]=\"reference.publicDomain\" name=\"publicDomain\">\n        Public Domain\n      </mat-checkbox>\n    </div>\n    <div>\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"reference.access\">\n      </app-access-manager>\n    </div>\n  </div>\n  <div *ngIf=\"!reference.$$deletedCode\">\n    <div class=\"form-row\">\n      <mat-form-field class=\"url\">\n        <input matInput placeholder=\"URL\" [(ngModel)]=\"reference.url\" name=\"refUrl\" />\n      </mat-form-field>\n      <mat-form-field>\n        <input matInput placeholder=\"Source Id\" [(ngModel)]=\"reference.id\" name=\"refId\" />\n      </mat-form-field>\n      <app-tag-selector class=\"tags\" (tagsUpdate)=\"updateTags($event)\" [tags]=\"reference.tags\"\n        cvDomain=\"DOCUMENT_COLLECTION\"></app-tag-selector>\n    </div>\n    <div class=\"form-row form-actions\">\n      <div *ngIf=\"reference.uuid && !hideDelete\">\n        <button mat-button (click)=\"deleteReference()\">\n          <span>Delete</span>&nbsp;\n          <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n        </button>\n      </div>\n      <div *ngIf=\"!reference.uploadedFile\">\n        <button mat-button ncatsFileSelect (selectedFile)=\"fileSelected($event)\">\n          <span>Upload Document</span>&nbsp;\n          <mat-icon svgIcon=\"cloud_upload\"></mat-icon>\n        </button>\n      </div>\n      <div *ngIf=\"reference.uploadedFile\">\n        <button mat-button [matMenuTriggerFor]=\"documentMenu\">\n          Attachment\n          <mat-icon svgIcon=\"attachment\"></mat-icon>\n        </button>\n        <mat-menu #documentMenu=\"matMenu\">\n          <a mat-menu-item (click)=\"downloadDocument(reference.uploadedFile)\">Download</a>\n          <button mat-menu-item ncatsFileSelect (selectedFile)=\"fileSelected($event)\">Replace</button>\n          <button mat-menu-item (click)=\"reference.uploadedFile = null\">Delete</button>\n        </mat-menu>\n      </div>\n      <div class = \"loading-container\" *ngIf = \"loading === true\">\n        <div class = \"spinner-container\">\n            <mat-progress-spinner\n            class=\"progress-spinner spinner\"\n            [color]=\"primary\"\n            mode = \"indeterminate\">\n        </mat-progress-spinner>\n        </div>\n        \n      <span>Uploading</span>\n      </div>\n      <div class = \"loading-container\" *ngIf = \"loading === false && error === true\">\n          Error: There was a problem uploading this document\n        </div>\n      <div *ngIf=\"!reference.uuid\">\n          <button mat-button  (click)=\"showPrev = !showPrev\" matTooltip = \"use a previously submitted reference\">\n            <span>{{showPrev? 'Hide':'Use'}} Previous Substance Reference</span>&nbsp;\n          </button>\n        </div>\n        <div *ngIf=\"reference.uuid && !reference.docType && !reference.citation\">\n            <button mat-button  (click)=\"openPreviousDialog()\" matTooltip = \"use a previously submitted reference\">\n              <span>{{showPrev? 'Hide':'Use'}} Previous Substance Reference</span>&nbsp;\n            </button>\n          </div>\n      <span class=\"middle-fill\"></span>\n      <div *ngIf=\"reference.uuid\">\n        <app-apply-reference [subReferenceUuid]=\"reference.uuid\"></app-apply-reference>\n      </div>\n    </div>\n  </div>\n  <div class = \"form-row \" *ngIf = \"showPrev\" >\n    <app-previous-references class = \"previous-ref\" (selectedReference) = \"fillReference($event)\" ></app-previous-references>\n  </div>\n  <div class = \"form-row\">\n    <app-audit-info [source] = \"reference\"></app-audit-info>\n  </div>\n</div>\n","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { SubstanceReference } from '../../substance/substance.model';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, Validators } from '@angular/forms';\nimport { UtilsService } from '../../utils/utils.service';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { SubstanceFormReferencesService } from './substance-form-references.service';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PreviousReferencesDialogComponent } from '@gsrs-core/substance-form/references/previous-references/previous-references-dialog/previous-references-dialog.component';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-reference-form',\n  templateUrl: './reference-form.component.html',\n  styleUrls: ['./reference-form.component.scss']\n})\nexport class ReferenceFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() reference: SubstanceReference;\n  @Output() referenceDeleted = new EventEmitter<SubstanceReference>();\n  @Input() hideDelete = false;\n  private overlayContainer: HTMLElement;\n  deleteTimer: any;\n  showPrev = false;\n  loading = false;\n  error = false;\n  private subscriptions: Array<Subscription> = [];\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private utilsService: UtilsService,\n    private substanceFormReferencesService: SubstanceFormReferencesService,\n    private dialog: MatDialog,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n\n  }\n\n  ngAfterViewInit() {\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.reference.access = access;\n  }\n\n  updateTags(tags: Array<string>): void {\n    this.reference.tags = tags;\n  }\n\n  get isValid(): boolean {\n    if (this.reference.docType\n      && this.reference.citation) {\n        return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteReference(): void {\n    this.reference.$$deletedCode = this.utilsService.newUUID();\n    if (!this.reference.docType\n      && !this.reference.citation\n      && !this.reference.uploadedFile\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.referenceDeleted.emit(this.reference);\n      }, 2000);\n    } else {\n      this.substanceFormReferencesService.emitReferencesUpdate();\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.reference.$$deletedCode;\n    this.substanceFormReferencesService.emitReferencesUpdate();\n  }\n\n  fileSelected(file: File): void {\n    this.error = false;\n    if (file != null) {\n      this.loading = true;\n      this.utilsService.uploadFile(file).subscribe(response => {\n        this.reference.uploadedFile = response;\n        this.loading = false;\n\n      }, error => {\n        this.loading = false;\n        this.error = true;\n\n      });\n    }\n  }\n\n  openPreviousDialog(): void {\n      const dialogRef = this.dialog.open(PreviousReferencesDialogComponent, {\n        data: {},\n        width: '990px'\n      });\n      this.overlayContainer.style.zIndex = '1002';\n      const dialogSubscription = dialogRef.afterClosed().subscribe(ref => {\n        this.overlayContainer.style.zIndex = null;\n       if (ref) {\n         if (ref.citation && ref.citation !== '' && ref.docType && ref.docType !== '') {\n          this.fillReference(ref);\n        }\n       }\n      });\n      this.subscriptions.push(dialogSubscription);\n    }\n\n    fillReference(ref: SubstanceReference) {\n      this.showPrev = false;\n      this.reference.access = ref.access;\n      this.reference.citation = ref.citation;\n      this.reference.deprecated = ref.deprecated;\n      this.reference.docType = ref.docType;\n      this.reference.publicDomain = ref.publicDomain;\n      this.reference.tags = ref.tags;\n      this.reference.uploadedFile = ref.uploadedFile;\n      this.reference.url = ref.url || null;\n      this.reference.id = ref.id || null;\n    }\n\n  downloadDocument(url: string): void {\n    this.substanceFormService.bypassUpdateCheck();\n    window.open(url);\n  }\n\n}\n","<h1 mat-dialog-title>{{reference.uuid ? 'Edit' : 'Add'}} Reference</h1>\n<div mat-dialog-content name = \"reference-dialog-container\" id = \"reference-dialog-container\">\n  <app-previous-references (selectedReference) = \"fillReference($event)\" *ngIf =\"showPrev\"></app-previous-references>\n  <div *ngIf=\"reference\">\n    <app-reference-form [reference]=\"reference\" #referenceForm hideDelete=\"true\" id = \"reference-dialog-form\" name = \"reference-dialog-form\"></app-reference-form>\n    <div class=\"actions\">\n      <span class=\"middle-fill\"></span>\n      <button mat-button (click)=\"cancel()\">Cancel</button>\n      <button mat-button [disabled]=\"!referenceForm || !referenceForm.isValid\" (click)=\"save()\">\n        Save\n      </button>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SubstanceReference } from '../../../substance/substance.model';\nimport { SubstanceService } from '@gsrs-core/substance/substance.service';\nimport { AuthService } from '@gsrs-core/auth';\nimport { Content } from '@angular/compiler/src/render3/r3_ast';\n\n@Component({\n  selector: 'app-refernce-form-dialog',\n  templateUrl: './refernce-form-dialog.component.html',\n  styleUrls: ['./refernce-form-dialog.component.scss']\n})\nexport class RefernceFormDialogComponent implements OnInit {\nuser: string;\nshowPrev = false;\n\n  constructor(\n    public dialogRef: MatDialogRef<RefernceFormDialogComponent>,\n    private substanceService: SubstanceService,\n    private authService: AuthService,\n    @Inject(MAT_DIALOG_DATA) public reference: SubstanceReference = {}\n  ) {}\n\n  ngOnInit() {\n    this.dialogRef.beforeClosed().subscribe(() => this.dialogRef.close(\n      ((this.reference.docType && this.reference.docType !== '') &&\n      (this.reference.citation && this.reference.citation !== '')) ? this.reference : null));\n  }\n\n  save(): void {\n    this.dialogRef.close(this.reference);\n  }\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n\n  fillReference(ref: SubstanceReference) {\n    delete ref.uuid;\n    delete ref.lastEdited;\n    delete ref.lastEditedBy;\n    delete ref.created;\n    delete ref.createdBy;\n    delete ref._self;\n    if ((ref.docType && ref.docType !== '') && (ref.citation && ref.citation !== '')) {\n      this.reference = ref;\n    }\n    this.showPrev = false;\n  }\n\n}\n"],"sourceRoot":"webpack:///","file":"1770.6c7ef6d17cacc312.js"}