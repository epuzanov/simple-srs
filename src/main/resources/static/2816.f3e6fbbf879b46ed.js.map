{"version":3,"mappings":"0NACEA,iBAA+CA,eAAoBA,uBAAWA,QAAKA,SAAsBA,6BAAtBA,qEACnFA,iBAA6CA,eAAoBA,cAAEA,QAAKA,yBAAmCA,6BAAnCA,mFACxEA,iBAAqEA,aAAGA,aAACA,QAAKA,kCAC9EA,iBAAkDA,eAAoBA,0BAAcA,QAAIA,SAA2BA,6BAA3BA,yEACxFA,iBAAgDA,eAAoBA,cAAEA,QAAKA,yBAAsCA,6BAAtCA,yFAL7EA,iBACEA,uBACAA,uBACAA,uBACAA,uBACAA,uBACFA,4BALuBA,0CACAA,wCACEA,6DACFA,6CACAA,4CCEhB,IAAMC,EAAb,eAAaA,EAAb,WAEE,6BAFF,uCAIE,gBAJFC,kDAAaD,8BAAkBE,uSDP/BH,4BAAgCA,+fCOnBC,EAAb,4eCNED,kBACEA,yBACAA,qBAA0CA,iDAASI,eACjDJ,uBACFA,QACFA,SCSK,IAAMK,EAAb,eAAaA,EAAb,WAYE,WACUC,EACAC,EACAC,EACAC,EACAC,MAA0CC,aAJ1CC,iBACAA,cACAA,oBACAA,+BACAA,4BAbAA,kBAAe,IAAIC,MAIrBD,mBAAqC,GAR/C,uCAoBE,WACEA,KAAKE,kBACLF,KAAKG,iBAAmBH,KAAKH,wBAAwBO,sBACrDJ,KAAKK,kBAvBT,6BA0BE,WACEL,KAAKK,kBA3BT,yBA+BE,WACEL,KAAKM,cAAcC,QAAQ,YACzBC,EAAaC,kBAjCnB,iBA0CE,WACE,YAAKJ,gBACEL,KAAKU,cA5ChBC,IAqCE,SACUC,GACRZ,KAAKU,aAAeE,IAvCxB,+BA+CE,WAEIZ,KAAKU,aAAaG,MADhBb,KAAKU,aAAaG,MACMb,KAAKU,aAAaG,MAAMC,OAAOd,KAAKe,WAEpCf,KAAKe,UAEjCf,KAAKK,gBACLL,KAAKF,qBAAqBkB,oBAtD9B,2BAyDE,SAAcJ,GACRA,EACFZ,KAAKiB,YAAcjB,KAAKF,qBAAqBoB,WAAWN,EAAMC,OAE1Db,KAAKU,eACPV,KAAKiB,YAAcjB,KAAKF,qBAAqBoB,WAAWlB,KAAKU,aAAaG,UA9DlF,wBAoEE,WAAU,WACRb,KAAKU,aAAaS,cAAgBnB,KAAKJ,aAAawB,UAClDpB,KAAKqB,YAAcC,WAAW,WAC5BC,EAAKC,aAAaC,KAAKF,EAAKX,OAC5BW,EAAKzB,qBAAqBkB,mBACzB,OAzET,wBA4EE,WACEU,aAAa1B,KAAKqB,oBACXrB,KAAKU,aAAaS,gBA9E7B,6BAiFE,WAAe,WACPX,EAAeR,KAAKN,UAAUiC,oBAAoB,sBAAsBC,UAAU,YACtFL,EAAKM,WAAaC,EAASC,mBAAsBC,OAEnDhC,KAAKM,cAAc2B,KAAKzB,KArF5B,wBAwFE,WAAU,WAEF0B,EAAYlC,KAAKL,OAAOwC,KAAKC,IAAgC,CACjEC,KAAM,CAACC,KAAQ,QAASC,KAAQvC,KAAKU,aAAaG,OAClD2B,MAAO,WAETxC,KAAKG,iBAAiBsC,MAAMC,OAAS,OAErC,IAAMC,EAAqBT,EAAUU,cAAchB,UAAU,YAC3DL,EAAKpB,iBAAiBsC,MAAMC,OAAS,KACjCG,IACFtB,EAAKb,aAAaG,MAAQgC,GAE5BtB,EAAKlB,gBACLkB,EAAKzB,qBAAqBkB,oBAE5BhB,KAAKM,cAAc2B,KAAKU,OAxG5BG,kDAAarD,GAAkBL,oFAAlBK,EAAkBF,mwBDf/BH,iBACEA,uBAMAA,iBACEA,iBACEA,oBAAiDA,gCAAS2D,iBACxD3D,sBACFA,QACFA,QACAA,iBACEA,0BAA4DA,yDAA+DA,QAC7HA,QACAA,iBACEA,oBAAgIA,gCAAS2D,wBACvI3D,UACFA,QACFA,QAEAA,mBACEA,mBAAmBA,kBAAKA,QACxBA,UACAA,sBAA+DA,gCAAU2D,iBACvE3D,wBACFA,QACFA,QACFA,QACAA,8BACFA,eA9BQA,6CAaiGA,sCAG/DA,0EAAsDA,yCACxFA,+DAMFA,sCAMYA,yjCCfLK,EAAb,wBCNIL,8BAAkCA,wDAFpCA,iBACEA,4BAA+DA,yDAAgB4D,iBAAqB5D,QACpGA,+BACFA,+DAHuHA,kCACrGA,0BAAe,8BACmBA,iEAGtDA,iBACIA,kBACGA,iBACCA,qBAAmBA,iDAAS6D,kBAC1B7D,uBAAUA,uBACZA,QACFA,QACNA,SCNO,IAAM8D,EAAb,eAAaA,EAAb,0CAQE,WACUpD,EACAqD,EACDC,GAAiC,6BAGxCC,cAAMD,IALEtD,uBACAuD,oBACDA,cANTA,iBAA8B,GAC9BA,eAAe,EACPA,gBAAqC,GAQ3CA,EAAKC,uBAAyB,wBAJUD,EAX5C,uCAkBE,WACErD,KAAKuD,iBAAiB9B,MAAK,GAC3BzB,KAAKwD,gBAAgB/B,KAAK,YApB9B,6BAuBE,WAAe,WACPgC,EAAqBzD,KAAKF,qBAAqB4D,gBAAgB9B,UAAU,YAC7E+B,EAAKC,OAASA,EACdD,EAAKE,sBAEP7D,KAAKM,cAAc2B,KAAKwB,GACxB,IAAMK,EAAuB9D,KAAKF,qBAAqBiE,kBAAkBnC,UAAU,YACjF+B,EAAKK,SAAWA,EAChBL,EAAKE,sBAEP7D,KAAKM,cAAc2B,KAAK6B,KAjC5B,yBAqCE,WACE9D,KAAKiE,mBAAmBxC,OACxBzB,KAAKM,cAAcC,QAAQ,YACzBC,EAAaC,kBAxCnB,+BA4CE,WACE,IAAIyD,EAAa,GACXC,EAAe,GACjBnE,KAAKgE,UAAYhE,KAAK4D,SACxB5D,KAAKgE,SAASzD,QAAQ,YACpB,GAAqB,MAAjB6D,EAAKC,UAAoBD,EAAKC,SAASC,OAAS,EAClD,QAASC,EAAI,EAAGA,GAAKH,EAAKC,SAASC,OAAQC,IACzCJ,EAAalC,KAAK,CAACuC,aAAcJ,EAAKI,aAAcC,aAAcF,MAIxEvE,KAAK4D,OAAOrD,QAAQ,YAClB2D,EAAaA,EAAWpD,OAAOF,EAAMC,UAGzCb,KAAK0E,eAAiBP,EAAaQ,OAAO,YAAS,OAAQT,EAAWU,KAAK,SAASC,GAChF,OAAQC,EAAKN,eAAiBK,EAAKL,cAAgBM,EAAKL,eAAiBI,EAAKJ,iBAGlFzE,KAAK+E,aAAeZ,EAAaG,OAASJ,EAAWI,SA/DzD,qBAkEE,WACEtE,KAAKgF,kBAnET,2BAsEE,WAAa,WACXhF,KAAKF,qBAAqBmF,oBAC1B3D,WAAW,WACTqC,EAAKR,gBAAgB+B,gBAArB,qBAA2D,cAzEjE,yBA6EE,SAAYtE,GACVZ,KAAKF,qBAAqBqF,qBAAqBvE,KA9EnD,0BAkFU,SAAmBwE,EAAYC,EAAkBC,GACvD,IAD+DC,EACzDC,EAAqB,GADoCC,UAEzCL,GAFyC,IAE/D,2BAA6B,KAAlBM,EAAkBH,QACvBG,EAAQL,KAAcC,GACxBE,EAAcvD,KAAKyD,UAJwCC,0BAO/D,OAAOH,MAzFXjE,GAAkDqE,kDAArC1C,GAA4B9D,2DAA5B8D,EAA4B3D,shBDbzCH,iBAMEA,iBAAuEA,SAA6EA,QACpJA,uBAIFA,QACAA,8BAN0BA,2DAA+CA,kGACdA,mCAKlCA,8VCCZ8D,EAAb,GC4Ba2C,YAAb,eAAaA,KAAbC,iFAAaD,4DAvBF,CACPE,KACAC,cAAsC9C,GACtC+C,IACAC,IACAC,KACAC,KACAC,IACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,IACAC,SAQShB,EAAb","names":["i0","AuditInfoComponent","f","selectors","ctx_r1","SugarFormComponent","cvService","dialog","utilsService","overlayContainerService","substanceFormService","h","this","EventEmitter","getVocabularies","overlayContainer","getContainerElement","updateDisplay","subscriptions","forEach","subscription","unsubscribe","privateSugar","set","sugar","sites","concat","remaining","emitSugarUpdate","siteDisplay","siteString","$$deletedCode","newUUID","deleteTimer","setTimeout","e","sugarDeleted","emit","clearTimeout","getDomainVocabulary","subscribe","sugarTypes","response","NUCLEIC_ACID_SUGAR","list","push","dialogRef","open","SubunitSelectorDialogComponent","data","card","link","width","style","zIndex","dialogSubscription","afterClosed","newLinks","d","ctx","ctx_r6","ctx_r8","SubstanceFormSugarsComponent","scrollToService","gaService","c","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","sugarsSubscription","substanceSugars","o","sugars","getRemainingSites","subunitsSubscription","substanceSubunits","subunits","componentDestroyed","sugarArray","subunitArray","unit","sequence","length","i","subunitIndex","residueIndex","remainingSites","filter","some","obj2","item","invalidSites","addOtherSugar","addSubstanceSugar","scrollToElement","deleteSubstanceSugar","array","property","value","O","foundElements","p","element","tt","SubstanceCardBaseFilteredList","SubstanceFormSugarsModule","v","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatTooltipModule","MatButtonToggleModule","MatInputModule","MatSelectModule"],"sources":["./src/app/core/substance-form/audit-info/audit-info.component.html","./src/app/core/substance-form/audit-info/audit-info.component.ts","./src/app/core/substance-form/sugar-form/sugar-form.component.html","./src/app/core/substance-form/sugar-form/sugar-form.component.ts","./src/app/core/substance-form/substance-form-sugars/substance-form-sugars.component.html","./src/app/core/substance-form/substance-form-sugars/substance-form-sugars.component.ts","./src/app/core/substance-form/substance-form-sugars/substance-form-sugars.module.ts"],"sourcesContent":["<div class = 'audit-container' *ngIf = \"source\">\n  <div class = \"name\" *ngIf = 'source.createdBy'><b class = 'static'>Created By:</b> {{ source.createdBy}} </div>\n  <div class = \"date\" *ngIf = 'source.created'><b class = 'static'>on</b> {{ source.created | date:'medium'}}</div>\n  <div class = \"spacer\" *ngIf = 'source.created && source.lastEdited'> <b>-</b> </div>\n  <div class = \"name\" *ngIf = 'source.lastEditedBy'><b class = 'static'>Last Edited By</b>: {{ source.lastEditedBy}} </div>\n  <div class = \"date\" *ngIf = 'source.lastEdited'><b class = 'static'>on</b> {{ source.lastEdited | date:'medium'}}</div>\n</div>\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-audit-info',\n  templateUrl: './audit-info.component.html',\n  styleUrls: ['./audit-info.component.scss']\n})\nexport class AuditInfoComponent implements OnInit {\n  @Input() source: any;\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n}\n","<div class=\"sugar-form-container\">\n  <div *ngIf=\"sugar.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"delete-container\">\n      <button mat-icon-button matTooltip=\"Delete link\" (click)=\"deleteLink()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n    <div class = \"type\">\n      <app-cv-input domain = \"NUCLEIC_ACID_SUGAR\" title = \"Sugar\" (valueChange) = \"sugar.sugar = $event\" [model] = \"sugar.sugar\"></app-cv-input>\n    </div>\n    <div class = \"addRemaining\">\n      <button mat-flat-button mat-primary matTooltip=\"Add remaining {{remaining.length}} sites\" [disabled] = \"remaining.length === 0\" (click)=\"addRemainingSites()\">\n        Add remaining {{remaining.length}} sites\n      </button>\n    </div>\n\n    <div class = \"links\">\n      <div class=\"label\">Sites</div>\n      {{siteDisplay}}\n      <button mat-icon-button matTooltip=\"Select sites from display\" (click)=\"(openDialog())\">\n        <mat-icon svgIcon=\"edit\"></mat-icon>\n      </button>\n    </div>\n  </div>\n  <app-audit-info [source] = \"sugar\"></app-audit-info>\n</div>\n","import {AfterViewInit, Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\nimport {Link, Linkage, Site, Sugar} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {ControlledVocabularyService} from '@gsrs-core/controlled-vocabulary';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {SubunitSelectorDialogComponent} from '@gsrs-core/substance-form/subunit-selector-dialog/subunit-selector-dialog.component';\n\n@Component({\n  selector: 'app-sugar-form',\n  templateUrl: './sugar-form.component.html',\n  styleUrls: ['./sugar-form.component.scss']\n})\nexport class SugarFormComponent implements OnInit, OnDestroy, AfterViewInit {\n\n\n  private privateSugar: Sugar;\n  @Output() sugarDeleted = new EventEmitter<Sugar>();\n  @Input() remaining: Array<Site>;\n  deleteTimer: any;\n  sugarTypes: any;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.getVocabularies();\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n    this.updateDisplay();\n  }\n\n  ngAfterViewInit() {\n    this.updateDisplay();\n\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  @Input()\n  set sugar(sugar: Sugar) {\n    this.privateSugar = sugar;\n  }\n\n  get sugar(): Sugar {\n    this.updateDisplay();\n    return this.privateSugar;\n  }\n\n  addRemainingSites(): void {\n    if (this.privateSugar.sites) {\n      this.privateSugar.sites = this.privateSugar.sites.concat(this.remaining);\n    } else {\n      this.privateSugar.sites = this.remaining;\n    }\n    this.updateDisplay();\n    this.substanceFormService.emitSugarUpdate();\n  }\n\n  updateDisplay(sugar?: Sugar): void {\n    if (sugar) {\n      this.siteDisplay = this.substanceFormService.siteString(sugar.sites);\n    } else {\n      if (this.privateSugar) {\n        this.siteDisplay = this.substanceFormService.siteString(this.privateSugar.sites);\n      }\n    }\n\n  }\n\n  deleteLink(): void {\n    this.privateSugar.$$deletedCode = this.utilsService.newUUID();\n      this.deleteTimer = setTimeout(() => {\n        this.sugarDeleted.emit(this.sugar);\n        this.substanceFormService.emitSugarUpdate();\n      }, 2000);\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateSugar.$$deletedCode;\n  }\n\n  getVocabularies(): void {\n    const subscription = this.cvService.getDomainVocabulary('NUCLEIC_ACID_SUGAR').subscribe(response => {\n      this.sugarTypes = response['NUCLEIC_ACID_SUGAR'].list;\n    });\n    this.subscriptions.push(subscription);\n  }\n\n  openDialog(): void {\n\n    const dialogRef = this.dialog.open(SubunitSelectorDialogComponent, {\n      data: {'card': 'sugar', 'link': this.privateSugar.sites},\n      width: '1040px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newLinks => {\n      this.overlayContainer.style.zIndex = null;\n      if (newLinks) {\n        this.privateSugar.sites = newLinks;\n      }\n      this.updateDisplay();\n      this.substanceFormService.emitSugarUpdate();\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n}\n","<div class=\"responsive\">\n  <!-- <div class = \"form-row\">\n    <button mat-button (click)=\"addOtherSugar()\">\n      Add sugar <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n    </button>\n  </div> -->\n  <div class = 'form-row' [ngClass] = \"invalidSites === 0?'':'too-many'\">Remaining Sugars: {{invalidSites === 0?remainingSites.length : invalidSites}}</div>\n  <div class = \"alternate-backgrounds\" *ngFor = \"let links of sugars; last as isLast; index as index\"  appScrollToTarget [id]=\"'substance-sugars-' + index\" >\n    <app-sugar-form [sugar]=\"links\" [remaining] = 'remainingSites' (sugarDeleted)=\"deleteSugar($event)\"></app-sugar-form>\n    <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n  </div>\n</div>\n<div class = 'form-row' *ngIf = \"sugars && sugars.length > 0\">\n    <span class = \"middle-fill\"></span>\n       <div class = \"form-row\">\n        <button mat-button (click)=\"addOtherSugar()\">\n          Add sugar <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n        </button>\n      </div>\n</div>\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SubstanceCardBaseFilteredList, SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {Link, Linkage, Site, Subunit, Sugar} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\n\n@Component({\n  selector: 'app-substance-form-sugars',\n  templateUrl: './substance-form-sugars.component.html',\n  styleUrls: ['./substance-form-sugars.component.scss']\n})\nexport class SubstanceFormSugarsComponent extends SubstanceCardBaseFilteredList<Sugar>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList  {\n\n  sugars: Array<Sugar>;\n  subunits: Array<Subunit>;\n  remainingSites: Array<Site> = [];\n  invalidSites = 0 ;\n  private subscriptions: Array<Subscription> = [];\n  constructor(\n    private substanceFormService: SubstanceFormService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService,\n\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form sugars';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Sugars');\n  }\n\n  ngAfterViewInit() {\n    const sugarsSubscription = this.substanceFormService.substanceSugars.subscribe(sugars => {\n      this.sugars = sugars;\n      this.getRemainingSites();\n    });\n    this.subscriptions.push(sugarsSubscription);\n    const subunitsSubscription = this.substanceFormService.substanceSubunits.subscribe(subunits => {\n      this.subunits = subunits;\n      this.getRemainingSites();\n    });\n    this.subscriptions.push(subunitsSubscription);\n\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  getRemainingSites(): void {\n    let sugarArray = [];\n    const subunitArray = [];\n    if (this.subunits && this.sugars) {\n      this.subunits.forEach(unit => {\n        if (unit.sequence != null && unit.sequence.length > 0) {\n          for (let i = 1; i <= unit.sequence.length; i++) {\n            subunitArray.push({subunitIndex: unit.subunitIndex, residueIndex: i});\n          }\n        }\n      });\n      this.sugars.forEach(sugar => {\n        sugarArray = sugarArray.concat(sugar.sites);\n      });\n    }\n    this.remainingSites = subunitArray.filter(item => {return !sugarArray.some(function(obj2) {\n        return (item.subunitIndex === obj2.subunitIndex && item.residueIndex === obj2.residueIndex);\n      });\n    });\n    this.invalidSites = subunitArray.length - sugarArray.length;\n  }\n\n  addItem(): void {\n    this.addOtherSugar();\n  }\n\n  addOtherSugar(): void {\n    this.substanceFormService.addSubstanceSugar();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-sugars-0`, 'center');\n    });\n  }\n\n  deleteSugar(sugar: Sugar): void {\n    this.substanceFormService.deleteSubstanceSugar(sugar);\n  }\n\n\n  private findElements<T, V>(array: T[], property: string, value: V): T[] {\n    const foundElements: T[] = [];\n    for (const element of array) {\n      if (element[property] === value) {\n        foundElements.push(element);\n      }\n    }\n    return foundElements;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {DynamicComponentLoaderModule} from '@gsrs-core/dynamic-component-loader';\nimport {SubstanceFormModule} from '@gsrs-core/substance-form/substance-form.module';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ScrollToModule} from '@gsrs-core/scroll-to';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatSelectModule} from '@angular/material/select';\nimport {SubstanceFormSugarsComponent} from '@gsrs-core/substance-form/substance-form-sugars/substance-form-sugars.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormSugarsComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatTooltipModule,\n    MatButtonToggleModule,\n    MatInputModule,\n    MatSelectModule\n  ],\n  exports: [\n  ],\n  declarations: [\n    SubstanceFormSugarsComponent\n  ]\n})\nexport class SubstanceFormSugarsModule { }\n"],"sourceRoot":"webpack:///","file":"2816.f3e6fbbf879b46ed.js"}