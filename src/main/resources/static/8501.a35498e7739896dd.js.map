{"version":3,"mappings":"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","names":["i0","ctx_r8","ctx_r11","AmountFormComponent","cvService","this","FormControl","Validators","getVocabularies","privateSubstanceAmount","set","amount","typeControl","setValue","type","valueChanges","subscribe","m","value","averageControl","average","length","match","lowControl","low","highControl","high","lowLimitControl","lowLimit","highLimitControl","highLimit","unitsControl","units","nonNumericValueControl","nonNumericValue","access","substanceAmount","event","setTimeout","getDomainVocabulary","f","amountTypeList","response","AMOUNT_TYPE","list","amountUnitList","AMOUNT_UNIT","vocab","property","some","r","v","selectors","ctx","PropertyParameterFormComponent","x","privateParameter","parameter","i","propertyTypeList","PROPERTY_TYPE","name","ctx_r2","ctx_r4","PropertyParameterDialogComponent","dialogRef","subsParameter","isNew","Object","keys","close","MAT_DIALOG_DATA","ctx_r5","ctx_r9","ctx_r10","ctx_r45","ctx_r47","ctx_r48","PropertyFormComponent","dialog","utilsService","overlayContainerService","substanceFormService","EventEmitter","overlayContainer","getContainerElement","privateProperty","referencedSubstanceUuid","referencedSubstance","refuuid","_nonNumeric","$$deletedCode","newUUID","deleteTimer","propertyDeleted","emit","id","parameters","splice","clearTimeout","substance","refPname","_name","uuid","substanceClass","approvalID","s","parameterCopyString","JSON","stringify","open","data","parse","width","style","zIndex","afterClosed","newParameter","a","unshift","forEach","key","SubunitSelectorDialogComponent","card","link","feature","siteRange","panelClass","features","stringToSites","error","alert","ctx_r13","ctx_r15","SubstanceFormPropertiesCardComponent","substanceFormPropertiesService","scrollToService","gaService","_","analyticsEventCategory","canAddItemUpdate","menuLabelUpdate","propertiesSubscription","substanceProperties","properties","filtered","searchSubscription","searchControl","filterList","console","log","subscriptions","push","page","pageChange","componentDestroyed","subscription","unsubscribe","addProperty","addSubstanceProperty","scrollToElement","deleteSubstanceProperty","SubstanceCardBaseFilteredList","SubstanceFormPropertiesModule","P","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceSelectorModule","MatCheckboxModule","MatListModule"],"sources":["./src/app/core/substance-form/amount-form/amount-form.component.html","./src/app/core/substance-form/amount-form/amount-form.component.ts","./src/app/core/substance-form/property-parameter-form/property-parameter-form.component.html","./src/app/core/substance-form/property-parameter-form/property-parameter-form.component.ts","./src/app/core/substance-form/property-parameter-dialog/property-parameter-dialog.component.html","./src/app/core/substance-form/property-parameter-dialog/property-parameter-dialog.component.ts","./src/app/core/substance-form/properties/property-form.component.html","./src/app/core/substance-form/properties/property-form.component.ts","./src/app/core/substance-form/properties/substance-form-properties-card.component.html","./src/app/core/substance-form/properties/substance-form-properties-card.component.ts","./src/app/core/substance-form/properties/substance-form-properties.module.ts"],"sourcesContent":["<div class = \"access\">\r\n  <app-access-manager class=\"right\" (accessOut)=\"updateAccess($event)\" [access]=\"substanceAmount.access\">\r\n  </app-access-manager>\r\n</div>\r\n<form class=\"amount-form\" *ngIf=\"substanceAmount\">\r\n  <div class=\"form-row\">\r\n    <div class = \"other-container\">\r\n    <div>\r\n    <mat-form-field class=\"amount-type\">\r\n      <mat-label>Type *</mat-label>\r\n      <mat-select [formControl]=\"typeControl\">\r\n          <mat-option [value] = 'null' ><span class = 'deselect' >Clear selection</span></mat-option>\r\n        <mat-option *ngFor=\"let type of amountTypeList\" [value]=\"type.value\">\r\n          {{type.display}}\r\n        </mat-option>\r\n        <mat-option *ngIf = \"privateSubstanceAmount.type && !inCV(  amountTypeList, privateSubstanceAmount.type) && privateSubstanceAmount.type !== ''\"\r\n                    value = \"{{privateSubstanceAmount.type}}\">{{privateSubstanceAmount.type}} (not in CV)</mat-option>\r\n        <mat-option value = 'other' >Other (New Value)</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  <div *ngIf = \"privateSubstanceAmount.type === 'other'\" class = \"custom\">\r\n    <input matInput placeholder=\"Custom value\" (focusout) = \"updateType($event.target)\" name=\"custom\" />\r\n  </div>\r\n    </div>\r\n    <mat-form-field class=\"amount-average\">\r\n      <input type=\"number\" matInput placeholder=\"Average\" [formControl]=\"averageControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"low\">\r\n      <input type=\"number\" matInput placeholder=\"Low\" [formControl]=\"lowControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"high\">\r\n      <input type=\"number\" matInput placeholder=\"High\" [formControl]=\"highControl\" />\r\n    </mat-form-field>\r\n    </div>\r\n    <div class=\"form-row\">\r\n\r\n    <mat-form-field class=\"low-limit\">\r\n      <input type=\"number\" matInput placeholder=\"Low Limit\" [formControl]=\"lowLimitControl\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"high-limit\">\r\n      <input type=\"number\" matInput placeholder=\"High Limit\" [formControl]=\"highLimitControl\" />\r\n    </mat-form-field>\r\n    <div class = \"other-container\">\r\n    <div>\r\n      <mat-form-field class=\"amount-units\">\r\n        <mat-label>Units</mat-label>\r\n        <mat-select [formControl]=\"unitsControl\">\r\n            <mat-option [value] = 'null' ><span class = 'deselect' >Clear selection</span></mat-option>\r\n          <mat-option *ngFor=\"let unit of amountUnitList\" [value]=\"unit.value\">\r\n            {{unit.display}}\r\n          </mat-option>\r\n          <mat-option *ngIf = \"privateSubstanceAmount.units && !inCV(  amountUnitList, privateSubstanceAmount.units) && privateSubstanceAmount.units !== ''\"\r\n                      value = \"{{privateSubstanceAmount.units}}\">{{privateSubstanceAmount.units}} (not in CV)</mat-option>\r\n          <mat-option value = 'other' >Other (New Value)</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n    <div *ngIf = \"privateSubstanceAmount.units === 'other'\" class = \"custom\">\r\n      <input matInput placeholder=\"Custom value\" (focusout) = \"updateUnits($event.target)\" name=\"custom\" />\r\n    </div>\r\n    </div>\r\n    <mat-form-field class=\"non-numeric-value\">\r\n        <input matInput placeholder=\"Non-numeric Value\" [formControl]=\"nonNumericValueControl\" />\r\n      </mat-form-field>\r\n  </div>\r\n</form>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { SubstanceAmount } from '@gsrs-core/substance/substance.model';\r\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\r\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-amount-form',\r\n  templateUrl: './amount-form.component.html',\r\n  styleUrls: ['./amount-form.component.scss']\r\n})\r\nexport class AmountFormComponent implements OnInit {\r\n  private privateSubstanceAmount: SubstanceAmount;\r\n  amountTypeList: Array<VocabularyTerm> = [];\r\n  amountUnitList: Array<VocabularyTerm> = [];\r\n  typeControl = new FormControl('', Validators.required);\r\n  averageControl = new FormControl('');\r\n  lowControl = new FormControl('');\r\n  highControl = new FormControl('');\r\n  lowLimitControl = new FormControl('');\r\n  highLimitControl = new FormControl('');\r\n  unitsControl = new FormControl('');\r\n  nonNumericValueControl = new FormControl('');\r\n\r\n  constructor(\r\n    private cvService: ControlledVocabularyService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getVocabularies();\r\n  }\r\n\r\n  @Input()\r\n  set substanceAmount(amount: SubstanceAmount) {\r\n    if (amount != null) {\r\n      this.privateSubstanceAmount = amount;\r\n\r\n      this.typeControl.setValue(this.privateSubstanceAmount.type);\r\n      this.typeControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.type = value;\r\n      });\r\n      this.averageControl.setValue(this.privateSubstanceAmount.average);\r\n      this.averageControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.averageControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.averageControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.average = value;\r\n      });\r\n      this.lowControl.setValue(this.privateSubstanceAmount.low);\r\n      this.lowControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.lowControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.lowControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.low = value;\r\n      });\r\n      this.highControl.setValue(this.privateSubstanceAmount.high);\r\n      this.highControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.highControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.highControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.high = value;\r\n      });\r\n      this.lowLimitControl.setValue(this.privateSubstanceAmount.lowLimit);\r\n      this.lowLimitControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.lowLimitControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.lowLimitControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.lowLimit = value;\r\n      });\r\n      this.highLimitControl.setValue(this.privateSubstanceAmount.highLimit);\r\n      this.highLimitControl.valueChanges.subscribe(value => {\r\n        if(value === null) {\r\n          this.highLimitControl.setValue('');\r\n        } else if(value.length === 1 && value.match(/[a-z]/i)) {\r\n          this.highLimitControl.setValue('');\r\n        }\r\n        this.privateSubstanceAmount.highLimit = value;\r\n      });\r\n      this.unitsControl.setValue(this.privateSubstanceAmount.units);\r\n      this.unitsControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.units = value;\r\n      });\r\n      this.nonNumericValueControl.setValue(this.privateSubstanceAmount.nonNumericValue);\r\n      this.nonNumericValueControl.valueChanges.subscribe(value => {\r\n        this.privateSubstanceAmount.nonNumericValue = value;\r\n      });\r\n    }\r\n  }\r\n\r\n  get substanceAmount(): SubstanceAmount {\r\n    return this.privateSubstanceAmount;\r\n  }\r\n\r\n  updateAccess(access: Array<string>): void {\r\n    this.privateSubstanceAmount.access = access;\r\n    this.substanceAmount.access = access;\r\n  }\r\n\r\n  updateType(event: any) {\r\n    setTimeout(() => {\r\n      this.typeControl.setValue(event.value);\r\n    });\r\n    this.privateSubstanceAmount.type = event.value;\r\n  }\r\n\r\n  updateUnits(event: any) {\r\n    setTimeout(() => {\r\n      this.unitsControl.setValue(event.value);\r\n    });\r\n    this.privateSubstanceAmount.units = event.value;\r\n  }\r\n\r\n  getVocabularies(): void {\r\n    this.cvService.getDomainVocabulary('AMOUNT_TYPE', 'AMOUNT_UNIT').subscribe(response => {\r\n      this.amountTypeList = response['AMOUNT_TYPE'].list;\r\n      this.amountUnitList = response['AMOUNT_UNIT'].list;\r\n    });\r\n  }\r\n\r\n  inCV(vocab: Array<VocabularyTerm>, property: string) {\r\n    return vocab.some(r => property === r.value);\r\n  }\r\n\r\n}\r\n","<div class=\"parameter-form-container\">\r\n  <div class=\"form-row\">\r\n    <mat-form-field class=\"name\">\r\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"parameter.name\" required name=\"name\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"type\">\r\n      <mat-label>Type</mat-label>\r\n      <mat-select [(ngModel)]=\"parameter.type\" name=\"type\">\r\n        <mat-option *ngFor=\"let propertyType of propertyTypeList\" [value]=\"propertyType.value\">\r\n          {{propertyType.display}}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  <div class=\"amount-form-container\">\r\n    <div class=\"amount-title\">Amount</div>\r\n    <app-amount-form [substanceAmount]=\"parameter.value\"></app-amount-form>\r\n  </div>\r\n</div>","import { Component, OnInit, Input } from '@angular/core';\r\nimport { SubstanceParameter } from '@gsrs-core/substance/substance.model';\r\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\r\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-property-parameter-form',\r\n  templateUrl: './property-parameter-form.component.html',\r\n  styleUrls: ['./property-parameter-form.component.scss']\r\n})\r\nexport class PropertyParameterFormComponent implements OnInit {\r\n  private privateParameter: SubstanceParameter;\r\n  propertyTypeList: Array<VocabularyTerm> = [];\r\n\r\n  constructor(\r\n    private cvService: ControlledVocabularyService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getVocabularies();\r\n  }\r\n\r\n  @Input()\r\n  set parameter(parameter: SubstanceParameter) {\r\n    this.privateParameter = parameter;\r\n  }\r\n\r\n  get parameter(): SubstanceParameter {\r\n    return this.privateParameter;\r\n  }\r\n\r\n  getVocabularies(): void {\r\n    this.cvService.getDomainVocabulary('PROPERTY_TYPE').subscribe(response => {\r\n      this.propertyTypeList = response['PROPERTY_TYPE'].list;\r\n    });\r\n  }\r\n\r\n  get isValid(): boolean {\r\n    return (this.privateParameter.name != null && this.privateParameter.name !== '')\r\n      && (this.privateParameter.type != null && this.privateParameter.type !== '');\r\n  }\r\n}\r\n","<h1 mat-dialog-title>{{isNew ? 'Add' : 'Edit'}} Parameter</h1>\r\n<div mat-dialog-content>\r\n  <div *ngIf=\"subsParameter\">\r\n    <app-property-parameter-form [parameter]=\"subsParameter\" #parameterForm>\r\n    </app-property-parameter-form>\r\n    <div class=\"actions\">\r\n      <span class=\"middle-fill\"></span>\r\n      <button mat-button (click)=\"cancel()\">Cancel</button>\r\n      <button mat-button [disabled]=\"!parameterForm || !parameterForm.isValid\" (click)=\"save()\">\r\n        Save\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { SubstanceParameter } from '../../substance/substance.model';\r\n\r\n@Component({\r\n  selector: 'app-property-parameter-dialog',\r\n  templateUrl: './property-parameter-dialog.component.html',\r\n  styleUrls: ['./property-parameter-dialog.component.scss']\r\n})\r\nexport class PropertyParameterDialogComponent implements OnInit {\r\n  isNew: boolean;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<PropertyParameterDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public subsParameter: SubstanceParameter\r\n  ) {\r\n    this.isNew = Object.keys(subsParameter).length < 2;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  save(): void {\r\n    this.dialogRef.close(this.subsParameter);\r\n  }\r\n\r\n  cancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<div class=\"property-form-container\">\n    <div *ngIf=\"property.$$deletedCode\" class=\"notification-backdrop\">\n      Deleted&nbsp;\n      <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n        <mat-icon svgIcon=\"undo\"></mat-icon>\n      </button>\n    </div>\n    <div class = \"flex-column\">\n        <div class=\"delete-container\">\n            <button mat-icon-button matTooltip=\"Delete property\" (click)=\"deleteProperty()\">\n              <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n            </button>\n          </div>\n    </div>\n    \n    <div class=\"flex-column form-content\">\n      <div class=\"form-row\">\n        <app-cv-input required = 'true' class=\"name property-name\" key = \"Property Name\"  title = \"Name\" [model] = \"property.name\"\n                      (valueChange)= \"property.name = $event\">\n        </app-cv-input>\n  \n        <app-cv-input required = 'true' class=\"type\" key = \"Property Property Type\"  title = \"Property Type\" [model] = \"property.propertyType\"\n                      (valueChange)= \"property.propertyType = $event\" name = \"type\">\n        </app-cv-input>\n  \n        <div class=\"checkbox-container column-checkbox\">\n          <mat-checkbox [(ngModel)]=\"property.defining\" name=\"defining\">\n            Defining\n          </mat-checkbox>\n        </div>\n        <div  *ngIf = \"property.propertyType === 'PROTEIN FEATURE' || property.propertyType === 'NUCLEIC ACID FEATURE'\">\n          <div class=\"amount-title\">Site Range</div>\n          <input [(ngModel)] = \"_nonNumeric\" (focusout)= \"validateRange()\">\n          <button mat-icon-button (click) = \"openFeatureDialog()\" matTooltip=\"Edit Feature Sites\">\n            <mat-icon svgIcon=\"edit\"></mat-icon>\n          </button>\n        </div>\n        <div class=\"flex-column referenced-substance\"  *ngIf = \"property.propertyType !== 'PROTEIN FEATURE' && property.propertyType !== 'NUCLEIC ACID FEATURE'\">\n            <app-substance-selector (selectionUpdated)=\"referencedSubstanceUpdated($event)\"\n              eventCategory=\"substancePropertyReferencedSub\" placeholder=\"Referenced Substance\" header=\"Referenced Substance\"\n              [subuuid]=\"referencedSubstanceUuid\">\n            </app-substance-selector>\n          </div>\n        <div>\n          <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"property.access\">\n          </app-access-manager>\n        </div>\n      </div>\n      <div class=\"form-row\" *ngIf=\"!property.$$deletedCode\">\n        <div>\n          <h4 class=\"parameters-title\">\n            Parameters\n            <button mat-icon-button (click)=\"openPropertyParameter()\" matTooltip=\"Add parameter\">\n              <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n            </button>\n          </h4>\n          <mat-list *ngIf=\"property.parameters\">\n              <div  mat-list-item *ngFor=\"let parameter of property.parameters; index as index\" >\n                 <button mat-icon-button (click) = \"deleteParameter(index)\"  class = \"parameter-delete-icon\">\n                   <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n                  </button>\n  \n              <span>{{parameter.name}}</span>\n              <span *ngIf=\"parameter.value != null\">\n                <span>\n                  &nbsp;\n                  {{parameter.value.type}}\n                </span>\n                <span *ngIf=\"parameter.value.average != null && parameter.value.average != ''\">\n                  &nbsp;-\n                  &nbsp;\n                  {{parameter.value.average}}\n                  &nbsp;\n                  {{parameter.value.units}}\n                </span>\n                <span *ngIf=\"(parameter.value.low != null && parameter.value.low != '')\n                    || (parameter.value.high != null && parameter.value.high != '')\">\n                  <span *ngIf=\"parameter.value.average == null || parameter.value.average == ''\">\n                    &nbsp;\n                    -\n                  </span>\n                  &nbsp;\n                  [\n                  <span *ngIf=\"parameter.value.high == null || parameter.value.high == ''\">\n                    >\n                  </span>\n                  <span *ngIf=\"parameter.value.low == null || parameter.value.low == ''\">\n                    <\n                  </span>\n                  <span *ngIf=\"parameter.value.low != null && parameter.value.low != ''\">\n                    {{parameter.value.low}}\n                  </span>\n                  <span *ngIf=\"parameter.value.low != null && parameter.value.low != ''\n                      && parameter.value.high != null && parameter.value.high != ''\">\n                    &nbsp;to&nbsp;\n                  </span>\n                  <span *ngIf=\"parameter.value.high != null && parameter.value.high != ''\">\n                    {{parameter.value.high}}\n                  </span>\n                  ]\n                  <span *ngIf=\"parameter.value.average == null || parameter.value.average == ''\">\n                    &nbsp;\n                    {{parameter.value.units}}\n                    &nbsp;\n                    (average)\n                  </span>\n                </span>\n                <span *ngIf=\"parameter.value.average != null && parameter.value.average != ''\">\n                  &nbsp;\n                  (average)\n                </span>\n                <span *ngIf=\"(parameter.value.lowLimit != null && parameter.value.lowLimit != '')\n                        || (parameter.value.highLimit != null && parameter.value.highLimit != '')\">\n                  &nbsp;-\n                  &nbsp;\n                  [\n                  <span *ngIf=\"parameter.value.highLimit == null || parameter.value.highLimit == ''\">\n                    >\n                  </span>\n                  <span *ngIf=\"parameter.value.lowLimit == null || parameter.value.lowLimit == ''\">\n                    <\n                  </span>\n                  <span *ngIf=\"parameter.value.lowLimit != null && parameter.value.lowLimit != ''\">\n                    {{parameter.value.lowLimit}}\n                  </span>\n                  <span *ngIf=\"parameter.value.lowLimit != null && parameter.value.lowLimit != ''\n                          && parameter.value.highLimit != null && parameter.value.highLimit != ''\">\n                    &nbsp;to&nbsp;\n                  </span>\n                  <span *ngIf=\"parameter.value.highLimit != null && parameter.value.highLimit != ''\">\n                    {{parameter.value.highLimit}}\n                  </span>\n                  ]\n                  &nbsp;(limits)\n                </span>\n                <span *ngIf=\"parameter.value.nonNumericValue\">\n                  &nbsp;-&nbsp;\n                  {{parameter.value.nonNumericValue}}\n                </span>\n              </span>\n              <button mat-icon-button (click)=\"openPropertyParameter(parameter)\"   class = \"parameter-icon\">\n                  <mat-icon svgIcon=\"edit\"></mat-icon>\n              </button>\n          </div>\n          </mat-list>\n        </div>\n      </div>\n    </div>\n    \n  </div>\n  <div *ngIf=\"!property.$$deletedCode\">\n    <div class=\"amount-form-container\"  *ngIf = \"property.propertyType !== 'PROTEIN FEATURE' && property.propertyType !== 'NUCLEIC ACID FEATURE'\">\n      <div class=\"amount-title\">Amount</div>\n      <app-amount-form [substanceAmount]=\"property.value\"></app-amount-form>\n    </div>\n    <div class=\"form-row\">\n      <div class=\"references-container\">\n        <app-domain-references [referencesUuids]=\"property.references\" #references></app-domain-references>\n      </div>\n    </div>\n    <app-audit-info [source] = \"property\"></app-audit-info>\n  \n  </div>\n  ","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { SubstanceProperty, SubstanceSummary, SubstanceRelated, SubstanceParameter } from '../../substance/substance.model';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, Validators } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PropertyParameterDialogComponent } from '../property-parameter-dialog/property-parameter-dialog.component';\nimport { UtilsService } from '../../utils/utils.service';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport {SubunitSelectorDialogComponent} from '@gsrs-core/substance-form/subunit-selector-dialog/subunit-selector-dialog.component';\nimport { SubstanceFormService } from '@gsrs-core/substance-form/substance-form.service';\n\n@Component({\n  selector: 'app-property-form',\n  templateUrl: './property-form.component.html',\n  styleUrls: ['./property-form.component.scss']\n})\nexport class PropertyFormComponent implements OnInit {\n  deleteTimer: any;\n  private privateProperty: SubstanceProperty;\n  referencedSubstanceUuid: string;\n  @Output() propertyDeleted = new EventEmitter<SubstanceProperty>();\n  propertyNameList: Array<VocabularyTerm> = [];\n  propertyTypeList: Array<VocabularyTerm> = [];\n  private overlayContainer: HTMLElement;\n  _nonNumeric: string;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  @Input()\n  set property(property: SubstanceProperty) {\n    this.privateProperty = property;\n    this.referencedSubstanceUuid = this.privateProperty.referencedSubstance && this.privateProperty.referencedSubstance.refuuid || '';\n    if ( !this.privateProperty.value) {\n      this.privateProperty.value = {};\n    }\n    if (this.property.value && this.property.value.nonNumericValue) {\n      this._nonNumeric = this.property.value.nonNumericValue;\n    }\n  }\n\n  get property(): SubstanceProperty {\n    return this.privateProperty;\n  }\n\n  deleteProperty(): void {\n    this.privateProperty.$$deletedCode = this.utilsService.newUUID();\n    if ((!this.privateProperty.referencedSubstance || !this.privateProperty.referencedSubstance.refuuid)\n      && !this.privateProperty.name\n      && !this.privateProperty.type\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.propertyDeleted.emit(this.property);\n      }, 2000);\n    }\n  }\n\n  deleteParameter(id: number): void {\n    this.property.parameters.splice(id, 1);\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateProperty.$$deletedCode;\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.property.access = access;\n  }\n\n  referencedSubstanceUpdated(substance: SubstanceSummary): void {\n    if (substance !== null){\n      const referencedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.property.referencedSubstance = referencedSubstance;\n    } else {\n      this.property.referencedSubstance = null;\n    }\n\n  }\n\n  openPropertyParameter(parameter?: SubstanceParameter): void {\n\n    let isNew: boolean;\n    if (parameter == null) {\n      isNew = true;\n      parameter = { value: {} };\n    }\n    const parameterCopyString = JSON.stringify(parameter);\n\n    const dialogRef = this.dialog.open(PropertyParameterDialogComponent, {\n      data: JSON.parse(parameterCopyString),\n      width: '1200px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    dialogRef.afterClosed().subscribe(newParameter => {\n      this.overlayContainer.style.zIndex = null;\n      if (newParameter != null) {\n        if (this.property.parameters == null) {\n          this.property.parameters = [];\n        }\n        if (isNew) {\n          this.property.parameters.unshift(newParameter);\n        } else {\n          Object.keys(newParameter).forEach(key => {\n            parameter[key] = newParameter[key];\n          });\n        }\n      }\n    });\n  }\n\n  openFeatureDialog() {\n    const feature = {'name': this.property.name, 'siteRange': this.property.value.nonNumericValue};\n    const dialogRef = this.dialog.open(SubunitSelectorDialogComponent, {\n      data: {'card': 'feature', 'link': [], 'feature': feature},\n      width: '1048px',\n      panelClass: 'subunit-dialog'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(features => {\n      this.overlayContainer.style.zIndex = null;\n      this.property.name = features.name || '';\n      this.property.value.nonNumericValue = features.siteRange;\n      this._nonNumeric = features.siteRange;\n    });\n  }\n\n  validateRange() {\n    try {\n      this.substanceFormService.stringToSites(this._nonNumeric);\n      this.property.value.nonNumericValue = this._nonNumeric;\n    } catch (error) {\n      alert('invalid shorthand for a site. Must be of form \"{subunit}_{residue}\" with multiple ranges seperated by a comma. Changes will be reverted');\n      this._nonNumeric = this.property.value.nonNumericValue;\n    }\n  }\n\n  addOtherOption(vocab: Array<VocabularyTerm>, property: string) {\n    if (vocab.some(r => property === r.value)) {\n    } else {\n    }\n    return vocab;\n  }\n\n\n}\n","<div class=\"flex-row\">\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\" *ngIf=\"properties && properties.length > pageSize\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addProperty()\">\n    Add property <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n<mat-paginator *ngIf=\"properties && properties.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n    (page)=\"pageChange($event, analyticsEventCategory)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>\n<div class=\"property\" *ngFor=\"let property of paged; last as isLast; index as index\" appScrollToTarget\n  [id]=\"'substance-property-' + index\">\n  <app-property-form [property]=\"property\" (propertyDeleted)=\"deleteProperty($event)\"></app-property-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<mat-paginator *ngIf=\"properties && properties.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"5\" showFirstLastButtons=\"true\"\n  (page)=\"pageChange($event, analyticsEventCategory)\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator> \n\n\n<div *ngIf = \"properties && properties.length > 0\" style = \"display: flex;\">\n    <span class=\"middle-fill\"></span>\n    <button mat-button (click)=\"addProperty()\">\n        Add property <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n  </div>","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { SubstanceProperty } from '@gsrs-core/substance/substance.model';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport { Subscription } from 'rxjs';\nimport { SubstanceFormPropertiesService } from './substance-form-properties.service';\n\n@Component({\n  selector: 'app-substance-form-properties-card',\n  templateUrl: './substance-form-properties-card.component.html',\n  styleUrls: ['./substance-form-properties-card.component.scss']\n})\nexport class SubstanceFormPropertiesCardComponent extends SubstanceCardBaseFilteredList<SubstanceProperty>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  properties: Array<SubstanceProperty>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormPropertiesService: SubstanceFormPropertiesService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form properties';\n  }\n\n  ngOnInit() {\n    this.canAddItemUpdate.emit(true);\n    this.menuLabelUpdate.emit('Properties');\n  }\n\n  ngAfterViewInit() {\n    const propertiesSubscription = this.substanceFormPropertiesService.substanceProperties.subscribe(properties => {\n      this.properties = properties;\n      this.filtered = properties;\n      const searchSubscription = this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.properties, this.analyticsEventCategory);\n      }, error => {\n        console.log(error);\n      });\n      this.subscriptions.push(searchSubscription);\n      this.page = 0;\n      this.pageChange();\n    });\n    this.subscriptions.push(propertiesSubscription);\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addProperty();\n  }\n\n  addProperty(): void {\n    this.substanceFormPropertiesService.addSubstanceProperty();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-property-0`, 'center');\n    });\n  }\n\n  deleteProperty(property: SubstanceProperty): void {\n    this.substanceFormPropertiesService.deleteSubstanceProperty(property);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormPropertiesCardComponent } from './substance-form-properties-card.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport { PropertyFormComponent } from './property-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatListModule } from '@angular/material/list';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormPropertiesCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceSelectorModule,\n    MatCheckboxModule,\n    MatListModule\n  ],\n  declarations: [\n    SubstanceFormPropertiesCardComponent,\n    PropertyFormComponent\n  ]\n})\nexport class SubstanceFormPropertiesModule { }\n"],"sourceRoot":"webpack:///","file":"8501.a35498e7739896dd.js"}