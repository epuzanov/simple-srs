{"version":3,"mappings":"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","names":["i0","ctx_r8","ctx_r16","ctx_r22","ctx_r24","ctx_r25","ctx_r27","SubstanceFormNamesCardComponent","substanceFormNamesService","substanceFormService","scrollToService","gaService","configService","c","analyticsEventCategory","this","menuLabelUpdate","emit","appId","environment","standardizeButton","configData","showNameStandardizeButton","definitionSubscription","definition","subscribe","level","definitionType","o","hiddenStateUpdate","canAddItemUpdate","subscriptions","push","namesSubscription","substanceNames","names","filtered","searchSubscription","searchControl","valueChanges","filterList","value","console","log","error","page","pageChange","expanded","componentDestroyed","forEach","subscription","unsubscribe","addName","addSubstanceName","setTimeout","scrollToElement","updatedName","name","displayName","deleteSubstanceName","n","SubstanceCardBaseFilteredList","selectors","ctx_r9","ctx_r12","ctx_r17","ctx_r20","NameOrgsComponent","cvService","element","h","getVocabularies","getDomainVocabulary","nameOrgOptions","response","NAME_ORG","list","privateNameOrgs","set","nameOrgs","tableData","MatTableDataSource","isExpanded","event","Event","bubbles","cancelable","nativeElement","dispatchEvent","nameOrg","deprecated","checked","stopPropagation","unshift","data","nameOrgIndex","findIndex","privateNameOrg","splice","r","ctx","ctx_r6","ctx_r18","ctx_r19","NameFormComponent","utilsService","dialog","overlayContainerService","nameFormService","EventEmitter","FormControl","overlayContainer","getContainerElement","substanceType","def","substanceClass","viewFull","val","showStd","privateName","languages","length","type","priorityUpdate","access","domains","jurisdiction","nameJurisdiction","$$deletedCode","newUUID","deleteTimer","nameDeleted","clearTimeout","dialogRef","open","NameResolverDialogComponent","height","width","style","zIndex","afterClosed","molfile","resolvedName","key","preventDefault","SubstanceFormNamesModule","v","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","MatRadioModule","MatCheckboxModule","MatExpansionModule","MatTableModule","MatBadgeModule","MatSelectModule","MatTooltipModule","i12"],"sources":["./src/app/core/substance-form/names/substance-form-names-card.component.html","./src/app/core/substance-form/names/substance-form-names-card.component.ts","./src/app/core/substance-form/names/name-orgs.component.html","./src/app/core/substance-form/names/name-orgs.component.ts","./src/app/core/substance-form/names/name-form.component.html","./src/app/core/substance-form/names/name-form.component.ts","./src/app/core/substance-form/names/substance-form-names.module.ts"],"sourcesContent":["<div class=\"flex-row\">\n  <mat-form-field [floatLabel]=\"'never'\" class=\"search\" *ngIf=\"names && names.length > pageSize\">\n    <input matInput placeholder=\"Search\" [formControl]=\"searchControl\">\n  </mat-form-field>\n  <span class=\"middle-fill\"></span>\n<!--<button *ngIf=\"names && names.length > 0 && standardizeButton\" class = 'standardize' matTooltip = \"Standardize all values in the 'Name' fields\" mat-button (click)=\"standardize()\">Standardize Names</button>-->\n  <button *ngIf=\"names && names.length > 0\" class = 'standardize' matTooltip = \"show / hide  additional rows\" mat-button (click)=\"collapse()\">{{expanded? 'Collapse':'Expand'}} All</button>\n  <button *ngIf=\"names && names.length > 0\" class = 'standardize' mat-button (click)=\"showMore = !showMore\">{{showMore? 'Hide' : 'More'}}\n    <mat-icon class=\"chevron\" *ngIf = \"!showMore\" svgIcon=\"chevron_down\"></mat-icon>\n    <mat-icon class=\"chevron\" *ngIf = \"showMore\" svgIcon=\"chevron_up\"></mat-icon>\n  </button>\n\n\n\n\n</div>\n<div class =\"flex-row\" *ngIf = \"showMore\">\n    <span class=\"middle-fill\"></span>\n    <mat-checkbox [(ngModel)]=\"showStd\" matTooltip=\"The standardized name value is generated upon submission\" class = \"checkbox\">\n      Show Standardized Name fields\n  </mat-checkbox>\n</div>\n\n<mat-paginator *ngIf=\"names && names.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"10\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\n    [pageSizeOptions]=\"[5, 10, 25, 100]\">\n  </mat-paginator>\n<div class=\"name\" *ngFor=\"let name of paged; last as isLast; index as index\" appScrollToTarget [id]=\"'substance-name-' + index\">\n  <app-name-form [name]=\"name\" (priorityUpdate)=\"priorityUpdated($event)\" (nameDeleted)=\"deleteName($event)\" [show] = \"expanded\" [standardized] = \"showStd\"></app-name-form>\n  <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n</div>\n<mat-paginator *ngIf=\"names && names.length > 5\" [length]=\"filtered && filtered.length || 0\" [pageIndex]=\"page\" [pageSize]=\"10\" showFirstLastButtons=\"true\" (page)=\"pageChange($event, analyticsEventCategory)\"\n  [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n<div *ngIf = \"names && names.length > 0\" style = \"display: flex;\">\n    <span class = \"middle-fill\"></span>\n    <button mat-button (click)=\"addName()\" [disabled] = \"isAlternative\">\n        Add name <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n</div>\n","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\nimport { SubstanceCardBaseFilteredList, SubstanceCardBaseList } from '../base-classes/substance-form-base-filtered-list';\nimport { SubstanceName } from '@gsrs-core/substance/substance.model';\nimport { SubstanceFormService } from '../substance-form.service';\nimport { ScrollToService } from '../../scroll-to/scroll-to.service';\nimport { GoogleAnalyticsService } from '../../google-analytics/google-analytics.service';\nimport { Subscription } from 'rxjs';\nimport { SubstanceFormNamesService } from './substance-form-names.service';\nimport { ConfigService } from '@gsrs-core/config';\n\n@Component({\n  selector: 'app-substance-form-names-card',\n  templateUrl: './substance-form-names-card.component.html',\n  styleUrls: ['./substance-form-names-card.component.scss']\n})\nexport class SubstanceFormNamesCardComponent\n  extends SubstanceCardBaseFilteredList<SubstanceName>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n  names: Array<SubstanceName>;\n  private subscriptions: Array<Subscription> = [];\n  pageSize = 10;\n  expanded = true;\n  showStd = true;\n  showMore = false;\n  appId: string;\n  standardizeButton = false;\n\n  constructor(\n    private substanceFormNamesService: SubstanceFormNamesService,\n    private substanceFormService: SubstanceFormService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService,\n    private configService: ConfigService,\n\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form names';\n  }\n\n  ngOnInit() {\n    this.menuLabelUpdate.emit('Names');\n    this.appId = this.configService.environment.appId;\n    this.standardizeButton = this.configService.configData.showNameStandardizeButton || false;\n    const definitionSubscription = this.substanceFormService.definition.subscribe( level => {\n      if (level.definitionType && level.definitionType === 'ALTERNATIVE') {\n      //  this.canAddItemUpdate.emit(false);\n        this.hiddenStateUpdate.emit(true);\n      } else {\n        this.canAddItemUpdate.emit(true);\n        this.hiddenStateUpdate.emit(false);\n      }\n      });\n    this.subscriptions.push(definitionSubscription);\n    const namesSubscription = this.substanceFormNamesService.substanceNames.subscribe(names => {\n\n      this.names = names;\n      this.filtered = names;\n      const searchSubscription = this.searchControl.valueChanges.subscribe(value => {\n        this.filterList(value, this.names, this.analyticsEventCategory);\n      }, error => {\n        console.log(error);\n      });\n      this.subscriptions.push(searchSubscription);\n      this.page = 0;\n      this.pageChange();\n    });\n    this.subscriptions.push(namesSubscription);\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n\n  collapse() {\n    this.expanded = !this.expanded;\n  }\n\n  standardize(): void {\n    // We currently only want the back-end to standardize names\n   // this.substanceFormNamesService.standardizeNames();\n  }\n\n  ngOnDestroy() {\n    this.componentDestroyed.emit();\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  addItem(): void {\n    this.addName();\n  }\n\n  addName(): void {\n    this.substanceFormNamesService.addSubstanceName();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-name-0`, 'center');\n    });\n  }\n\n  priorityUpdated(updatedName: SubstanceName): void {\n    this.names.forEach(name => {\n      if (name !== updatedName) {\n        name.displayName = false;\n      }\n    });\n  }\n\n  deleteName(name: SubstanceName): void {\n    this.substanceFormNamesService.deleteSubstanceName(name);\n  }\n\n}\n","<div class=\"name-orgs-content\">\n  <mat-accordion>\n    <mat-expansion-panel (closed)=\"panelClosed()\" (opened)=\"panelOpened()\">\n      <mat-expansion-panel-header class=\"name-orgs-header\">\n        <mat-panel-title [ngClass]=\"{'block-display': !isExpanded}\">\n          <h4 class=\"title\" matTooltip=\"Expand name orgs\">\n            Naming Organizations\n            <span [matBadge]=\"nameOrgs.length || 0\" matBadgeOverlap=\"false\" [hidden]=\"isExpanded\"></span>\n          </h4>\n          <button mat-icon-button (click)=\"addNewNameOrg($event)\" matTooltip=\"Add name org\" *ngIf=\"isExpanded\">\n            <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n          </button>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <div>\n        <table mat-table [dataSource]=\"tableData\">\n          <ng-container matColumnDef=\"delete\">\n            <th mat-header-cell *matHeaderCellDef> Delete </th>\n            <td mat-cell *matCellDef=\"let nameOrg\">\n              <button mat-icon-button (click)=\"deleteNameOrg(nameOrg)\" matTooltip=\"Delete name org\">\n                <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n              </button>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"nameOrg\">\n            <th mat-header-cell *matHeaderCellDef> Naming Organization </th>\n            <td mat-cell *matCellDef=\"let nameOrg\">\n              <mat-form-field class=\"name-org\">\n                <mat-select (selectionChange)=\"updateNameOrg($event, nameOrg)\" [value]=\"nameOrg.nameOrg\"\n                  [placeholder]=\"nameOrg.nameOrg ? '' : 'Naming Organization *'\">\n                  <mat-option *ngFor=\"let nameOrgOption of nameOrgOptions\" [value]=\"nameOrgOption.value\">\n                    {{nameOrgOption.display}}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"deprecated\">\n            <th mat-header-cell *matHeaderCellDef> Deprecated </th>\n            <td mat-cell *matCellDef=\"let nameOrg\">\n              <div class=\"checkbox-container\">\n                <mat-checkbox [checked]=\"nameOrg.deprecated\" (change)=\"updateDeprecated($event, nameOrg)\">Deprecated\n                </mat-checkbox>\n              </div>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n      </div>\n    </mat-expansion-panel>\n  </mat-accordion>\n</div>\n","import { Component, OnInit, Input, ElementRef } from '@angular/core';\nimport { SubstanceNameOrg } from '../../substance/substance.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { MatSelectChange } from '@angular/material/select';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'app-name-orgs',\n  templateUrl: './name-orgs.component.html',\n  styleUrls: ['./name-orgs.component.scss']\n})\nexport class NameOrgsComponent implements OnInit {\n  private privateNameOrgs: Array<SubstanceNameOrg>;\n  nameOrgOptions: Array<VocabularyTerm> = [];\n  displayedColumns: string[] = ['delete', 'nameOrg', 'deprecated'];\n  tableData: MatTableDataSource<SubstanceNameOrg>;\n  isExpanded = false;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() {\n    this.getVocabularies();\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('NAME_ORG').subscribe(response => {\n      this.nameOrgOptions = response['NAME_ORG'].list;\n    });\n  }\n\n  @Input()\n  set nameOrgs(nameOrgs: Array<SubstanceNameOrg>) {\n    this.privateNameOrgs = nameOrgs;\n    this.tableData = new MatTableDataSource<SubstanceNameOrg>(this.privateNameOrgs);\n  }\n\n  get nameOrgs(): Array<SubstanceNameOrg> {\n    return this.privateNameOrgs || [];\n  }\n\n  panelOpened(): void {\n    this.isExpanded = true;\n    const event: Event = new Event('focusin', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  panelClosed(): void {\n    this.isExpanded = false;\n    const event: Event = new Event('focusout', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  updateNameOrg(event: MatSelectChange, nameOrg: SubstanceNameOrg): void {\n    nameOrg.nameOrg = event.value;\n  }\n\n  updateDeprecated(event: MatCheckboxChange, nameOrg: SubstanceNameOrg): void {\n    nameOrg.deprecated = event.checked;\n  }\n\n  addNewNameOrg(event: Event): void {\n    event.stopPropagation();\n    this.privateNameOrgs.unshift({\n      nameOrg: this.nameOrgOptions[0].value\n    });\n    this.tableData.data = this.privateNameOrgs;\n  }\n\n  deleteNameOrg(nameOrg: SubstanceNameOrg): void {\n    const nameOrgIndex = this.privateNameOrgs.findIndex(privateNameOrg => privateNameOrg === nameOrg);\n    if (nameOrgIndex > -1) {\n      this.privateNameOrgs.splice(nameOrgIndex, 1);\n      this.tableData.data = this.privateNameOrgs;\n    }\n  }\n\n}\n","<div class=\"name-form-container\" [ngClass] = \"!viewFull? 'collapse':'name-form-container'\" >\n  <div *ngIf=\"name.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  \n  <div class=\"form-row\">\n    <div class=\"delete-container\">\n      <button mat-icon-button matTooltip=\"Delete name\" (click)=\"deleteName()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n    <div class=\"radio-container column-radio\">\n      <mat-radio-button name=\"priorityName\" value=\"true\" [checked]=\"name.displayName\" (change)=\"priorityUpdated($event)\"\n        matTooltip=\"Priority Name\">\n        PN\n      </mat-radio-button>\n    </div>\n    <div class=\"checkbox-container column-checkbox\">\n      <mat-checkbox [(ngModel)]=\"name.preferred\" matTooltip=\"Additional Listing Name\">\n        AL\n      </mat-checkbox>\n    </div>\n\n    <mat-form-field class=\"name\">\n      <textarea matInput placeholder=\"Name\" [(ngModel)]=\"name.name\" required name=\"name\" (keypress)=\"preventNewLine($event)\"></textarea>\n      <!-- <input matInput placeholder=\"Name\" [(ngModel)]=\"name.name\" required name=\"name\" /> -->\n    </mat-form-field>\n    <a class=\"resolve\" *ngIf=\"name.name && name.name.length > 0 && substanceType === 'structure'\"\n      (click)=\"resolve()\">resolve</a>\n\n    <app-cv-input required='true' class=\"name-type\" key=\"Name Type Code\" title=\"Type\" [model]=\"name.type\"\n      (valueChange)=\"name.type = $event\">\n    </app-cv-input>\n    <div>\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"name.access\">\n      </app-access-manager>\n    </div>\n    <div class = \"chevron\"><button mat-icon-button (click) = \"viewFull = !viewFull\" class = \"chevron-button\" matTooltip = \"Expand / collapse rows\">\n        <mat-icon *ngIf = \"viewFull\"svgIcon=\"chevron_up\"></mat-icon>\n        <mat-icon *ngIf = \"!viewFull\"svgIcon=\"chevron_down\"></mat-icon>\n\n    </button></div>\n  </div>\n  <div class = \"form-row\" *ngIf=\"showStd && viewFull\">\n    <mat-form-field class=\"name\">\n      <textarea matInput placeholder=\"Standardized Name\" [(ngModel)]=\"name.stdName\" matTooltip = \" standardized names will be generated upon submission if blank\" name=\"standardizedname\" (keypress)=\"preventNewLine($event)\"></textarea>\n      <!-- <input matInput placeholder=\"Name\" [(ngModel)]=\"name.name\" required name=\"name\" /> -->\n    </mat-form-field>\n  </div>\n  <div *ngIf=\"!name.$$deletedCode && viewFull\">\n    <div class=\"form-row\">\n      <app-tag-selector class=\"tags\" (tagsUpdate)=\"updateLanguages($event)\" [tags]=\"name.languages\" cvDomain=\"LANGUAGE\"\n        placeholder=\"Languages\">\n      </app-tag-selector>\n      <app-tag-selector class=\"domains\" (tagsUpdate)=\"updateDomains($event)\" [tags]=\"name.domains\"\n        cvDomain=\"NAME_DOMAIN\" placeholder=\"Domains\">\n      </app-tag-selector>\n      <app-tag-selector class=\"jurisdiction\" (tagsUpdate)=\"updateJurisdiction($event)\" [tags]=\"name.nameJurisdiction\"\n        cvDomain=\"JURISDICTION\" placeholder=\"Jurisdiction\">\n      </app-tag-selector>\n    </div>\n    \n    <div class=\"form-row\">\n      <div class=\"references-container\">\n        <app-domain-references [referencesUuids]=\"name.references\" #references></app-domain-references>\n      </div>\n    </div>\n    <div class=\"form-row\" *ngIf=\"name.type == 'of'\">\n      <div class=\"nameorgs-container\">\n        <app-name-orgs [nameOrgs]=\"getNameOrgs(name)\" #nameOrgs></app-name-orgs>\n      </div>\n    </div>\n      <app-audit-info [source] = \"name\"></app-audit-info>\n  </div>\n</div>","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { SubstanceName, SubstanceNameOrg } from '../../substance/substance.model';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, Validators } from '@angular/forms';\nimport { MatRadioChange } from '@angular/material/radio';\nimport { UtilsService } from '../../utils/utils.service';\nimport { Subscription } from 'rxjs';\nimport {NameResolverDialogComponent} from '@gsrs-core/name-resolver/name-resolver-dialog.component';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {MatDialog} from '@angular/material/dialog';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\nimport { SubstanceFormNamesService } from '@gsrs-core/substance-form/names/substance-form-names.service';\n\n@Component({\n  selector: 'app-name-form',\n  templateUrl: './name-form.component.html',\n  styleUrls: ['./name-form.component.scss']\n})\nexport class NameFormComponent implements OnInit, OnDestroy {\n  private privateName: SubstanceName;\n  @Output() priorityUpdate = new EventEmitter<SubstanceName>();\n  @Output() nameDeleted = new EventEmitter<SubstanceName>();\n  nameControl = new FormControl('');\n  nameTypeControl = new FormControl('');\n  deleteTimer: any;\n  private subscriptions: Array<Subscription> = [];\n  overlayContainer: HTMLElement;\n  substanceType = '';\n  viewFull = true;\n  showStd = false;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private utilsService: UtilsService,\n    private dialog: MatDialog,\n    private substanceFormService: SubstanceFormService,\n    private overlayContainerService: OverlayContainer,\n    private nameFormService: SubstanceFormNamesService\n  ) { }\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n    const definition = this.substanceFormService.definition.subscribe(def => {\n      this.substanceType = def.substanceClass;\n    });\n    definition.unsubscribe();\n\n\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  @Input()\n  set show(val: boolean) {\n    if (val != null) {\n     this.viewFull = val;\n    }\n  }\n\n  get show(): boolean {\n    return this.viewFull || null;\n  }\n\n  @Input()\n  set standardized(val: boolean) {\n    if (val != null) {\n     this.showStd = val;\n    }\n  }\n\n  get standardized(): boolean {\n    return this.showStd;\n  }\n\n  @Input()\n  set name(name: SubstanceName) {\n    if (name != null) {\n      this.privateName = name;\n      if (!this.privateName.languages || this.privateName.languages.length === 0) {\n        this.privateName.languages = ['en'];\n      }\n      if (!this.privateName.type) {\n        this.privateName.type = 'cn';\n      }\n    }\n  }\n\n  get name(): SubstanceName {\n    return this.privateName || {};\n  }\n\n  priorityUpdated(event: MatRadioChange) {\n    this.privateName.displayName = (event.value === 'true');\n    this.priorityUpdate.emit(this.privateName);\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.privateName.access = access;\n  }\n\n  updateLanguages(languages: Array<string>): void {\n    this.privateName.languages = languages;\n  }\n\n  updateDomains(domains: Array<string>): void {\n    this.privateName.domains = domains;\n  }\n\n  updateJurisdiction(jurisdiction: Array<string>): void {\n    this.privateName.nameJurisdiction = jurisdiction;\n  }\n\n  deleteName(): void {\n    this.privateName.$$deletedCode = this.utilsService.newUUID();\n\n    if (!this.privateName.name\n      && !this.privateName.type\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.nameDeleted.emit(this.privateName);\n      }, 2000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateName.$$deletedCode;\n  }\n\n  resolve(): void {\n    const dialogRef = this.dialog.open(NameResolverDialogComponent, {\n      height: 'auto',\n      width: '800px',\n      data: {'name': this.privateName.name}\n    });\n    this.overlayContainer.style.zIndex = '1002';\n    dialogRef.afterClosed().subscribe((molfile?: string) => {\n      this.overlayContainer.style.zIndex = null;\n      if (molfile != null && molfile !== '') {\n        this.substanceFormService.resolvedName(molfile);\n      }\n    }, () => {});\n  }\n\n  getNameOrgs(name: SubstanceName): Array<SubstanceNameOrg> {\n    if (!name.nameOrgs) {\n      name.nameOrgs = [];\n    }\n    return name.nameOrgs as Array<SubstanceNameOrg>;\n  }\n\n  preventNewLine(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubstanceFormNamesCardComponent } from './substance-form-names-card.component';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport { NameFormComponent } from './name-form.component';\nimport { NameOrgsComponent } from './name-orgs.component';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormNamesCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    MatRadioModule,\n    MatCheckboxModule,\n    MatExpansionModule,\n    MatTableModule,\n    MatBadgeModule,\n    MatSelectModule,\n    MatTooltipModule\n  ],\n  declarations: [\n    SubstanceFormNamesCardComponent,\n    NameFormComponent,\n    NameOrgsComponent\n  ]\n})\nexport class SubstanceFormNamesModule { }\n"],"sourceRoot":"webpack:///","file":"8635.6cb47ad6082203bf.js"}