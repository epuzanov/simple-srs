{"version":3,"mappings":"mSAOIA,2CACAA,4DAKEA,kBAA8DA,iCAASC,sBACrED,2BAAcA,mEAAUE,oBACtBF,SACFA,QACFA,kCAH8DA,0CAC1DA,mCCJH,IAAMG,EAAb,eAAaA,EAAb,WAQE,WACUC,EACAC,MAAmBC,aADnBC,iBACAA,eARVA,mBAA+B,GACrBA,eAAY,IAAIC,MAG1BD,qBAAkB,IAAIE,KAAU,IANlC,uCAaE,cAbF,6BAeE,cAfF,kBA4BE,WACE,OAAOF,KAAKG,eA7BhBC,IAiBE,SACWC,GACK,MAAVA,GACFL,KAAKG,cAAgBE,EACrBL,KAAKM,oBAELN,KAAKG,cAAgB,GACrBH,KAAKM,qBAxBX,6BAgCE,WAAe,WACbN,KAAKH,UAAUU,oBAAoB,gBAAgBC,UAAU,YAC3D,IAAMC,EAAgBC,EAASC,aAAgBC,KAC/CC,EAAKC,sBAAsBL,GAC3BI,EAAKJ,cAAgBA,EACrBI,EAAKE,yBArCX,mCAyCU,WAA+D,IAAzCN,EAAyCO,uDAAF,GAC7DC,EAAa,GACnBR,EAAcS,QAAQ,YACpBD,EAAME,EAAaC,OAAS,IAAIC,OAElCrB,KAAKsB,gBAAkB,IAAIpB,KAAUe,KA9CzC,gCAiDU,WAAkB,WACxBjB,KAAKuB,eAAiB,qBAElBvB,KAAKG,cAAcqB,OAAS,GAC9BxB,KAAKG,cAAce,QAAQ,YACzB,QAASO,EAAI,EAAGA,EAAIZ,EAAKJ,cAAce,OAAQC,IAC7C,GAAIN,IAAiBN,EAAKJ,cAAcgB,GAAGL,MAAO,CAChDP,EAAKS,gBAAgBI,SAASP,GAAcQ,UAAS,GACrDd,EAAKU,gBAAmBV,EAAKJ,cAAcgB,GAAGG,QAAU,KACxD,SAIN5B,KAAKuB,eAAiBvB,KAAKuB,eAAeM,QAAQ,QAAS,KAE3D7B,KAAKuB,gBAAkB,WAhE7B,0BAoEE,SAAaO,EAA0BX,GAMrC,GAJkC,IAA9BnB,KAAKG,cAAcqB,SACrBxB,KAAKuB,eAAiBvB,KAAKuB,eAAeM,QAAQ,SAAU,KAG1DC,EAAMC,QACR/B,KAAKG,cAAc6B,KAAKb,EAAaC,OAEjCpB,KAAKG,cAAcqB,OAAS,IAC9BxB,KAAKuB,gBAAkB,MAGzBvB,KAAKuB,gBAAmBJ,EAAaS,YAEhC,CAEL,IAAMK,EAAgBjC,KAAKG,cAAc+B,QAAQf,EAAaC,OAE1Da,GAAgB,GAClBjC,KAAKG,cAAcgC,OAAOF,EAAe,GAG3CjC,KAAKuB,eAAiBvB,KAAKuB,eAAeM,QAAQV,EAAaS,QAAS,IACrEC,QAAQ,OAAQ,MAChBA,QAAQ,MAAO,KACfA,QAAQ,KAAM,IACdA,QAAQ,QAAS,IAEc,IAA9B7B,KAAKG,cAAcqB,SACrBxB,KAAKuB,gBAAkB,UAI3BvB,KAAKoC,UAAUC,KAAKrC,KAAKG,iBAtG7B,wBAyGE,WACE,IAAM2B,EAAe,IAAIQ,MAAM,UAAW,CAAEC,SAAS,EAAMC,YAAY,IACvExC,KAAKF,QAAQ2C,cAAcC,cAAcZ,KA3G7C,wBA8GE,WACE,IAAMA,EAAe,IAAIQ,MAAM,WAAY,CAAEC,SAAS,EAAMC,YAAY,IACxExC,KAAKF,QAAQ2C,cAAcC,cAAcZ,OAhH7Ca,kDAAa/C,GAAsBH,kDAAtBG,EAAsBgD,giBDXnCnD,iBACEA,oBAIEA,qCAAcoD,gBAAdpD,CAA2B,+BACboD,iBACdpD,4BACAA,4BACAA,gBAAMA,SAA0BA,QAClCA,QACAA,wBACEA,kBACEA,uBAKFA,QACFA,QACFA,6BAjBIA,sCAAgC,+BAINA,uCACKA,wCACzBA,yCAGAA,8CACwCA,mMCFrCG,EAAb,mICVEH,iBAA+CA,eAAoBA,uBAAWA,QAAKA,SAAsBA,6BAAtBA,qEACnFA,iBAA6CA,eAAoBA,cAAEA,QAAKA,yBAAmCA,6BAAnCA,mFACxEA,iBAAqEA,aAAGA,aAACA,QAAKA,kCAC9EA,iBAAkDA,eAAoBA,0BAAcA,QAAIA,SAA2BA,6BAA3BA,yEACxFA,iBAAgDA,eAAoBA,cAAEA,QAAKA,yBAAsCA,6BAAtCA,yFAL7EA,iBACEA,uBACAA,uBACAA,uBACAA,uBACAA,uBACFA,4BALuBA,0CACAA,wCACEA,6DACFA,6CACAA,4CCEhB,IAAMqD,EAAb,eAAaA,EAAb,WAEE,6BAFF,uCAIE,gBAJFC,kDAAaD,8BAAkBF,uSDP/BnD,4BAAgCA,+fCOnBqD,EAAb,4dCwBQrD,kBACEA,SACFA,4BADEA,iFAUAA,eACEA,SACFA,gCADEA,yDAFJA,kBACEA,wBAGFA,4BAH0BA,oCC1B3B,IAAMuD,EAAb,eAAaA,EAAb,WAUE,WACUnD,EACAoD,EACAC,EACAC,EACAC,EACAC,GAA0C,2BAL1CrD,iBACAA,cACAA,oBACAA,wBACAA,+BACAA,4BAdAA,iBAAc,IAAIC,MACpBD,mBAAqC,GAI7CA,YAAS,GACTA,gBAAqB,EAUnBA,KAAKmD,iBAAiBG,eAAe9C,UAAW,YAC9C+C,EAAKC,UAAYC,IAnBvB,uCAwBE,WACEzD,KAAK0D,iBAAmB1D,KAAKoD,wBAAwBO,wBAzBzD,2BA4BE,WACE3D,KAAKwD,WAAaxD,KAAKwD,UACvBxD,KAAKmD,iBAAiBG,eAAeM,KAAK5D,KAAKwD,WAC/CxD,KAAKmD,iBAAiBU,eAAeD,KAAK5D,KAAK8D,QA/BnD,8BAkCE,WAAgB,WAET9D,KAAK8D,KAAKC,SACb/D,KAAK8D,KAAKC,OAAS,GACI,cAAnB/D,KAAK8D,KAAKE,OACZhE,KAAK8D,KAAKC,OAAS,CACjBC,KAAM,2BACNC,MAAO,iBAIb,IAAMC,EAAYlE,KAAKiD,OAAOkB,KAAKC,IAA2B,CAC5DX,KAAM,CAAEY,WAAcrE,KAAK8D,KAAKC,QAChCO,MAAO,WAETtE,KAAK0D,iBAAiBa,MAAMC,OAAS,OAErC,IAAMC,EAAqBP,EAAUQ,cAAclE,UAAU,YAC3DmE,EAAKjB,iBAAiBa,MAAMC,OAAS,KACrCG,EAAKb,KAAKC,OAASa,IAGrB5E,KAAK6E,cAAc7C,KAAKyC,KAxD5B,2BA2DE,SAAcK,GACZ,OAAO9E,KAAKkD,aAAa6B,cAAcD,KA5D3C,mCA+DE,SAAsBhD,GACpB,IAAMkD,EAAShF,KAAKkD,aAAa+B,yBAAyBnD,GAC1D9B,KAAKkF,OAASF,EAAOG,QACM,IAAvBnF,KAAKkF,OAAO1D,gBACPwD,EAAOG,QACdnF,KAAK8D,KAAKsB,cAAgBJ,KApEhC,uBAwEE,WACEhF,KAAK8D,KAAKuB,cAAgBrF,KAAKkD,aAAaoC,UAC5CtF,KAAKuF,YAAYlD,KAAKrC,KAAK8D,UA1E/B0B,kDAAaxC,GAA2BvD,+FAA3BuD,EAA2BJ,ssCDhBtCnD,iBACEA,iBACEA,oBAAgDA,gCAASoD,gBACvDpD,sBACFA,QACFA,QACEA,iBACFA,iBACAA,iBAAKA,gCAASoD,oBAAdpD,QACAA,QAGAA,iBACAA,iBACEA,0BAA0EA,uDAA0DA,QACpIA,8BACEA,qBAAoCA,0DAApCA,QACFA,QACAA,8BACEA,qBAA+CA,oEAA/CA,QACFA,QACFA,QAEAA,mBACEA,mBACEA,mBACEA,qBACFA,QACAA,sBAAyCA,gCAAUoD,uBACjDpD,wBACFA,QACAA,yBAGFA,QACAA,mBACEA,8BACEA,sBAAWA,yBAAYA,QACvBA,wBAA+EA,yCAAmBoD,6BAClGpD,+BACFA,QACAA,yBAKFA,QACFA,QACEA,QACAA,QACFA,QACAA,mBACIA,8BACJA,eA7CyEA,0FAMuCA,oCAExEA,uCAGWA,iDAYzCA,qCAOmCA,sDAGTA,mDAWhBA,g7FCpCXuD,EAAb,wBCbIvD,8BAAkCA,wDAFpCA,iBACEA,sCAAwCA,wDAAegG,eAAoBhG,QAC3EA,+BACFA,2CAH8HA,iDAClGA,yBACwBA,2BCU/C,IAAMiG,EAAb,eAAaA,EAAb,0CAKE,WACUC,EACAC,EACDC,GAAiC,6BAExCC,cAAMD,IAJEF,sCACAG,oBACDA,cALDA,gBAAqC,GAQ3CA,EAAKC,uBAAyB,kCAHUD,EAR5C,uCAcE,WACE9F,KAAKgG,gBAAgB3D,KAAK,sBAf9B,6BAkBE,WAAe,WACP4D,EAAyBjG,KAAK2F,oCAAoCO,cAAc1F,UAAU,YAC9F2F,EAAKC,gBAAkBA,IAEzBpG,KAAK6E,cAAc7C,KAAKiE,KAtB5B,yBAyBE,WACEjG,KAAK6E,cAAc3D,QAAQ,YACzBmF,EAAaC,kBA3BnB,uBA+BE,SAAUxC,GACR9D,KAAK2F,oCAAoCY,mBAAmBzC,OAhChEa,GAA+D6B,kDAAlDd,GAAyCjG,2DAAzCiG,EAAyC9C,gYDbtDnD,iBACEA,uBAIFA,eAJyDA,ixBCY5CiG,EAAb,cCwBae,YAAb,eAAaA,KAAb1G,iFAAa0G,4DApBF,CACPC,KACAC,cAAsCjB,GACtCkB,IACAC,IACAC,KACAC,KACAC,IACAC,KACAC,KACAC,KACAC,KACAC,IACAC,QAOSb,EAAb","names":["i0","$event","ctx_r6","AccessManagerComponent","cvService","element","A","this","EventEmitter","FormGroup","privateAccess","set","access","getVocabularies","getDomainVocabulary","subscribe","accessOptions","response","ACCESS_GROUP","list","t","createAccessFromGroup","crosscheckAccesses","arguments","group","forEach","accessOption","value","FormControl","accessFormGroup","tooltipMessage","length","i","controls","setValue","display","replace","event","checked","push","indexToRemove","indexOf","splice","accessOut","emit","Event","bubbles","cancelable","nativeElement","dispatchEvent","h","selectors","ctx","AuditInfoComponent","g","StructuralUnitFormComponent","dialog","utilsService","substanceService","overlayContainerService","substanceFormService","showImagePopup","D","hidePopup","data","overlayContainer","getContainerElement","next","imagePopupUnit","unit","amount","type","units","dialogRef","open","AmountFormDialogComponent","subsAmount","width","style","zIndex","dialogSubscription","afterClosed","o","newAmount","subscriptions","amt","displayAmount","result","sruDisplayToConnectivity","errors","$errors","attachmentMap","$$deletedCode","newUUID","unitDeleted","u","ctx_r5","SubstanceFormStructuralUnitsCardComponent","substanceFormStructuralUnitsService","scrollToService","gaService","v","analyticsEventCategory","menuLabelUpdate","structuralSubscription","substanceSRUs","l","structuralUnits","subscription","unsubscribe","deleteSubstanceSRU","SubstanceCardBaseFilteredList","SubstanceFormStructuralUnitsModule","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceImageModule"],"sources":["./src/app/core/substance-form/access-manager/access-manager.component.html","./src/app/core/substance-form/access-manager/access-manager.component.ts","./src/app/core/substance-form/audit-info/audit-info.component.html","./src/app/core/substance-form/audit-info/audit-info.component.ts","./src/app/core/substance-form/structural-units/structural-unit-form.component.html","./src/app/core/substance-form/structural-units/structural-unit-form.component.ts","./src/app/core/substance-form/structural-units/substance-form-structural-units-card.component.html","./src/app/core/substance-form/structural-units/substance-form-structural-units-card.component.ts","./src/app/core/substance-form/structural-units/substance-form-structural-units.module.ts"],"sourcesContent":["<div class=\"menu-container\">\r\n  <button\r\n    mat-button\r\n    [matMenuTriggerFor]=\"accessMenu\"\r\n    [matTooltip]=\"tooltipMessage\"\r\n    (menuOpened)=\"menuOpened()\"\r\n    (menuClosed)=\"menuClosed()\">\r\n    <mat-icon svgIcon=\"lock\" *ngIf=\"access.length\"></mat-icon>\r\n    <mat-icon svgIcon=\"lock_open\" *ngIf=\"!access.length\"></mat-icon>\r\n    <span>{{label? label: \"Access\"}}</span>\r\n  </button>\r\n  <mat-menu #accessMenu=\"matMenu\" xPosition=\"before\">\r\n    <form [formGroup]=\"accessFormGroup\">\r\n      <div mat-menu-item *ngFor=\"let accessOption of accessOptions\" (click)=\"$event.stopPropagation()\">\r\n        <mat-checkbox (change)=\"updateAccess($event, accessOption)\" [formControlName]=\"accessOption.value\">\r\n          {{accessOption.display}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </form>\r\n  </mat-menu>\r\n</div>","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'app-access-manager',\n  templateUrl: './access-manager.component.html',\n  styleUrls: ['./access-manager.component.scss']\n})\nexport class AccessManagerComponent implements OnInit, AfterViewInit {\n  accessOptions: Array<VocabularyTerm>;\n  privateAccess: Array<string> = [];\n  @Output() accessOut = new EventEmitter<Array<string>>();\n  tooltipMessage: string;\n  @Input() label?: string;\n  accessFormGroup = new FormGroup({});\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {}\n\n  @Input()\n  set access(access: Array<string>) {\n    if (access != null) {\n      this.privateAccess = access;\n      this.getVocabularies();\n    } else {\n      this.privateAccess = [];\n      this.getVocabularies();\n    }\n  }\n\n  get access(): Array<string> {\n    return this.privateAccess;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('ACCESS_GROUP').subscribe(response => {\n      const accessOptions = response['ACCESS_GROUP'].list;\n      this.createAccessFromGroup(accessOptions);\n      this.accessOptions = accessOptions;\n      this.crosscheckAccesses();\n    });\n  }\n\n  private createAccessFromGroup(accessOptions: Array<VocabularyTerm> = []): void {\n    const group: any = {};\n    accessOptions.forEach(accessOption => {\n      group[accessOption.value] = new FormControl();\n    });\n    this.accessFormGroup = new FormGroup(group);\n  }\n\n  private crosscheckAccesses() {\n    this.tooltipMessage = 'Access is set to: ';\n\n    if (this.privateAccess.length > 0) {\n      this.privateAccess.forEach(accessOption => {\n        for (let i = 0; i < this.accessOptions.length; i++) {\n          if (accessOption === this.accessOptions[i].value) {\n            this.accessFormGroup.controls[accessOption].setValue(true);\n            this.tooltipMessage += (this.accessOptions[i].display + ', ');\n            break;\n          }\n        }\n      });\n      this.tooltipMessage = this.tooltipMessage.replace(/(, )$/, '');\n    } else {\n      this.tooltipMessage += 'public';\n    }\n  }\n\n  updateAccess(event: MatCheckboxChange, accessOption: VocabularyTerm): void {\n\n    if (this.privateAccess.length === 0) {\n      this.tooltipMessage = this.tooltipMessage.replace('public', '');\n    }\n\n    if (event.checked) {\n      this.privateAccess.push(accessOption.value);\n\n      if (this.privateAccess.length > 1) {\n        this.tooltipMessage += ', ';\n      }\n\n      this.tooltipMessage += (accessOption.display);\n\n    } else {\n\n      const indexToRemove = this.privateAccess.indexOf(accessOption.value);\n\n      if (indexToRemove > -1) {\n        this.privateAccess.splice(indexToRemove, 1);\n      }\n\n      this.tooltipMessage = this.tooltipMessage.replace(accessOption.display, '')\n        .replace(': , ', ': ')\n        .replace(', ,', ',')\n        .replace(/,$/, '')\n        .replace(/(, )$/, '');\n\n      if (this.privateAccess.length === 0) {\n        this.tooltipMessage += 'public';\n      }\n    }\n\n    this.accessOut.emit(this.privateAccess);\n  }\n\n  menuOpened(): void {\n    const event: Event = new Event('focusin', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  menuClosed(): void {\n    const event: Event = new Event('focusout', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n}\n","<div class = 'audit-container' *ngIf = \"source\">\n  <div class = \"name\" *ngIf = 'source.createdBy'><b class = 'static'>Created By:</b> {{ source.createdBy}} </div>\n  <div class = \"date\" *ngIf = 'source.created'><b class = 'static'>on</b> {{ source.created | date:'medium'}}</div>\n  <div class = \"spacer\" *ngIf = 'source.created && source.lastEdited'> <b>-</b> </div>\n  <div class = \"name\" *ngIf = 'source.lastEditedBy'><b class = 'static'>Last Edited By</b>: {{ source.lastEditedBy}} </div>\n  <div class = \"date\" *ngIf = 'source.lastEdited'><b class = 'static'>on</b> {{ source.lastEdited | date:'medium'}}</div>\n</div>\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-audit-info',\n  templateUrl: './audit-info.component.html',\n  styleUrls: ['./audit-info.component.scss']\n})\nexport class AuditInfoComponent implements OnInit {\n  @Input() source: any;\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n}\n","  <div class = \"unit-form-container\">\n    <div class=\"delete-container\">\n      <button mat-icon-button matTooltip=\"Delete SRU\" (click)=\"deleteSRU()\">\n        <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n      </button>\n    </div>\n      <div class = \"form-row full\">\n    <div class=\"flex-column related-substance\">\n    <img (click)=\"showHidePopup()\" class = \"related-image\" appSubstanceImage [entityId]=\"unit && (unit.uuid || (unit._structure && unit._structure.id))\">\n    </div>\n\n\n    <div class = \"form-container\">\n    <div class = \"inner-row-top\">\n      <app-cv-input domain=\"POLYMER_SRU_TYPE\" class = \"type\" title = \"SRU Type\" (valueChange)= \"unit.type = $event\" [model] = \"unit.type\"></app-cv-input>\n      <mat-form-field class=\"label\">\n        <input matInput placeholder=\"Label\" [(ngModel)]=\"unit.label\" required name=\"label\" />\n      </mat-form-field>\n      <mat-form-field class=\"attachment-count\">\n        <input matInput placeholder=\"attachment count\" [(ngModel)]=\"unit.attachmentCount\" required name=\"attachment count\" disabled />\n      </mat-form-field>\n    </div>\n\n    <div class = \"inner-row-bottom\">\n      <div class = 'amount' >\n        <div class = \"label padded\">\n          Amount\n        </div>\n        <button mat-icon-button matTooltip=\"add\" (click)=\"(openAmountDialog())\">\n          <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n        </button>\n        <div *ngIf = \"unit.amount\" class = \"amount-display\">\n          {{displayAmount(unit.amount)}}\n        </div>\n      </div>\n      <div class = \"connectivity-container\">\n        <mat-form-field class = \"connectivity\">\n          <mat-label>Connectivity</mat-label>\n          <textarea matInput cdkTextareaAutosize [ngModel] = \"unit._displayConnectivity\" (ngModelChange) = \"displayToConnectivity($event)\">\n          </textarea>\n        </mat-form-field>\n        <div class = \"error-container\" *ngIf = \"errors && errors.length > 0\">\n          <div *ngFor =\"let error of errors\">\n            {{error.text}}\n          </div>\n        </div>\n      </div>\n    </div>\n      </div>\n      </div>\n    </div>\n    <div class = \"form-row\">\n        <app-audit-info [source] = \"unit\"></app-audit-info>\n    </div>\n\n\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AmountFormDialogComponent } from '@gsrs-core/substance-form/amount-form-dialog/amount-form-dialog.component';\nimport { Subscription } from 'rxjs';\nimport { ControlledVocabularyService } from '@gsrs-core/controlled-vocabulary';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UtilsService } from '@gsrs-core/utils';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { SubstanceFormService } from '@gsrs-core/substance-form/substance-form.service';\nimport { StructuralUnit, SubstanceCode, SubstanceService } from '@gsrs-core/substance';\nimport { SafeUrl } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-structural-unit-form',\n  templateUrl: './structural-unit-form.component.html',\n  styleUrls: ['./structural-unit-form.component.scss']\n})\nexport class StructuralUnitFormComponent implements OnInit {\n  @Input() unit: StructuralUnit;\n  @Output() unitDeleted = new EventEmitter<StructuralUnit>();\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n  substanceType: string;\n  errors = [];\n  hidePopup: boolean = false;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private substanceService: SubstanceService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { \n    this.substanceService.showImagePopup.subscribe (data => {\n      this.hidePopup = data;\n    })\n  }\n\n\n  ngOnInit() {\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  showHidePopup(): void {\n    this.hidePopup = !this.hidePopup;\n    this.substanceService.showImagePopup.next(this.hidePopup);\n    this.substanceService.imagePopupUnit.next(this.unit);\n  }\n\n  openAmountDialog(): void {\n\n    if (!this.unit.amount) {\n      this.unit.amount = {};\n      if (this.unit.type === 'SRU-BLOCK') {\n        this.unit.amount = {\n          type: 'DEGREE OF POLYMERIZATION',\n          units: 'per polymer'\n        };\n      }\n    }\n    const dialogRef = this.dialog.open(AmountFormDialogComponent, {\n      data: { 'subsAmount': this.unit.amount },\n      width: '1040px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newAmount => {\n      this.overlayContainer.style.zIndex = null;\n      this.unit.amount = newAmount;\n\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  displayAmount(amt): string {\n    return this.utilsService.displayAmount(amt);\n  }\n\n  displayToConnectivity(event: any) {\n    const result = this.utilsService.sruDisplayToConnectivity(event);\n    this.errors = result.$errors;\n    if (this.errors.length === 0) {\n      delete result.$errors;\n      this.unit.attachmentMap = result;\n    }\n  }\n\n  deleteSRU(): void {\n    this.unit.$$deletedCode = this.utilsService.newUUID();\n    this.unitDeleted.emit(this.unit);\n  }\n\n}\n\n\n\n","<div class=\"responsive\">\n  <div class = \"alternate-backgrounds\"  *ngFor=\"let unit of structuralUnits; last as isLast; index as index\"  appScrollToTarget [id]=\"'substance-structural-unit-' + index\" >\n    <app-structural-unit-form [unit]=\"unit\" (unitDeleted)=\"deleteSRU($event)\" ></app-structural-unit-form>\n    <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n  </div>\n</div>\n\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SubstanceCardBaseFilteredList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {StructuralUnit} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\nimport { SubstanceFormStructuralUnitsService } from './substance-form-structural-units.service';\n\n@Component({\n  selector: 'app-substance-form-structural-units-card',\n  templateUrl: './substance-form-structural-units-card.component.html',\n  styleUrls: ['./substance-form-structural-units-card.component.scss']\n})\nexport class SubstanceFormStructuralUnitsCardComponent extends SubstanceCardBaseFilteredList<StructuralUnit>\n  implements OnInit, AfterViewInit, OnDestroy {\n  structuralUnits: Array<StructuralUnit>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormStructuralUnitsService: SubstanceFormStructuralUnitsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form structural units';\n  }\n\n  ngOnInit() {\n    this.menuLabelUpdate.emit('Structural Units');\n  }\n\n  ngAfterViewInit() {\n    const structuralSubscription = this.substanceFormStructuralUnitsService.substanceSRUs.subscribe(structuralUnits => {\n      this.structuralUnits = structuralUnits;\n    });\n    this.subscriptions.push(structuralSubscription);\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n\n  deleteSRU(unit: StructuralUnit): void {\n    this.substanceFormStructuralUnitsService.deleteSubstanceSRU(unit);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {DynamicComponentLoaderModule} from '@gsrs-core/dynamic-component-loader';\nimport {SubstanceFormModule} from '@gsrs-core/substance-form/substance-form.module';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ScrollToModule} from '@gsrs-core/scroll-to';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatInputModule} from '@angular/material/input';\nimport {SubstanceFormStructuralUnitsCardComponent} from '@gsrs-core/substance-form/structural-units/substance-form-structural-units-card.component';\nimport { StructuralUnitFormComponent } from './structural-unit-form.component';\nimport { SubstanceImageModule } from '@gsrs-core/substance/substance-image.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormStructuralUnitsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceImageModule\n  ],\n  declarations: [\n    SubstanceFormStructuralUnitsCardComponent,\n    StructuralUnitFormComponent\n  ]\n})\nexport class SubstanceFormStructuralUnitsModule { }\n"],"sourceRoot":"webpack:///","file":"8820.a68c23ac55eb7f3a.js"}