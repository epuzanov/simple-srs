{"version":3,"mappings":"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","names":["i0","$event","ctx_r6","AccessManagerComponent","cvService","element","O","this","EventEmitter","FormGroup","privateAccess","set","access","getVocabularies","getDomainVocabulary","subscribe","accessOptions","response","ACCESS_GROUP","list","i","createAccessFromGroup","crosscheckAccesses","arguments","group","forEach","accessOption","value","FormControl","accessFormGroup","tooltipMessage","length","controls","setValue","display","replace","event","checked","push","indexToRemove","indexOf","splice","accessOut","emit","Event","bubbles","cancelable","nativeElement","dispatchEvent","h","selectors","ctx","ctx_r2","AgentModificationFormComponent","dialog","utilsService","overlayContainerService","substanceFormService","overlayContainer","getContainerElement","privateMod","mod","agentSubstance","relatedSubstanceUuid","refuuid","n","modTypeList","AGENT_MODIFICATION_TYPE","modProcessList","AGENT_MODIFICATION_PROCESS","modRoleList","ROLE","$$deletedCode","newUUID","deleteTimer","setTimeout","modDeleted","clearTimeout","amount","dialogRef","open","AmountFormDialogComponent","data","subsAmount","width","style","zIndex","dialogSubscription","afterClosed","newAmount","subscriptions","agentModificationProcess","substance","refPname","_name","name","uuid","substanceClass","approvalID","amt","displayAmount","v","p","ctx_r8","SubstanceFormAgentModificationsCardComponent","substanceFormAgentModificationsService","scrollToService","gaService","_","analyticsEventCategory","menuLabelUpdate","canAddItemUpdate","agentSubscription","substanceAgentModifications","d","modifications","subscription","unsubscribe","componentDestroyed","addStructuralModification","addSubstanceAgentModification","scrollToElement","modification","deleteSubstanceAgentModification","SubstanceCardBaseFilteredList","SubstanceFormAgentModificationsModule","CommonModule","DynamicComponentLoaderModule","SubstanceFormModule","MatDividerModule","MatIconModule","MatButtonModule","ScrollToModule","MatFormFieldModule","ReactiveFormsModule","FormsModule","MatPaginatorModule","MatInputModule","SubstanceSelectorModule","AuditInfoComponent","f"],"sources":["./src/app/core/substance-form/access-manager/access-manager.component.html","./src/app/core/substance-form/access-manager/access-manager.component.ts","./src/app/core/substance-form/agent-modifications/agent-modification-form.component.html","./src/app/core/substance-form/agent-modifications/agent-modification-form.component.ts","./src/app/core/substance-form/agent-modifications/substance-form-agent-modifications-card.component.html","./src/app/core/substance-form/agent-modifications/substance-form-agent-modifications-card.component.ts","./src/app/core/substance-form/agent-modifications/substance-form-agent-modifications.module.ts","./src/app/core/substance-form/audit-info/audit-info.component.html","./src/app/core/substance-form/audit-info/audit-info.component.ts"],"sourcesContent":["<div class=\"menu-container\">\r\n  <button\r\n    mat-button\r\n    [matMenuTriggerFor]=\"accessMenu\"\r\n    [matTooltip]=\"tooltipMessage\"\r\n    (menuOpened)=\"menuOpened()\"\r\n    (menuClosed)=\"menuClosed()\">\r\n    <mat-icon svgIcon=\"lock\" *ngIf=\"access.length\"></mat-icon>\r\n    <mat-icon svgIcon=\"lock_open\" *ngIf=\"!access.length\"></mat-icon>\r\n    <span>{{label? label: \"Access\"}}</span>\r\n  </button>\r\n  <mat-menu #accessMenu=\"matMenu\" xPosition=\"before\">\r\n    <form [formGroup]=\"accessFormGroup\">\r\n      <div mat-menu-item *ngFor=\"let accessOption of accessOptions\" (click)=\"$event.stopPropagation()\">\r\n        <mat-checkbox (change)=\"updateAccess($event, accessOption)\" [formControlName]=\"accessOption.value\">\r\n          {{accessOption.display}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </form>\r\n  </mat-menu>\r\n</div>","import { Component, OnInit, Input, AfterViewInit, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { ControlledVocabularyService } from '../../controlled-vocabulary/controlled-vocabulary.service';\nimport { VocabularyTerm } from '../../controlled-vocabulary/vocabulary.model';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'app-access-manager',\n  templateUrl: './access-manager.component.html',\n  styleUrls: ['./access-manager.component.scss']\n})\nexport class AccessManagerComponent implements OnInit, AfterViewInit {\n  accessOptions: Array<VocabularyTerm>;\n  privateAccess: Array<string> = [];\n  @Output() accessOut = new EventEmitter<Array<string>>();\n  tooltipMessage: string;\n  @Input() label?: string;\n  accessFormGroup = new FormGroup({});\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private element: ElementRef\n  ) { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {}\n\n  @Input()\n  set access(access: Array<string>) {\n    if (access != null) {\n      this.privateAccess = access;\n      this.getVocabularies();\n    } else {\n      this.privateAccess = [];\n      this.getVocabularies();\n    }\n  }\n\n  get access(): Array<string> {\n    return this.privateAccess;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('ACCESS_GROUP').subscribe(response => {\n      const accessOptions = response['ACCESS_GROUP'].list;\n      this.createAccessFromGroup(accessOptions);\n      this.accessOptions = accessOptions;\n      this.crosscheckAccesses();\n    });\n  }\n\n  private createAccessFromGroup(accessOptions: Array<VocabularyTerm> = []): void {\n    const group: any = {};\n    accessOptions.forEach(accessOption => {\n      group[accessOption.value] = new FormControl();\n    });\n    this.accessFormGroup = new FormGroup(group);\n  }\n\n  private crosscheckAccesses() {\n    this.tooltipMessage = 'Access is set to: ';\n\n    if (this.privateAccess.length > 0) {\n      this.privateAccess.forEach(accessOption => {\n        for (let i = 0; i < this.accessOptions.length; i++) {\n          if (accessOption === this.accessOptions[i].value) {\n            this.accessFormGroup.controls[accessOption].setValue(true);\n            this.tooltipMessage += (this.accessOptions[i].display + ', ');\n            break;\n          }\n        }\n      });\n      this.tooltipMessage = this.tooltipMessage.replace(/(, )$/, '');\n    } else {\n      this.tooltipMessage += 'public';\n    }\n  }\n\n  updateAccess(event: MatCheckboxChange, accessOption: VocabularyTerm): void {\n\n    if (this.privateAccess.length === 0) {\n      this.tooltipMessage = this.tooltipMessage.replace('public', '');\n    }\n\n    if (event.checked) {\n      this.privateAccess.push(accessOption.value);\n\n      if (this.privateAccess.length > 1) {\n        this.tooltipMessage += ', ';\n      }\n\n      this.tooltipMessage += (accessOption.display);\n\n    } else {\n\n      const indexToRemove = this.privateAccess.indexOf(accessOption.value);\n\n      if (indexToRemove > -1) {\n        this.privateAccess.splice(indexToRemove, 1);\n      }\n\n      this.tooltipMessage = this.tooltipMessage.replace(accessOption.display, '')\n        .replace(': , ', ': ')\n        .replace(', ,', ',')\n        .replace(/,$/, '')\n        .replace(/(, )$/, '');\n\n      if (this.privateAccess.length === 0) {\n        this.tooltipMessage += 'public';\n      }\n    }\n\n    this.accessOut.emit(this.privateAccess);\n  }\n\n  menuOpened(): void {\n    const event: Event = new Event('focusin', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n  menuClosed(): void {\n    const event: Event = new Event('focusout', { bubbles: true, cancelable: true} );\n    this.element.nativeElement.dispatchEvent(event);\n  }\n\n}\n","<div class=\"code-form-container\">\n  <div *ngIf=\"mod.$$deletedCode\" class=\"notification-backdrop\">\n    Deleted&nbsp;\n    <button mat-icon-button matTooltip=\"Undo\" (click)=\"undoDelete()\">\n      <mat-icon svgIcon=\"undo\"></mat-icon>\n    </button>\n  </div>\n  <div class=\"delete-container\">\n  <button mat-icon-button matTooltip=\"Delete code\" (click)=\"deleteCode()\">\n    <mat-icon svgIcon=\"delete_forever\"></mat-icon>\n  </button>\n</div>\n  <div class=\"flex-column related-substance\">\n    <app-substance-selector (selectionUpdated)=\"relatedSubstanceUpdated($event)\"\n                            eventCategory=\"substanceRelationshipRelatedSub\" placeholder=\"Agent Substance\" header=\"Agent Substance\"\n                            [subuuid]=\"relatedSubstanceUuid\">\n    </app-substance-selector>\n  </div>\n    <div class=\"flex-column form-content\">\n      <div class=\"form-row\">\n        <app-cv-input key = \"Agent Modification Agent Modification Process\" title = \"Modification Process\" [model] = \"mod.agentModificationProcess\" (valueChange)=\"updateProcess($event)\"></app-cv-input>\n        <app-cv-input key = \"Agent Modification Agent Modification Type\" title = \"Modification Type\" [model] = \"mod.agentModificationType\" (valueChange)=\"mod.agentModificationType = $event\"></app-cv-input>\n        <app-cv-input key = \"Agent Modification Agent Modification Role\" title = \"Modification Role\" [model] = \"mod.agentModificationRole\" (valueChange)=\"mod.agentModificationRole = $event\"></app-cv-input>\n\n      </div>\n      <div class=\"form-row\">\n    <div class = 'amount'>\n      <div class = \"label amt-label\">\n        Amount\n      </div>\n      <button mat-icon-button matTooltip=\"add\" (click)=\"(openAmountDialog())\">\n        <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n      </button>\n    <div class = \"amount-display\">\n      <div *ngIf = \"mod.amount\">\n        {{displayAmount(mod.amount)}}\n      </div>\n    </div>\n    </div>\n\n    <mat-form-field class=\"group\">\n      <input matInput placeholder=\"Group\" [(ngModel)]=\"mod.modificationGroup\" required name=\"group\" />\n    </mat-form-field>\n    <div class = \"access\">\n      <app-access-manager (accessOut)=\"updateAccess($event)\" [access]=\"mod.access\">\n      </app-access-manager>\n    </div>\n      </div>\n    </div>\n\n\n  </div>\n  <div class = \"form-row\">\n      <app-audit-info [source] = \"mod\"></app-audit-info>\n    </div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AmountFormDialogComponent} from '@gsrs-core/substance-form/amount-form-dialog/amount-form-dialog.component';\nimport {AgentModification, StructuralModification, SubstanceAmount, SubstanceRelated, SubstanceSummary} from '@gsrs-core/substance';\nimport {ControlledVocabularyService, VocabularyTerm} from '@gsrs-core/controlled-vocabulary';\nimport {Subscription} from 'rxjs';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UtilsService} from '@gsrs-core/utils';\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport {SubstanceFormService} from '@gsrs-core/substance-form/substance-form.service';\n\n@Component({\n  selector: 'app-agent-modification-form',\n  templateUrl: './agent-modification-form.component.html',\n  styleUrls: ['./agent-modification-form.component.scss']\n})\nexport class AgentModificationFormComponent implements OnInit {\n  private privateMod: AgentModification;\n  @Output() modDeleted = new EventEmitter<AgentModification>();\n  modTypeList: Array<VocabularyTerm> = [];\n  modRoleList: Array<VocabularyTerm> = [];\n  modProcessList: Array<VocabularyTerm> = [];\n  deleteTimer: any;\n  relatedSubstanceUuid: string;\n  private subscriptions: Array<Subscription> = [];\n  private overlayContainer: HTMLElement;\n  siteDisplay: string;\n\n  constructor(\n    private cvService: ControlledVocabularyService,\n    private dialog: MatDialog,\n    private utilsService: UtilsService,\n    private overlayContainerService: OverlayContainer,\n    private substanceFormService: SubstanceFormService\n  ) { }\n  ngOnInit() {\n    this.getVocabularies();\n    this.overlayContainer = this.overlayContainerService.getContainerElement();\n  }\n\n  @Input()\n  set mod(mod: AgentModification) {\n    this.privateMod = mod;\n    if (this.privateMod.agentSubstance) {\n      this.relatedSubstanceUuid = this.privateMod.agentSubstance.refuuid;\n    }\n\n  }\n\n  get mod(): AgentModification {\n    return this.privateMod;\n  }\n\n  updateAccess(access: Array<string>): void {\n    this.mod.access = access;\n  }\n\n  getVocabularies(): void {\n    this.cvService.getDomainVocabulary('AGENT_MODIFICATION_TYPE', 'AGENT_MODIFICATION_PROCESS', 'ROLE').subscribe(response => {\n      this.modTypeList = response['AGENT_MODIFICATION_TYPE'].list;\n      this.modProcessList = response['AGENT_MODIFICATION_PROCESS'].list;\n      this.modRoleList = response['ROLE'].list;\n    });\n  }\n\n  deleteCode(): void {\n    this.privateMod.$$deletedCode = this.utilsService.newUUID();\n    if (!this.privateMod\n    ) {\n      this.deleteTimer = setTimeout(() => {\n        this.modDeleted.emit(this.privateMod);\n      }, 2000);\n    }\n  }\n\n  undoDelete(): void {\n    clearTimeout(this.deleteTimer);\n    delete this.privateMod.$$deletedCode;\n  }\n\n  openAmountDialog(): void {\n    if (!this.mod.amount) {\n      this.mod.amount = {};\n    }\n    const dialogRef = this.dialog.open(AmountFormDialogComponent, {\n      data: {'subsAmount': this.mod.amount},\n      width: '990px'\n    });\n    this.overlayContainer.style.zIndex = '1002';\n\n    const dialogSubscription = dialogRef.afterClosed().subscribe(newAmount => {\n      this.overlayContainer.style.zIndex = null;\n      this.mod.amount = newAmount;\n    });\n    this.subscriptions.push(dialogSubscription);\n  }\n\n  updateProcess(event: string) {\n    this.privateMod.agentModificationProcess = event;\n  }\n\n  relatedSubstanceUpdated(substance: SubstanceSummary): void {\n    if ( substance !== null) {\n      const relatedSubstance: SubstanceRelated = {\n        refPname: substance._name,\n        name: substance._name,\n        refuuid: substance.uuid,\n        substanceClass: 'reference',\n        approvalID: substance.approvalID\n      };\n      this.mod.agentSubstance = relatedSubstance;\n      this.relatedSubstanceUuid = this.mod.agentSubstance.refuuid;\n    } else {\n      this.mod.agentSubstance = null;\n      this.relatedSubstanceUuid = '';\n    }\n  }\n\n  displayAmount(amt: SubstanceAmount): string {\n    return this.utilsService.displayAmount(amt);\n  }\n\n  formatValue(v) {\n    if (v) {\n      if (typeof v === 'object') {\n        if (v.display) {\n          return v.display;\n        } else if (v.value) {\n          return v.value;\n        } else {\n          return null;\n        }\n      } else {\n        return v;\n      }\n    }\n    return null;\n  }\n}\n","\n<div class=\"flex-row\">\n  <span class=\"middle-fill\"></span>\n  <!-- <button mat-button (click)=\"addStructuralModification()\">\n    Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n  </button> -->\n</div>\n  <div class = 'alternate-backgrounds'   *ngFor=\"let mod of modifications; last as isLast; index as index\"  [id]=\"'substance-agent-modification-' + index\" >\n    <app-agent-modification-form [mod]=\"mod\" (modDeleted) = \"deleteAgentModification()\" ></app-agent-modification-form>\n    <mat-divider class=\"form-divider\" [inset]=\"true\" *ngIf=\"!isLast\"></mat-divider>\n  </div>\n\n\n  <div class=\"flex-row\" *ngIf= \"modifications && modifications.length > 0\">\n      <span class = \"middle-fill\"></span>\n         <button mat-button (click)=\"addStructuralModification()\">\n      Add Modification <mat-icon svgIcon=\"add_circle_outline\"></mat-icon>\n    </button> \n    </div>\n","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {SubstanceCardBaseFilteredList, SubstanceCardBaseList} from '@gsrs-core/substance-form/base-classes/substance-form-base-filtered-list';\nimport {AgentModification, StructuralModification} from '@gsrs-core/substance';\nimport {Subscription} from 'rxjs';\nimport {SubstanceFormAgentModificationsService} from './substance-form-agent-modifications.service';\nimport {ScrollToService} from '@gsrs-core/scroll-to/scroll-to.service';\nimport {GoogleAnalyticsService} from '@gsrs-core/google-analytics';\n\n@Component({\n  selector: 'app-substance-form-agent-modifications-card',\n  templateUrl: './substance-form-agent-modifications-card.component.html',\n  styleUrls: ['./substance-form-agent-modifications-card.component.scss']\n})\n// eslint-disable-next-line max-len\nexport class SubstanceFormAgentModificationsCardComponent\n  extends SubstanceCardBaseFilteredList<AgentModification>\n  implements OnInit, AfterViewInit, OnDestroy, SubstanceCardBaseList {\n\n  modifications: Array<AgentModification>;\n  private subscriptions: Array<Subscription> = [];\n\n  constructor(\n    private substanceFormAgentModificationsService: SubstanceFormAgentModificationsService,\n    private scrollToService: ScrollToService,\n    public gaService: GoogleAnalyticsService\n  ) {\n    super(gaService);\n    this.analyticsEventCategory = 'substance form agent modifications';\n  }\n\n  ngOnInit() {\n    this.menuLabelUpdate.emit('Agent Modifications');\n  }\n\n  ngAfterViewInit() {\n    this.canAddItemUpdate.emit(true);\n    const agentSubscription = this.substanceFormAgentModificationsService.substanceAgentModifications.subscribe(modifications => {\n      this.modifications = modifications;\n    });\n    this.subscriptions.push(agentSubscription);\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n    this.componentDestroyed.emit();\n  }\n\n  addItem() {\n    this.addStructuralModification();\n  }\n\n  addStructuralModification(): void {\n    this.substanceFormAgentModificationsService.addSubstanceAgentModification();\n    setTimeout(() => {\n      this.scrollToService.scrollToElement(`substance-agent-modification-0`, 'center');\n    });\n  }\n\n  deleteAgentModification(modification: AgentModification): void {\n    this.substanceFormAgentModificationsService.deleteSubstanceAgentModification(modification);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DynamicComponentLoaderModule } from '../../dynamic-component-loader/dynamic-component-loader.module';\nimport { SubstanceFormModule } from '../substance-form.module';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ScrollToModule } from '../../scroll-to/scroll-to.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatInputModule } from '@angular/material/input';\nimport {SubstanceFormAgentModificationsCardComponent} from '@gsrs-core/substance-form/agent-modifications/substance-form-agent-modifications-card.component';\nimport {AgentModificationFormComponent} from '@gsrs-core/substance-form/agent-modifications/agent-modification-form.component';\nimport { SubstanceSelectorModule } from '@gsrs-core/substance-selector/substance-selector.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DynamicComponentLoaderModule.forChild(SubstanceFormAgentModificationsCardComponent),\n    SubstanceFormModule,\n    MatDividerModule,\n    MatIconModule,\n    MatButtonModule,\n    ScrollToModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatPaginatorModule,\n    MatInputModule,\n    SubstanceSelectorModule\n  ],\n  declarations: [\n    SubstanceFormAgentModificationsCardComponent,\n    AgentModificationFormComponent\n  ]\n})\nexport class SubstanceFormAgentModificationsModule { }\n","<div class = 'audit-container' *ngIf = \"source\">\n  <div class = \"name\" *ngIf = 'source.createdBy'><b class = 'static'>Created By:</b> {{ source.createdBy}} </div>\n  <div class = \"date\" *ngIf = 'source.created'><b class = 'static'>on</b> {{ source.created | date:'medium'}}</div>\n  <div class = \"spacer\" *ngIf = 'source.created && source.lastEdited'> <b>-</b> </div>\n  <div class = \"name\" *ngIf = 'source.lastEditedBy'><b class = 'static'>Last Edited By</b>: {{ source.lastEditedBy}} </div>\n  <div class = \"date\" *ngIf = 'source.lastEdited'><b class = 'static'>on</b> {{ source.lastEdited | date:'medium'}}</div>\n</div>\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-audit-info',\n  templateUrl: './audit-info.component.html',\n  styleUrls: ['./audit-info.component.scss']\n})\nexport class AuditInfoComponent implements OnInit {\n  @Input() source: any;\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n}\n"],"sourceRoot":"webpack:///","file":"6684.61cb7bf886aa8656.js"}